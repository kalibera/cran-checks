* using log directory ‘/var/scratch2/tomas/cran/rcnst/check/rstpm2.Rcheck’
* using R Under development (unstable) (2025-01-15 r87576)
* using platform: x86_64-pc-linux-gnu
* R was compiled by
    gcc (GCC) 14.2.1 20240912 (Red Hat 14.2.1-3)
    GNU Fortran (GCC) 14.2.1 20240912 (Red Hat 14.2.1-3)
* running under: Fedora Linux 40 (MATE-Compiz)
* using session charset: UTF-8
* checking for file ‘rstpm2/DESCRIPTION’ ... OK
* checking extension type ... Package
* this is package ‘rstpm2’ version ‘1.6.6.1’
* package encoding: UTF-8
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking whether package ‘rstpm2’ can be installed ... OK
* used C compiler: ‘gcc (GCC) 14.2.1 20240912 (Red Hat 14.2.1-3)’
* used Fortran compiler: ‘GNU Fortran (GCC) 14.2.1 20240912 (Red Hat 14.2.1-3)’
* used C++ compiler: ‘g++ (GCC) 14.2.1 20240912 (Red Hat 14.2.1-3)’
* checking package directory ... OK
* checking ‘build’ directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking code files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking loading without being on the library search path ... OK
* checking dependencies in R code ... OK
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... OK
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking contents of ‘data’ directory ... OK
* checking data for non-ASCII characters ... OK
* checking LazyData ... OK
* checking data for ASCII and uncompressed saves ... OK
* checking line endings in C/C++/Fortran sources/headers ... OK
* checking line endings in Makefiles ... OK
* checking compilation flags in Makevars ... OK
* checking for GNU extensions in Makefiles ... OK
* checking for portable use of $(BLAS_LIBS) and $(LAPACK_LIBS) ... OK
* checking use of PKG_*FLAGS in Makefiles ... OK
* checking compiled code ... NOTE
Note: information on .o files is not available
* checking usage of KIND in Fortran files ... OK
* checking sizes of PDF files under ‘inst/doc’ ... OK
* checking installed files from ‘inst/doc’ ... OK
* checking files in ‘vignettes’ ... OK
* checking examples ... ERROR
Running examples in ‘rstpm2-Ex.R’ failed
The error most likely occurred in:

> ### Name: vuniroot
> ### Title: Vectorised One Dimensional Root (Zero) Finding
> ### Aliases: vuniroot
> ### Keywords: optimize
> 
> ### ** Examples
> 
> ##--- vuniroot() with new interval extension + checking features: --------------
> 
> f1 <- function(x) (121 - x^2)/(x^2+1)
> f2 <- function(x) exp(-x)*(x - 12)
> 
> tools::assertCondition(vuniroot(f1, cbind(0,10)),
+                        "error", verbose=TRUE)
assertCondition: caught “error”
> tools::assertCondition(vuniroot(f2, cbind(0, 2)),
+                        "error", verbose=TRUE)
assertCondition: caught “error”
> ##--> error: f() .. end points not of opposite sign
> 
> ## where as  'extendInt="yes"'  simply first enlarges the search interval:
> u1 <- vuniroot(f1, cbind(0,10),extendInt="yes", trace=1)
search in [0,10] ... extended to [-1.5e-05, 11.5] in 4 steps
> u2 <- vuniroot(f2, cbind(0,2), extendInt="yes", trace=2)
search in [0,2]
 .. modified lower,upper: (         -1e-06,           2.02)
 .. modified lower,upper: (         -3e-06,           2.06)
 .. modified lower,upper: (         -7e-06,           2.14)
 .. modified lower,upper: (       -1.5e-05,            2.3)
 .. modified lower,upper: (       -3.1e-05,           2.62)
 .. modified lower,upper: (       -6.3e-05,           3.26)
 .. modified lower,upper: (      -0.000127,           4.54)
 .. modified lower,upper: (      -0.000255,            7.1)
 .. modified lower,upper: (      -0.000511,          12.22)
> stopifnot(all.equal(u1$root, 11, tolerance = 1e-5),
+           all.equal(u2$root, 12, tolerance = 6e-6))
> 
> ## The *danger* of interval extension:
> ## No way to find a zero of a positive function, but
> ## numerically, f(-|M|) becomes zero :
> tools::assertCondition(u3 <- vuniroot(exp, cbind(0,2), extendInt="yes", trace=TRUE),
+                        "error", verbose=TRUE)
search in [0,2] ... extended to [-1073.74, 2.14748e+07] in 30 steps
assertCondition: caught “error”
> 
> ## Nonsense example (must give an error):
> tools::assertCondition( vuniroot(function(x) 1, cbind(0,1), extendInt="yes"),
+                        "error", verbose=TRUE)
assertCondition: caught “error”
> 
> ## Convergence checking :
> sinc_ <- function(x) ifelse(x == 0, 1, sin(x)/x)
> curve(sinc_, -6,18); abline(h=0,v=0, lty=3, col=adjustcolor("gray", 0.8))
> ## Don't show: 
> tools::assertWarning(
+ ## End(Don't show)
+ vuniroot(sinc_, cbind(0,5), extendInt="yes", maxiter=4) #-> "just" a warning
+ ## Don't show: 
+  , verbose=TRUE)
Asserted warning: _NOT_ converged in 4 iterations
> ## End(Don't show)
> 
> ## now with  check.conv=TRUE, must signal a convergence error :
> ## Don't show: 
> tools::assertError(
+ ## End(Don't show)
+ vuniroot(sinc_, cbind(0,5), extendInt="yes", maxiter=4, check.conv=TRUE)
+ ## Don't show: 
+  , verbose=TRUE)
Asserted error: _NOT_ converged in 4 iterations
> ## End(Don't show)
> 
> ### Weibull cumulative hazard (example origin, Ravi Varadhan):
> cumhaz <- function(t, a, b) b * (t/b)^a
> froot <- function(x, u, a, b) cumhaz(x, a, b) - u
> 
> n <- 10
> u <- -log(runif(n))
> a <- 1/2
> b <- 1
> ## Find failure times
> ru <- vuniroot(froot, u=u, a=a, b=b, interval= cbind(rep(1.e-14,n), rep(1e4,n)),
+                extendInt="yes")$root
> ru2 <- vuniroot(froot, u=u, a=a, b=b, interval= cbind(rep(0.01,n), rep(10,n)),
+                 extendInt="yes")$root
> stopifnot(all.equal(ru, ru2, tolerance = 6e-6))
> 
> r1 <- vuniroot(froot, u= 0.99, a=a, b=b, interval= cbind(0.01, 10),
+              extendInt="up")
> stopifnot(all.equal(0.99, cumhaz(r1$root, a=a, b=b)))
> 
> ## An error if 'extendInt' assumes "wrong zero-crossing direction":
> ## Don't show: 
> tools::assertError(
+ ## End(Don't show)
+ vuniroot(froot, u= 0.99, a=a, b=b, interval= cbind(0.1, 10), extendInt="down")
+ ## Don't show: 
+  , verbose=TRUE)
Asserted error: no sign change found in 1000 iterations
> ## End(Don't show)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  17.417 0.421 18.362 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
ERROR: modification of compiler constant of type language, length 4
ERROR: the modified constant is function body:
ifelse(x == 0, -0.0986659612490242, sin(x)/x)
ERROR: the body was originally:
ifelse(x == 0, 1, sin(x)/x)
ERROR: modification of compiler constant of type double, length 1
ERROR: the modified value of the constant is:
[1] -0.09866596
ERROR: the original value of the constant is:
[1] 1
ERROR: the modified constant is at index 3
ERROR: the modified constant is in this function body:
ifelse(x == 0, -0.0986659612490242, sin(x)/x)
Fatal error: compiler constants were modified!

* checking for unstated dependencies in ‘tests’ ... OK
* checking tests ... ERROR
  Running ‘testthat.R’
Running the tests in ‘tests/testthat.R’ failed.
Last 13 lines of output:
  
      colon
  
  > 
  > test_check("rstpm2")
  [ FAIL 0 | WARN 0 | SKIP 5 | PASS 117 ]
  
  ══ Skipped tests (5) ═══════════════════════════════════════════════════════════
  ERROR: modification of compiler constant of type language, length 4
  ERROR: the modified constant is function body:
  ifelse(x == 0, -0.0986659612490242, sin(x)/x)
  ERROR: the body was originally:
  ifelse(x == 0, 1, sin(x)/x)
  Error: promise already under evaluation: recursive default argument reference or earlier problems?
  Execution halted
* checking for unstated dependencies in vignettes ... OK
* checking package vignettes ... OK
* checking re-building of vignette outputs ... OK
* checking PDF version of manual ... OK
* DONE
Status: 2 ERRORs, 1 NOTE


R Under development (unstable) (2021-03-04 r80063) -- "Unsuffered Consequences"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "modeltime.resample"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('modeltime.resample')
Loading required package: modeltime
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("get_target_text_from_resamples")
> ### * get_target_text_from_resamples
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_target_text_from_resamples
> ### Title: Gets the target variable as text from unnested resamples
> ### Aliases: get_target_text_from_resamples
> 
> ### ** Examples
> 
> 
> # The .resample_results column is deeply nested
> m750_training_resamples_fitted
# Modeltime Table
# A tibble: 3 x 4
  .model_id .model     .model_desc             .resample_results
      <int> <list>     <chr>                   <list>           
1         1 <workflow> ARIMA(0,1,1)(0,1,1)[12] <rsmp[+]>        
2         2 <workflow> PROPHET                 <rsmp[+]>        
3         3 <workflow> GLMNET                  <rsmp[+]>        
> 
> # Unnest and prepare the resample predictions for evaluation
> unnest_modeltime_resamples(m750_training_resamples_fitted) %>%
+     get_target_text_from_resamples()
[1] "value"
> 
> 
> 
> 
> cleanEx()
> nameEx("m750_training_resamples_fitted")
> ### * m750_training_resamples_fitted
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: m750_training_resamples_fitted
> ### Title: Time Series Cross Validation Resample Predictions (Results) from
> ###   the M750 Data (Training Set)
> ### Aliases: m750_training_resamples_fitted
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> m750_training_resamples_fitted
# Modeltime Table
# A tibble: 3 x 4
  .model_id .model     .model_desc             .resample_results
      <int> <list>     <chr>                   <list>           
1         1 <workflow> ARIMA(0,1,1)(0,1,1)[12] <rsmp[+]>        
2         2 <workflow> PROPHET                 <rsmp[+]>        
3         3 <workflow> GLMNET                  <rsmp[+]>        
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("modeltime_fit_resamples")
> ### * modeltime_fit_resamples
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: modeltime_fit_resamples
> ### Title: Fits Models in a Modeltime Table to Resamples
> ### Aliases: modeltime_fit_resamples
> 
> ### ** Examples
> 
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 0.1.2 ──
✔ broom     0.7.5      ✔ recipes   0.1.15
✔ dials     0.0.9      ✔ rsample   0.0.9 
✔ dplyr     1.0.4      ✔ tibble    3.1.0 
✔ ggplot2   3.3.3      ✔ tidyr     1.1.3 
✔ infer     0.5.4      ✔ tune      0.1.3 
✔ modeldata 0.1.0      ✔ workflows 0.2.1 
✔ parsnip   0.1.5      ✔ yardstick 0.0.7 
✔ purrr     0.3.4      
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ purrr::discard() masks scales::discard()
✖ dplyr::filter()  masks stats::filter()
✖ dplyr::lag()     masks stats::lag()
✖ recipes::step()  masks stats::step()
> library(modeltime)
> library(timetk)
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ readr   1.4.0     ✔ forcats 0.5.1
✔ stringr 1.4.0     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ readr::col_factor() masks scales::col_factor()
✖ purrr::discard()    masks scales::discard()
✖ dplyr::filter()     masks stats::filter()
✖ stringr::fixed()    masks recipes::fixed()
✖ dplyr::lag()        masks stats::lag()
✖ readr::spec()       masks yardstick::spec()
> 
> # Make resamples
> resamples_tscv <- training(m750_splits) %>%
+     time_series_cv(
+         assess      = "2 years",
+         initial     = "5 years",
+         skip        = "2 years",
+         # Normally we do more than one slice, but this speeds up the example
+         slice_limit = 1
+     )
Using date_var: date
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:forcats’, ‘package:stringr’, ‘package:readr’,
  ‘package:tidyverse’, ‘package:timetk’, ‘package:yardstick’,
  ‘package:workflows’, ‘package:tune’, ‘package:tidyr’,
  ‘package:tibble’, ‘package:rsample’, ‘package:recipes’,
  ‘package:purrr’, ‘package:parsnip’, ‘package:modeldata’,
  ‘package:infer’, ‘package:ggplot2’, ‘package:dplyr’, ‘package:dials’,
  ‘package:scales’, ‘package:broom’, ‘package:tidymodels’

> nameEx("modeltime_resample_accuracy")
> ### * modeltime_resample_accuracy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: modeltime_resample_accuracy
> ### Title: Calculate Accuracy Metrics from Modeltime Resamples
> ### Aliases: modeltime_resample_accuracy
> 
> ### ** Examples
> 
> library(modeltime)
> 
> # Mean (Default)
> m750_training_resamples_fitted %>%
+     modeltime_resample_accuracy() %>%
+     table_modeltime_accuracy(.interactive = FALSE)
ERROR: modification of compiler constant of type integer, length 1
ERROR: the modified value of the constant is:
[1] 3
ERROR: the original value of the constant is:
[1] 1
ERROR: the modified constant is at index 12
ERROR: the modified constant is in this function body:
{
    cols <- enquo(cols)
    if (.top_level) {
        mask$set_current_group(1L)
    }
    else {
        cols <- quo_set_env(cols, data_mask_top(quo_get_env(cols), 
            recursive = FALSE, inherit = TRUE))
    }
    vars <- tidyselect::eval_select(cols, data = mask$across_cols())
    vars <- names(vars)
    if (is.null(fns)) {
        if (!is.null(names)) {
            glue_mask <- across_glue_mask(.caller_env, .col = vars, 
                .fn = "1")
            names <- vec_as_names(glue(names, .envir = glue_mask), 
                repair = "check_unique")
        }
        value <- list(vars = vars, fns = fns, names = names)
        return(value)
    }
    if (is.function(fns) || is_formula(fns)) {
        names <- names %||% "{.col}"
        fns <- list(`1` = fns)
    }
    else {
        names <- names %||% "{.col}_{.fn}"
    }
    if (!is.list(fns)) {
        abort(c("Problem with `across()` input `.fns`.", i = "Input `.fns` must be NULL, a function, a formula, or a list of functions/formulas."))
    }
    expr_protect <- function(x) {
        call2(quote, x)
    }
    fns <- map(fns, function(fn) {
        if (is_formula(fn) && .top_level) {
            f_rhs(fn) <- call2(quote(rlang::eval_tidy), expr_protect(f_rhs(fn)), 
                data = mask$get_rlang_mask())
        }
        fn <- as_function(fn)
        fn
    })
    if (is.null(names(fns))) {
        names_fns <- seq_along(fns)
    }
    else {
        names_fns <- names(fns)
        empties <- which(names_fns == "")
        if (length(empties)) {
            names_fns[empties] <- empties
        }
    }
    glue_mask <- glue_mask <- across_glue_mask(.caller_env, .col = rep(vars, 
        each = length(fns)), .fn = rep(names_fns, length(vars)))
    names <- vec_as_names(glue(names, .envir = glue_mask), repair = "check_unique")
    list(vars = vars, fns = fns, names = names)
}
Function across_setup_impl in namespace dplyr has this body.
Fatal error: compiler constants were modified!


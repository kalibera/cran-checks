
R Under development (unstable) (2021-03-04 r80063) -- "Unsuffered Consequences"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "lpirfs"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('lpirfs')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("hp_filter")
> ### * hp_filter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hp_filter
> ### Title: Decompose a times series via the Hodrick-Prescott filter
> ### Aliases: hp_filter
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("lp_lin")
> ### * lp_lin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lp_lin
> ### Title: Compute linear impulse responses
> ### Aliases: lp_lin
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("lp_lin_iv")
> ### * lp_lin_iv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lp_lin_iv
> ### Title: Compute linear impulse responses with identified shock and/or
> ###   with 2SLS
> ### Aliases: lp_lin_iv
> 
> ### ** Examples
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("lp_lin_panel")
> ### * lp_lin_panel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lp_lin_panel
> ### Title: Compute linear impulse responses with local projections for
> ###   panel data
> ### Aliases: lp_lin_panel
> 
> ### ** Examples
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("lp_nl")
> ### * lp_nl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lp_nl
> ### Title: Compute nonlinear impulse responses
> ### Aliases: lp_nl
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("lp_nl_iv")
> ### * lp_nl_iv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lp_nl_iv
> ### Title: Compute nonlinear impulse responses with identified shock
> ### Aliases: lp_nl_iv
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("lp_nl_panel")
> ### * lp_nl_panel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lp_nl_panel
> ### Title: Compute nonlinear impulse responses for panel data
> ### Aliases: lp_nl_panel
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_lin")
> ### * plot_lin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_lin
> ### Title: Compute and display plots of linear impulse responses
> ### Aliases: plot_lin
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_nl")
> ### * plot_nl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_nl
> ### Title: Compute and display plots of nonlinear impulse responses
> ### Aliases: plot_nl
> 
> ### ** Examples
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.662 0.421 6.406 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')

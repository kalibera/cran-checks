
R Under development (unstable) (2021-03-04 r80063) -- "Unsuffered Consequences"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "mappoly"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('mappoly')
==============================
MAPpoly Package [Version 0.2.12020-11-23 10:50:11 UTC]
More information: https://github.com/mmollina/MAPpoly
==============================
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("add_marker")
> ### * add_marker
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_marker
> ### Title: Add a single marker to a map
> ### Aliases: add_marker
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("cache_counts_twopt")
> ### * cache_counts_twopt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cache_counts_twopt
> ### Title: Frequency of genotypes for two-point recombination fraction
> ###   estimation
> ### Aliases: cache_counts_twopt
> ### Keywords: analysis two-point
> 
> ### ** Examples
> 
>     all.mrk<-make_seq_mappoly(tetra.solcap, 1:20)
>     ## local computation
>     counts<-cache_counts_twopt(all.mrk, ncpus = 1)

   Caching the following dosage combination: 
        P.k P.k+1 Q.k Q.k+1
Conf.1    0     0   1     1
Conf.2    0     1   1     0
Conf.3    0     1   1     1
Conf.4    0     1   1     3
Conf.5    0     2   1     1
Conf.6    0     3   1     2
Conf.7    0     3   1     3
Conf.8    0     3   1     4
Conf.9    0     4   1     3
Conf.10   1     0   0     1
Conf.11   1     0   1     1
Conf.12   1     1   0     0
Conf.13   1     1   0     3
Conf.14   1     1   1     0
Conf.15   1     1   1     1
Conf.16   1     1   1     3
Conf.17   1     2   0     1
Conf.18   1     2   1     1
Conf.19   1     2   3     1
Conf.20   1     3   0     2
Conf.21   1     3   0     3
Conf.22   1     3   0     4
Conf.23   1     3   1     2
Conf.24   1     3   1     3
Conf.25   1     3   1     4
Conf.26   1     4   0     3
Conf.27   1     4   1     3
Conf.28   3     0   2     1
Conf.29   3     0   4     1
Conf.30   3     1   2     0
Conf.31   3     1   2     1
Conf.32   3     1   2     3
Conf.33   3     1   3     3
Conf.34   3     1   4     0
Conf.35   3     1   4     1
Conf.36   3     1   4     3
Conf.37   3     2   2     1
Conf.38   3     2   3     1
Conf.39   3     2   4     1
Conf.40   3     3   2     2
Conf.41   3     3   2     3
Conf.42   3     3   2     4
Conf.43   3     3   4     2
Conf.44   3     3   4     3
Conf.45   3     3   4     4
Conf.46   3     4   2     3
Conf.47   3     4   4     3
Conf.48   4     0   3     1
Conf.49   4     1   3     0
Conf.50   4     1   3     1
Conf.51   4     1   3     3
Conf.52   4     2   3     1
Conf.53   4     3   3     2
Conf.54   4     3   3     3
Conf.55   4     3   3     4
Conf.56   4     4   3     3
INFO: Going singlemode. Using one Core/CPU/PC for calculation.
INFO: Done with 56 phase configurations
INFO: Calculation took: 5.454 seconds
>     ## load from internal file or web-stored counts (especially important for high ploidy levels)
>     counts.cached<-cache_counts_twopt(all.mrk, cached = TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("calc_genoprob")
> ### * calc_genoprob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc_genoprob
> ### Title: Compute conditional probabilities of the genotypes
> ### Aliases: calc_genoprob
> 
> ### ** Examples
> 
>  ## tetraploid example
>  probs.t<-calc_genoprob(input.map = solcap.dose.map[[1]],
+                         verbose = TRUE)
	Ploidy level: 4
	Number of markers: 373
	Number of individuals: 160
	..................................................
	..................................................
	..................................................
	..........
>  probs.t
  This is an object of class 'mappoly.genoprob'
  -----------------------------------------------------
  No. genotypic classes:                     36 
  No. positions:                             373 
  No. individuals:                           160 
  -----------------------------------------------------
>  ## displaying individual 1, 36 genotypic states
>  ## (rows) across linkage group 1 (columns)                          
>  image(t(probs.t$probs[,,1]))
> 
> 
> 
> 
> cleanEx()
> nameEx("calc_genoprob_dist")
> ### * calc_genoprob_dist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc_genoprob_dist
> ### Title: Compute conditional probabilities of the genotypes using
> ###   probability distribution of dosages
> ### Aliases: calc_genoprob_dist
> 
> ### ** Examples
> 
>  ## tetraploid example
>  probs.t<-calc_genoprob_dist(input.map = solcap.prior.map[[1]],
+                            dat.prob = tetra.solcap.geno.dist,
+                            verbose = TRUE)
Ploidy level:4
Number of individuals:160
	..................................................
	..................................................
	..................................................
	..........
>  probs.t
  This is an object of class 'mappoly.genoprob'
  -----------------------------------------------------
  No. genotypic classes:                     36 
  No. positions:                             358 
  No. individuals:                           160 
  -----------------------------------------------------
>  ## displaying individual 1, 36 genotypic states 
>  ## (rows) across linkage group 1 (columns)                          
>  image(t(probs.t$probs[,,1]))
> 
> 
> 
> 
> cleanEx()
> nameEx("calc_genoprob_error")
> ### * calc_genoprob_error
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc_genoprob_error
> ### Title: Compute conditional probabilities of the genotypes using global
> ###   error
> ### Aliases: calc_genoprob_error
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("calc_homoprob")
> ### * calc_homoprob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc_homoprob
> ### Title: Homolog probabilities
> ### Aliases: calc_homoprob
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("calc_prefpair_profiles")
> ### * calc_prefpair_profiles
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc_prefpair_profiles
> ### Title: Preferential pairing profiles
> ### Aliases: calc_prefpair_profiles
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("check_data_sanity")
> ### * check_data_sanity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check_data_sanity
> ### Title: Data sanity check
> ### Aliases: check_data_sanity
> 
> ### ** Examples
> 
> check_data_sanity(tetra.solcap)
[1] 0
> 
> 
> 
> cleanEx()
> nameEx("dist_prob_to_class")
> ### * dist_prob_to_class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_prob_to_class
> ### Title: Returns the class with the highest probability in a genotype
> ###   probability distribution
> ### Aliases: dist_prob_to_class
> ### Keywords: internal
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("drop_marker")
> ### * drop_marker
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drop_marker
> ### Title: Remove markers from a map
> ### Aliases: drop_marker
> 
> ### ** Examples
> 
>  sub.map<-get_submap(maps.hexafake[[1]], 1:50, reestimate.rf = FALSE)

    You selected: reestimate.rf = FALSE
    -----------------------------------------
    The recombination fractions provided were
    obtained using the marker positions in the 
    input map; For accurate values, plese 
    reestimate the map using functions 'reest_rf', 
    'est_full_hmm_with_global_error' or 
    'est_full_hmm_with_prior_prob'
>  plot(sub.map, mrk.names = TRUE)
>  mrk.to.remove <- c("M_1", "M_23", "M_34")
>  red.map <- drop_marker(sub.map, mrk.to.remove)

    INFO:
    -----------------------------------------
    The recombination fractions provided were
    obtained using the marker positions in the 
    input map; For accurate values, plese 
    reestimate the map using functions 'reest_rf', 
    'est_full_hmm_with_global_error' or 
    'est_full_hmm_with_prior_prob'
>  plot(red.map, mrk.names = TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("elim_redundant")
> ### * elim_redundant
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: elim_redundant
> ### Title: Eliminate redundant markers
> ### Aliases: elim_redundant
> 
> ### ** Examples
> 
>     all.mrk<-make_seq_mappoly(hexafake, 'all')
>     red.mrk<-elim_redundant(all.mrk)
>     plot(red.mrk)
>     unique.mrks<-make_seq_mappoly(red.mrk)
>    
> 
> 
> 
> cleanEx()
> nameEx("est_full_hmm_with_global_error")
> ### * est_full_hmm_with_global_error
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: est_full_hmm_with_global_error
> ### Title: Re-estimate genetic map given a global genotyping error
> ### Aliases: est_full_hmm_with_global_error
> 
> ### ** Examples
> 
>     submap <- get_submap(solcap.dose.map[[1]], mrk.pos = 1:20, verbose = FALSE)
>     err.submap <- est_full_hmm_with_global_error(submap, 
+                                                  error=0.01, 
+                                                  tol=10e-4, 
+                                                  verbose = TRUE)

 ----------------------------------------------
 INFO: running HMM using full transition space:
       this operation may take a while.
-----------------------------------------------
Ploidy level:4
Number of individuals:160
	
0.030 0.000 0.000 0.007 0.007 0.005 0.002 0.006 0.003 0.001 0.002 0.000 0.003 0.000 0.003 0.001 0.023 0.037 0.000 	
0.030 0.000 0.000 0.007 0.007 0.003 0.001 0.004 0.001 0.000 0.001 0.000 0.003 0.000 0.001 0.000 0.023 0.037 0.000 	
0.029 0.000 0.000 0.008 0.008 0.003 0.001 0.003 0.000 0.000 0.001 0.000 0.003 0.000 0.001 0.000 0.022 0.037 0.000 	
0.029 0.000 0.000 0.008 0.008 0.003 0.001 0.003 0.000 0.000 0.001 0.000 0.003 0.000 0.001 0.000 0.022 0.037 0.000 	
0.029 0.000 0.000 0.008 0.008 0.003 0.001 0.003 0.000 0.000 0.000 0.000 0.003 0.000 0.000 0.000 0.022 0.037 0.000 	
0.029 0.000 0.000 0.008 0.008 0.003 0.000 0.004 0.000 0.000 0.000 0.000 0.003 0.000 0.000 0.000 0.022 0.037 0.000 	
0.029 0.000 0.000 0.008 0.008 0.003 0.000 0.004 0.000 0.000 0.000 0.000 0.003 0.000 0.000 0.000 0.022 0.037 0.000 >     err.submap
This is an object of class 'mappoly.map'
    Ploidy level:	 4 
    No. individuals:	 160 
    No. markers:	 20 
    No. linkage phases:	 1 

    ---------------------------------------------
    Number of linkage phase configurations:  1
    ---------------------------------------------
    Linkage phase configuration:  1
       map length:	 11.69
       log-likelihood:	 -377
       LOD:		 0
    ~~~~~~~~~~~~~~~~~~
>     plot_map_list(list(dose = submap, err = err.submap), 
+                   title = "estimation procedure")
> 
> 
> 
> 
> cleanEx()
> nameEx("est_full_hmm_with_prior_prob")
> ### * est_full_hmm_with_prior_prob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: est_full_hmm_with_prior_prob
> ### Title: Re-estimate genetic map using dosage prior probability
> ###   distribution
> ### Aliases: est_full_hmm_with_prior_prob
> 
> ### ** Examples
> 
>     submap <- get_submap(solcap.dose.map[[1]], mrk.pos = 1:20, verbose = FALSE)
>     prob.submap <- est_full_hmm_with_prior_prob(submap,
+                                                 dat.prob = tetra.solcap.geno.dist,
+                                                 tol=10e-4, 
+                                                 verbose = TRUE)

 ----------------------------------------------
 INFO: running HMM using full transition space:
       this operation may take a while.
-----------------------------------------------
Ploidy level:4
Number of individuals:160
	
0.028 0.000 0.000 0.007 0.007 0.008 0.005 0.010 0.007 0.002 0.003 0.000 0.004 0.000 0.004 0.001 0.024 0.038 0.000 	
0.026 0.000 0.000 0.007 0.007 0.008 0.005 0.009 0.006 0.002 0.003 0.000 0.003 0.000 0.004 0.000 0.024 0.038 0.000 	
0.025 0.000 0.000 0.007 0.007 0.008 0.004 0.009 0.006 0.002 0.003 0.000 0.003 0.000 0.004 0.000 0.024 0.038 0.000 	
0.024 0.000 0.000 0.007 0.007 0.008 0.004 0.008 0.006 0.002 0.003 0.000 0.003 0.000 0.004 0.000 0.024 0.038 0.000 	
0.024 0.000 0.000 0.007 0.007 0.008 0.004 0.008 0.006 0.002 0.003 0.000 0.003 0.000 0.004 0.000 0.025 0.038 0.000 	
0.024 0.000 0.000 0.007 0.007 0.008 0.004 0.008 0.006 0.002 0.003 0.000 0.003 0.000 0.004 0.000 0.025 0.038 0.000 	
0.024 0.000 0.000 0.007 0.007 0.008 0.004 0.008 0.006 0.002 0.003 0.000 0.003 0.000 0.004 0.000 0.025 0.038 0.000 
>     prob.submap
This is an object of class 'mappoly.map'
    Ploidy level:	 4 
    No. individuals:	 160 
    No. markers:	 20 
    No. linkage phases:	 1 

    ---------------------------------------------
    Number of linkage phase configurations:  1
    ---------------------------------------------
    Linkage phase configuration:  1
       map length:	 14.21
       log-likelihood:	 -373.39
       LOD:		 0
    ~~~~~~~~~~~~~~~~~~
>     plot_map_list(list(dose = submap, prob = prob.submap), 
+                   title = "estimation procedure")
> 
> 
> 
> 
> cleanEx()
> nameEx("est_pairwise_rf")
> ### * est_pairwise_rf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: est_pairwise_rf
> ### Title: Pairwise two-point analysis
> ### Aliases: est_pairwise_rf
> 
> ### ** Examples
> 
>   ## Tetraploid example (first 50 markers) 
>   all.mrk <- make_seq_mappoly(tetra.solcap, 1:50)
>   red.mrk <- elim_redundant(all.mrk)
>   unique.mrks <- make_seq_mappoly(red.mrk)
>   all.pairs <- est_pairwise_rf(input.seq = unique.mrks,
+                                ncpus = 1, 
+                                verbose=TRUE)
INFO: Going singlemode. Using one CPU for calculation.
>    all.pairs
  This is an object of class 'poly.est.two.pts.pairwise'
  -----------------------------------------------------
  No. markers:                             50 
  No. estimated recombination fractions:   940 (76.7%)
  -----------------------------------------------------
>    plot(all.pairs, 20, 21)
>    mat <- rf_list_to_matrix(all.pairs)
INFO: Going singlemode. Using one CPU.
>    plot(mat)
> 
> 
> 
> cleanEx()
> nameEx("est_rf_hmm")
> ### * est_rf_hmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: est_rf_hmm
> ### Title: Multipoint analysis using Hidden Markov Models in autopolyploids
> ### Aliases: est_rf_hmm print.mappoly.map plot.mappoly.map
> 
> ### ** Examples
> 
>     mrk.subset<-make_seq_mappoly(hexafake, 1:10)
>     red.mrk<-elim_redundant(mrk.subset)
>     unique.mrks<-make_seq_mappoly(red.mrk)
>     subset.pairs<-est_pairwise_rf(input.seq = unique.mrks,
+                                   ncpus = 1,
+                                   verbose=TRUE)
INFO: Going singlemode. Using one CPU for calculation.
Also, number of markers is too small to perform parallel computation.
> 
>     ## Estimating subset map with a low tolerance for the E.M. procedure
>     ## for CRAN testing purposes
>     subset.map <- est_rf_hmm(input.seq = unique.mrks,
+                              thres = 2,
+                              twopt = subset.pairs,
+                              verbose = TRUE,
+                              tol = 0.1,
+                              est.given.0.rf = FALSE)

Listing all configurations under threshold 2 using two-point information...
       2 phase(s): . . 
>     subset.map
This is an object of class 'mappoly.map'
    Ploidy level:	 6 
    No. individuals:	 300 
    No. markers:	 9 
    No. linkage phases:	 2 

    ---------------------------------------------
    Number of linkage phase configurations:  2
    ---------------------------------------------
    Linkage phase configuration:  1
       map length:	 0.8
       log-likelihood:	 -733.76
       LOD:		 0
    ~~~~~~~~~~~~~~~~~~
    Linkage phase configuration:  2
       map length:	 6.07
       log-likelihood:	 -983.69
       LOD:		 -250
    ~~~~~~~~~~~~~~~~~~
>     ## linkage phase configuration with highest likelihood
>     plot(subset.map, mrk.names = TRUE, config = "best")
>     ## the second one
>     plot(subset.map, mrk.names = TRUE, config = 2)
> 
> 
> 
> 
> cleanEx()
> nameEx("est_rf_hmm_sequential")
> ### * est_rf_hmm_sequential
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: est_rf_hmm_sequential
> ### Title: Multipoint analysis using Hidden Markov Models: Sequential phase
> ###   elimination
> ### Aliases: est_rf_hmm_sequential
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("est_rf_hmm_single")
> ### * est_rf_hmm_single
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: est_rf_hmm_single
> ### Title: Multipoint analysis using Hidden Markov Models (single phase)
> ### Aliases: est_rf_hmm_single
> ### Keywords: internal
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("export_data_to_polymapR")
> ### * export_data_to_polymapR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: export_data_to_polymapR
> ### Title: Export data to 'polymapR'
> ### Aliases: export_data_to_polymapR
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("export_map_list")
> ### * export_map_list
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: export_map_list
> ### Title: Export a genetic map to a CSV file
> ### Aliases: export_map_list
> 
> ### ** Examples
> 
>  export_map_list(solcap.err.map[[1]], file = "")
"Marker Name","LG","Ref Chrom","Ref Position","Ref Allele","Alt Allele","Map Position","Dosage in P","Dosage in Q","ph.P.a","ph.P.b","ph.P.c","ph.P.d","ph.Q.e","ph.Q.f","ph.Q.g","ph.Q.h"
"solcap_snp_c2_51460",1,"1",  151147,NA,NA,  0.00,2,3,1,1,0,0,1,1,1,0
"solcap_snp_c2_36608",1,"1",  251032,NA,NA,  3.18,3,2,1,0,1,1,1,0,0,1
"solcap_snp_c2_36615",1,"1",  252977,NA,NA,  3.19,3,2,1,0,1,1,1,0,0,1
"solcap_snp_c2_36658",1,"1",  269300,NA,NA,  3.20,2,1,0,0,1,1,0,0,0,1
"solcap_snp_c1_10930",1,"1",  309242,NA,NA,  3.91,2,1,0,0,1,1,0,0,0,1
"solcap_snp_c2_36629",1,"1",  433701,NA,NA,  4.61,2,1,0,0,1,1,0,0,0,1
"solcap_snp_c1_10915",1,"1",  481195,NA,NA,  5.56,2,3,1,1,0,0,1,1,1,0
"solcap_snp_c1_10918",1,"1",  496966,NA,NA,  6.16,1,2,0,1,0,0,0,1,1,0
"solcap_snp_c2_36650",1,"1",  507322,NA,NA,  7.65,1,2,0,1,0,0,0,1,1,0
"solcap_snp_c2_36643",1,"1",  508489,NA,NA,  8.70,2,2,0,0,1,1,1,0,0,1
"solcap_snp_c2_36660",1,"1",  534726,NA,NA,  9.10,2,3,1,1,0,0,1,1,1,0
"solcap_snp_c2_36664",1,"1",  535354,NA,NA,  9.39,3,3,0,1,1,1,0,1,1,1
"solcap_snp_c2_36686",1,"1",  601257,NA,NA,  9.40,3,4,0,1,1,1,1,1,1,1
"solcap_snp_c2_54803",1,"1",  811809,NA,NA,  9.92,1,1,1,0,0,0,1,0,0,0
"solcap_snp_c2_54800",1,"1",  813297,NA,NA,  9.93,1,1,1,0,0,0,1,0,0,0
"solcap_snp_c2_54797",1,"1",  817305,NA,NA, 10.42,3,2,1,0,1,1,1,0,0,1
"solcap_snp_c2_56714",1,"1",  931273,NA,NA, 10.57,3,4,0,1,1,1,1,1,1,1
"solcap_snp_c2_6865",1,"1", 1513756,NA,NA, 12.86,0,1,0,0,0,0,0,0,0,1
"solcap_snp_c2_6683",1,"1", 1828357,NA,NA, 15.27,2,2,0,1,1,0,0,1,1,0
"solcap_snp_c1_2417",1,"1", 1838764,NA,NA, 15.28,2,2,0,1,1,0,0,1,1,0
"solcap_snp_c2_6713",1,"1", 2068205,NA,NA, 15.54,2,2,0,1,1,0,0,1,1,0
"solcap_snp_c2_21098",1,"1", 2589396,NA,NA, 17.75,2,2,0,1,1,0,0,1,1,0
"solcap_snp_c2_21100",1,"1", 2591241,NA,NA, 19.12,2,2,0,1,1,0,0,1,1,0
"solcap_snp_c2_21233",1,"1", 2956217,NA,NA, 20.86,2,1,0,1,0,1,0,1,0,0
"solcap_snp_c1_6704",1,"1", 2957498,NA,NA, 21.42,1,2,0,0,1,0,0,1,1,0
"solcap_snp_c2_21236",1,"1", 2958510,NA,NA, 21.99,3,2,0,1,1,1,0,1,1,0
"solcap_snp_c1_6123",1,"1", 3296081,NA,NA, 25.74,2,2,1,0,1,0,0,1,1,0
"solcap_snp_c1_6114",1,"1", 3693321,NA,NA, 25.89,1,0,0,0,1,0,0,0,0,0
"solcap_snp_c1_6109",1,"1", 3716835,NA,NA, 26.48,3,4,1,1,0,1,1,1,1,1
"solcap_snp_c2_51791",1,"1", 4309511,NA,NA, 32.08,0,1,0,0,0,0,0,0,0,1
"solcap_snp_c2_49938",1,"1", 4597936,NA,NA, 32.09,3,4,1,1,1,0,1,1,1,1
"solcap_snp_c2_56125",1,"1", 5291666,NA,NA, 34.48,2,0,0,1,1,0,0,0,0,0
"solcap_snp_c2_45058",1,"1", 5347412,NA,NA, 34.98,3,4,1,0,1,1,1,1,1,1
"solcap_snp_c2_45071",1,"1", 5386765,NA,NA, 36.16,3,1,1,1,0,1,1,0,0,0
"solcap_snp_c2_45064",1,"1", 5502148,NA,NA, 36.61,2,0,0,1,1,0,0,0,0,0
"solcap_snp_c1_13289",1,"1", 5504921,NA,NA, 36.62,2,3,1,0,0,1,0,1,1,1
"solcap_snp_c1_13293",1,"1", 5505413,NA,NA, 36.63,1,0,0,0,0,1,0,0,0,0
"solcap_snp_c2_27877",1,"1", 6071274,NA,NA, 38.62,3,4,1,1,1,0,1,1,1,1
"solcap_snp_c2_27878",1,"1", 6071298,NA,NA, 38.63,1,1,0,0,0,1,1,0,0,0
"solcap_snp_c2_27882",1,"1", 6071676,NA,NA, 38.65,3,1,0,1,1,1,1,0,0,0
"solcap_snp_c2_27884",1,"1", 6071778,NA,NA, 38.66,3,1,0,1,1,1,1,0,0,0
"solcap_snp_c2_27885",1,"1", 6071817,NA,NA, 39.03,0,3,0,0,0,0,0,1,1,1
"solcap_snp_c2_27903",1,"1", 6295642,NA,NA, 40.04,2,3,0,1,0,1,0,1,1,1
"solcap_snp_c2_27918",1,"1", 6587772,NA,NA, 40.46,2,0,0,1,0,1,0,0,0,0
"solcap_snp_c2_48155",1,"1", 7165330,NA,NA, 41.90,2,0,1,0,1,0,0,0,0,0
"solcap_snp_c2_48154",1,"1", 7165840,NA,NA, 42.24,2,3,0,1,0,1,0,1,1,1
"solcap_snp_c2_50011",1,"1", 7446981,NA,NA, 42.25,2,3,1,0,1,0,0,1,1,1
"solcap_snp_c1_16312",1,"1", 7641280,NA,NA, 43.65,2,0,0,1,0,1,0,0,0,0
"solcap_snp_c2_52709",1,"1", 8645609,NA,NA, 44.57,2,0,0,1,0,1,0,0,0,0
"solcap_snp_c2_52712",1,"1", 8645693,NA,NA, 44.58,2,0,0,1,0,1,0,0,0,0
"solcap_snp_c2_52705",1,"1", 8653609,NA,NA, 45.06,2,1,0,1,0,1,0,1,0,0
"solcap_snp_c2_48549",1,"1",10570936,NA,NA, 52.46,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c2_48563",1,"1",10573573,NA,NA, 52.47,4,3,1,1,1,1,0,1,1,1
"solcap_snp_c2_55639",1,"1",11235975,NA,NA, 52.48,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c2_56356",1,"1",11737675,NA,NA, 52.49,0,1,0,0,0,0,0,0,1,0
"solcap_snp_c2_56359",1,"1",11742617,NA,NA, 52.73,4,3,1,1,1,1,1,1,0,1
"solcap_snp_c2_57284",1,"1",11774518,NA,NA, 53.10,4,3,1,1,1,1,0,1,1,1
"solcap_snp_c2_45637",1,"1",12022263,NA,NA, 53.47,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c2_55008",1,"1",12994177,NA,NA, 57.63,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c2_53521",1,"1",13266849,NA,NA, 57.64,2,2,0,1,0,1,0,0,1,1
"solcap_snp_c2_43984",1,"1",13369857,NA,NA, 57.65,1,0,0,0,0,1,0,0,0,0
"solcap_snp_c1_12938",1,"1",13392343,NA,NA, 58.28,2,1,1,0,1,0,0,1,0,0
"solcap_snp_c2_43970",1,"1",13545289,NA,NA, 59.54,1,1,0,1,0,0,0,0,1,0
"solcap_snp_c2_43973",1,"1",13547044,NA,NA, 60.01,3,2,1,1,1,0,0,1,1,0
"solcap_snp_c1_8908",1,"1",13656016,NA,NA, 60.83,2,1,1,0,1,0,0,1,0,0
"solcap_snp_c2_54355",1,"1",13740719,NA,NA, 63.89,2,2,1,0,1,0,0,1,0,1
"solcap_snp_c2_54353",1,"1",13747285,NA,NA, 66.12,0,1,0,0,0,0,0,0,0,1
"solcap_snp_c2_49867",1,"1",16399117,NA,NA, 66.13,2,0,0,1,0,1,0,0,0,0
"solcap_snp_c2_48568",1,"1",17370536,NA,NA, 66.14,0,3,0,0,0,0,1,0,1,1
"solcap_snp_c1_8593",1,"1",17664021,NA,NA, 66.15,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c2_53759",1,"1",18753871,NA,NA, 66.16,0,1,0,0,0,0,0,0,0,1
"solcap_snp_c2_56842",1,"1",18925684,NA,NA, 66.17,4,3,1,1,1,1,0,1,1,1
"solcap_snp_c1_16421",1,"1",18926984,NA,NA, 66.52,0,2,0,0,0,0,0,0,1,1
"solcap_snp_c1_14663",1,"1",19664067,NA,NA, 66.64,4,3,1,1,1,1,1,0,1,1
"solcap_snp_c2_49326",1,"1",20549734,NA,NA, 68.21,0,2,0,0,0,0,1,0,1,0
"solcap_snp_c1_5477",1,"1",23657080,NA,NA, 68.22,0,2,0,0,0,0,1,0,1,0
"solcap_snp_c2_43643",1,"1",29180891,NA,NA, 69.26,4,3,1,1,1,1,0,1,1,1
"solcap_snp_c2_22549",1,"1",29678234,NA,NA, 69.27,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c2_22546",1,"1",29679750,NA,NA, 69.28,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c1_7136",1,"1",30125081,NA,NA, 69.61,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c1_11066",1,"1",32091982,NA,NA, 69.94,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c1_9378",1,"1",34098178,NA,NA, 70.08,0,1,0,0,0,0,0,0,0,1
"solcap_snp_c2_27683",1,"1",37067385,NA,NA, 70.26,4,3,1,1,1,1,0,1,1,1
"solcap_snp_c2_27677",1,"1",37071329,NA,NA, 70.57,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c2_42829",1,"1",38478335,NA,NA, 71.00,2,0,0,1,0,1,0,0,0,0
"solcap_snp_c1_15714",1,"1",39325633,NA,NA, 71.41,0,3,0,0,0,0,1,0,1,1
"solcap_snp_c2_45395",1,"1",39529256,NA,NA, 71.76,4,3,1,1,1,1,1,1,0,1
"solcap_snp_c2_49732",1,"1",41859322,NA,NA, 73.63,0,1,0,0,0,0,0,0,0,1
"solcap_snp_c1_14648",1,"1",41947283,NA,NA, 73.92,4,1,1,1,1,1,0,1,0,0
"solcap_snp_c1_14654",1,"1",41979022,NA,NA, 73.94,4,1,1,1,1,1,0,1,0,0
"solcap_snp_c2_32111",1,"1",42197632,NA,NA, 73.95,2,0,0,1,0,1,0,0,0,0
"solcap_snp_c2_32112",1,"1",42197668,NA,NA, 75.00,2,1,1,0,1,0,0,1,0,0
"solcap_snp_c2_50028",1,"1",43180567,NA,NA, 76.65,2,1,1,0,1,0,0,1,0,0
"solcap_snp_c2_50023",1,"1",43196126,NA,NA, 76.76,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c2_49042",1,"1",43330828,NA,NA, 78.72,2,0,0,1,0,1,0,0,0,0
"solcap_snp_c1_16169",1,"1",44194024,NA,NA, 81.80,4,2,1,1,1,1,0,1,0,1
"solcap_snp_c1_14248",1,"1",44696488,NA,NA, 81.81,2,1,1,0,1,0,0,1,0,0
"solcap_snp_c1_14249",1,"1",44696500,NA,NA, 82.31,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c1_14259",1,"1",44700858,NA,NA, 82.32,2,0,0,1,0,1,0,0,0,0
"solcap_snp_c1_14261",1,"1",44702300,NA,NA, 82.33,4,2,1,1,1,1,0,1,0,1
"solcap_snp_c2_53708",1,"1",44890351,NA,NA, 82.99,0,2,0,0,0,0,0,0,1,1
"solcap_snp_c2_40131",1,"1",45751390,NA,NA, 83.00,0,2,0,0,0,0,1,0,1,0
"solcap_snp_c2_54811",1,"1",46271054,NA,NA, 83.01,4,2,1,1,1,1,0,1,0,1
"solcap_snp_c1_15855",1,"1",46323471,NA,NA, 83.02,2,0,0,1,0,1,0,0,0,0
"solcap_snp_c2_35220",1,"1",47299682,NA,NA, 83.03,0,3,0,0,0,0,1,0,1,1
"solcap_snp_c2_35218",1,"1",47300005,NA,NA, 83.04,0,3,0,0,0,0,1,0,1,1
"solcap_snp_c2_35601",1,"1",50791085,NA,NA, 85.07,0,1,0,0,0,0,0,1,0,0
"solcap_snp_c2_694",1,"1",51290105,NA,NA, 85.42,2,0,0,1,0,1,0,0,0,0
"solcap_snp_c2_686",1,"1",51324458,NA,NA, 85.70,4,2,1,1,1,1,0,1,0,1
"solcap_snp_c2_57898",1,"1",51736618,NA,NA, 85.71,0,1,0,0,0,0,0,0,0,1
"solcap_snp_c1_880",1,"1",54480981,NA,NA, 86.08,4,3,1,1,1,1,1,1,1,0
"solcap_snp_c2_55113",1,"1",54580381,NA,NA, 86.09,2,0,0,1,0,1,0,0,0,0
"solcap_snp_c2_2874",1,"1",55163851,NA,NA, 86.10,2,0,0,1,0,1,0,0,0,0
"solcap_snp_c2_55621",1,"1",55427211,NA,NA, 86.11,2,0,0,1,0,1,0,0,0,0
"solcap_snp_c2_55618",1,"1",55427602,NA,NA, 86.15,0,2,0,0,0,0,1,0,1,0
"solcap_snp_c1_14633",1,"1",57931788,NA,NA, 91.26,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c2_2721",1,"1",58197548,NA,NA, 91.27,1,1,0,0,0,1,1,0,0,0
"solcap_snp_c2_2653",1,"1",58737622,NA,NA, 92.91,0,2,0,0,0,0,1,0,1,0
"solcap_snp_c2_2591",1,"1",58985511,NA,NA, 93.63,1,0,0,0,0,1,0,0,0,0
"solcap_snp_c1_13430",1,"1",59363361,NA,NA, 94.96,1,3,0,1,0,0,1,0,1,1
"solcap_snp_c2_46523",1,"1",59973949,NA,NA, 95.71,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c2_46521",1,"1",59974282,NA,NA, 95.72,2,3,1,0,1,0,1,1,1,0
"solcap_snp_c2_46520",1,"1",59974316,NA,NA, 95.73,4,3,1,1,1,1,0,1,1,1
"solcap_snp_c2_53347",1,"1",60026944,NA,NA, 96.42,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c2_35511",1,"1",60433785,NA,NA, 96.43,4,3,1,1,1,1,0,1,1,1
"solcap_snp_c2_35518",1,"1",60512480,NA,NA, 96.44,4,3,1,1,1,1,0,1,1,1
"solcap_snp_c2_35520",1,"1",60513199,NA,NA, 96.45,4,3,1,1,1,1,0,1,1,1
"solcap_snp_c2_35536",1,"1",60515867,NA,NA, 97.83,1,2,1,0,0,0,0,1,1,0
"solcap_snp_c2_35537",1,"1",60516874,NA,NA, 97.84,1,2,1,0,0,0,0,1,1,0
"solcap_snp_c2_43926",1,"1",60887837,NA,NA, 98.15,2,2,0,1,0,1,1,0,0,1
"solcap_snp_c2_56267",1,"1",60919490,NA,NA, 98.96,3,2,1,1,1,0,0,1,1,0
"solcap_snp_c2_20798",1,"1",60951573,NA,NA, 98.97,2,2,1,1,0,0,0,1,1,0
"solcap_snp_c2_20799",1,"1",60951606,NA,NA, 99.17,2,2,0,0,1,1,1,0,0,1
"solcap_snp_c2_20803",1,"1",60987155,NA,NA, 99.41,1,2,0,0,0,1,1,0,0,1
"solcap_snp_c2_20890",1,"1",61310805,NA,NA,101.00,3,3,1,1,1,0,1,1,1,0
"solcap_snp_c2_50903",1,"1",61774492,NA,NA,101.62,0,2,0,0,0,0,1,0,0,1
"solcap_snp_c2_38428",1,"1",62058660,NA,NA,102.63,1,1,0,0,0,1,0,0,0,1
"solcap_snp_c2_38406",1,"1",62144916,NA,NA,103.04,3,4,1,1,1,0,1,1,1,1
"solcap_snp_c2_38404",1,"1",62148178,NA,NA,103.05,3,2,1,1,1,0,0,1,1,0
"solcap_snp_c2_38448",1,"1",62289476,NA,NA,104.60,1,0,0,0,0,1,0,0,0,0
"solcap_snp_c1_12106",1,"1",62802674,NA,NA,106.16,1,3,0,0,0,1,1,0,1,1
"solcap_snp_c2_41337",1,"1",62930793,NA,NA,106.72,1,3,0,0,0,1,1,0,1,1
"solcap_snp_c2_32359",1,"1",63208419,NA,NA,108.66,0,2,0,0,0,0,0,0,1,1
"solcap_snp_c1_9679",1,"1",63338027,NA,NA,110.04,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c1_12057",1,"1",63596472,NA,NA,110.98,4,2,1,1,1,1,1,1,0,0
"solcap_snp_c1_13686",1,"1",64120988,NA,NA,112.96,2,3,0,0,1,1,1,0,1,1
"solcap_snp_c2_46195",1,"1",64259858,NA,NA,113.59,2,2,0,0,1,1,0,0,1,1
"solcap_snp_c2_13751",1,"1",64614114,NA,NA,113.67,1,0,0,0,0,1,0,0,0,0
"solcap_snp_c1_4415",1,"1",65036984,NA,NA,116.62,1,2,0,0,1,0,0,0,1,1
"solcap_snp_c2_13675",1,"1",65036993,NA,NA,116.76,1,0,0,1,0,0,0,0,0,0
"solcap_snp_c2_13676",1,"1",65054301,NA,NA,116.81,3,4,1,0,1,1,1,1,1,1
"solcap_snp_c2_13671",1,"1",65062849,NA,NA,116.86,2,2,1,1,0,0,1,1,0,0
"solcap_snp_c2_13653",1,"1",65270150,NA,NA,117.26,2,2,1,1,0,0,1,1,0,0
"solcap_snp_c2_13650",1,"1",65277543,NA,NA,117.27,1,0,0,1,0,0,0,0,0,0
"solcap_snp_c1_4744",1,"1",65472678,NA,NA,118.05,1,0,0,1,0,0,0,0,0,0
"solcap_snp_c2_14467",1,"1",65694581,NA,NA,118.72,1,2,0,0,0,1,0,0,1,1
"solcap_snp_c2_14470",1,"1",65697018,NA,NA,118.73,2,4,1,0,0,1,1,1,1,1
"solcap_snp_c1_4706",1,"1",65780052,NA,NA,119.49,1,2,0,0,0,1,0,0,1,1
"solcap_snp_c2_14487",1,"1",65780861,NA,NA,119.50,1,2,0,0,0,1,0,0,1,1
"solcap_snp_c2_14489",1,"1",65781907,NA,NA,119.52,1,2,0,0,0,1,0,0,1,1
"solcap_snp_c2_14491",1,"1",65782311,NA,NA,119.65,2,0,0,1,1,0,0,0,0,0
"solcap_snp_c2_14492",1,"1",65782372,NA,NA,119.68,2,0,0,1,1,0,0,0,0,0
"solcap_snp_c2_14493",1,"1",65782860,NA,NA,120.12,1,2,0,0,0,1,0,0,1,1
"solcap_snp_c1_4745",1,"1",66094082,NA,NA,123.00,2,2,1,0,0,1,1,1,0,0
"solcap_snp_c1_4748",1,"1",66259325,NA,NA,123.01,2,0,1,0,0,1,0,0,0,0
"solcap_snp_c2_14589",1,"1",66283156,NA,NA,123.16,4,3,1,1,1,1,0,1,1,1
"solcap_snp_c2_37564",1,"1",66307265,NA,NA,123.27,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c2_14595",1,"1",66307870,NA,NA,123.53,2,0,1,0,0,1,0,0,0,0
"solcap_snp_c2_37566",1,"1",66307870,NA,NA,123.54,2,0,1,0,0,1,0,0,0,0
"solcap_snp_c1_4752",1,"1",66336597,NA,NA,124.09,2,0,1,0,0,1,0,0,0,0
"solcap_snp_c2_14608",1,"1",66349497,NA,NA,124.36,2,0,0,1,1,0,0,0,0,0
"solcap_snp_c1_4757",1,"1",66354237,NA,NA,124.72,1,0,0,0,0,1,0,0,0,0
"solcap_snp_c1_4763",1,"1",66376115,NA,NA,124.73,4,2,1,1,1,1,0,0,1,1
"solcap_snp_c1_5150",1,"1",66675718,NA,NA,127.51,2,0,1,0,0,1,0,0,0,0
"solcap_snp_c2_58099",1,"1",66845540,NA,NA,127.60,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c1_5145",1,"1",66904071,NA,NA,127.61,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c2_20569",1,"1",67013419,NA,NA,132.21,3,1,1,1,1,0,0,0,1,0
"solcap_snp_c2_20501",1,"1",67211402,NA,NA,136.23,3,3,0,1,1,1,0,1,1,1
"solcap_snp_c2_20502",1,"1",67221811,NA,NA,136.90,1,2,1,0,0,0,1,1,0,0
"solcap_snp_c2_20505",1,"1",67223365,NA,NA,137.96,3,2,0,1,1,1,0,0,1,1
"solcap_snp_c2_20506",1,"1",67223618,NA,NA,139.22,3,3,0,1,1,1,1,0,1,1
"solcap_snp_c2_20508",1,"1",67224636,NA,NA,139.54,0,1,0,0,0,0,1,0,0,0
"solcap_snp_c2_20513",1,"1",67277917,NA,NA,140.14,2,0,0,1,1,0,0,0,0,0
"solcap_snp_c2_20521",1,"1",67293276,NA,NA,140.72,3,2,1,1,1,0,1,1,0,0
"solcap_snp_c2_20522",1,"1",67294203,NA,NA,141.18,2,0,0,1,1,0,0,0,0,0
"solcap_snp_c1_6501",1,"1",67459562,NA,NA,142.14,1,0,0,0,1,0,0,0,0,0
"solcap_snp_c1_6518",1,"1",67605601,NA,NA,142.15,2,2,0,1,0,1,0,0,1,1
"solcap_snp_c2_13766",1,"1",67896690,NA,NA,142.16,4,3,1,1,1,1,1,0,1,1
"solcap_snp_c2_52492",1,"1",67969508,NA,NA,143.29,3,2,1,1,0,1,0,0,1,1
"solcap_snp_c2_52484",1,"1",68069976,NA,NA,143.93,1,2,0,0,1,0,1,1,0,0
"solcap_snp_c2_49451",1,"1",68416146,NA,NA,145.11,0,1,0,0,0,0,0,1,0,0
"solcap_snp_c1_14044",1,"1",68529607,NA,NA,146.48,4,3,1,1,1,1,1,0,1,1
"solcap_snp_c2_51055",1,"1",68950490,NA,NA,147.55,0,2,0,0,0,0,1,1,0,0
"solcap_snp_c1_11769",1,"1",69200071,NA,NA,148.40,2,2,0,1,0,1,1,1,0,0
"solcap_snp_c2_39834",1,"1",69381232,NA,NA,149.04,2,2,1,0,1,0,0,0,1,1
"solcap_snp_c2_17592",1,"1",69809943,NA,NA,150.09,2,0,0,1,0,1,0,0,0,0
"solcap_snp_c2_17529",1,"1",69902111,NA,NA,150.10,2,2,0,1,0,1,1,1,0,0
"solcap_snp_c2_17531",1,"1",70016341,NA,NA,150.94,2,2,1,0,1,0,0,0,1,1
"solcap_snp_c2_17537",1,"1",70097616,NA,NA,150.95,2,2,1,0,1,0,0,0,1,1
"solcap_snp_c1_15579",1,"1",70341165,NA,NA,151.51,1,2,0,0,1,0,0,0,1,1
"solcap_snp_c1_15580",1,"1",70341195,NA,NA,151.74,1,2,0,0,1,0,0,0,1,1
"solcap_snp_c2_53380",1,"1",70371798,NA,NA,152.39,3,2,0,1,1,1,0,0,1,1
"solcap_snp_c2_53381",1,"1",70372029,NA,NA,153.11,1,2,1,0,0,0,1,1,0,0
"solcap_snp_c2_17191",1,"1",70474751,NA,NA,154.44,2,0,0,1,0,1,0,0,0,0
"solcap_snp_c1_5657",1,"1",70560319,NA,NA,155.07,3,4,1,1,1,0,1,1,1,1
"solcap_snp_c1_5656",1,"1",70562884,NA,NA,155.08,1,0,0,0,0,1,0,0,0,0
"solcap_snp_c1_5653",1,"1",70697401,NA,NA,155.09,1,0,0,0,0,1,0,0,0,0
"solcap_snp_c1_3860",1,"1",71009488,NA,NA,155.27,2,2,0,1,0,1,1,1,0,0
"solcap_snp_c1_3863",1,"1",71009686,NA,NA,156.05,2,2,1,0,1,0,0,0,1,1
"solcap_snp_c2_12076",1,"1",71090664,NA,NA,156.62,1,2,0,1,0,0,1,1,0,0
"solcap_snp_c1_3867",1,"1",71239298,NA,NA,157.47,1,2,0,1,0,0,1,1,0,0
"solcap_snp_c1_3868",1,"1",71239559,NA,NA,157.68,3,2,1,0,1,1,0,0,1,1
"solcap_snp_c1_3876",1,"1",71278255,NA,NA,158.11,1,2,0,1,0,0,1,1,0,0
"solcap_snp_c2_12106",1,"1",71298195,NA,NA,158.32,3,2,1,0,1,1,0,0,1,1
"solcap_snp_c1_3894",1,"1",71421320,NA,NA,158.74,1,2,0,1,0,0,1,1,0,0
"solcap_snp_c2_12126",1,"1",71450592,NA,NA,159.36,2,2,0,1,0,1,1,1,0,0
"solcap_snp_c2_12216",1,"1",72051429,NA,NA,160.92,2,0,1,1,0,0,0,0,0,0
"solcap_snp_c2_12217",1,"1",72051456,NA,NA,160.93,1,0,1,0,0,0,0,0,0,0
"solcap_snp_c1_3848",1,"1",72108418,NA,NA,160.94,3,4,0,1,1,1,1,1,1,1
"solcap_snp_c1_3851",1,"1",72112064,NA,NA,160.95,1,0,1,0,0,0,0,0,0,0
"solcap_snp_c1_9565",1,"1",72320561,NA,NA,162.26,3,4,0,1,1,1,1,1,1,1
"solcap_snp_c1_9566",1,"1",72320582,NA,NA,162.27,1,0,1,0,0,0,0,0,0,0
"solcap_snp_c1_9573",1,"1",72504567,NA,NA,162.28,2,2,0,1,1,0,0,0,1,1
"solcap_snp_c2_31820",1,"1",72528671,NA,NA,163.54,1,0,1,0,0,0,0,0,0,0
"solcap_snp_c2_31821",1,"1",72531263,NA,NA,163.55,1,0,0,0,0,1,0,0,0,0
"solcap_snp_c1_9583",1,"1",72540600,NA,NA,163.56,1,2,1,0,0,0,1,1,0,0
"solcap_snp_c1_9587",1,"1",72541075,NA,NA,163.57,1,0,1,0,0,0,0,0,0,0
"solcap_snp_c2_14274",1,"1",74061621,NA,NA,166.56,3,4,1,0,1,1,1,1,1,1
"solcap_snp_c1_4617",1,"1",74355434,NA,NA,168.03,0,2,0,0,0,0,1,1,0,0
"solcap_snp_c2_14365",1,"1",74688262,NA,NA,168.05,2,0,1,0,0,1,0,0,0,0
"solcap_snp_c2_14366",1,"1",74688318,NA,NA,168.50,1,2,0,0,1,0,0,0,1,1
"solcap_snp_c1_14931",1,"1",75007319,NA,NA,168.51,4,2,1,1,1,1,0,0,1,1
"solcap_snp_c2_16369",1,"1",75164058,NA,NA,169.77,0,2,0,0,0,0,1,1,0,0
"solcap_snp_c1_5267",1,"1",75333553,NA,NA,170.13,2,0,1,0,0,1,0,0,0,0
"solcap_snp_c1_5281",1,"1",75441912,NA,NA,170.14,2,0,1,0,0,1,0,0,0,0
"solcap_snp_c1_5286",1,"1",75477570,NA,NA,170.95,3,4,1,1,0,1,1,1,1,1
"solcap_snp_c2_16424",1,"1",75478258,NA,NA,171.42,2,0,1,0,0,1,0,0,0,0
"solcap_snp_c2_16425",1,"1",75485276,NA,NA,171.71,2,0,1,0,0,1,0,0,0,0
"solcap_snp_c2_16466",1,"1",75749019,NA,NA,171.72,2,4,0,1,1,0,1,1,1,1
"solcap_snp_c1_5346",1,"1",75789912,NA,NA,172.10,1,0,0,0,1,0,0,0,0,0
"solcap_snp_c1_16435",1,"1",76304406,NA,NA,172.57,1,0,0,0,1,0,0,0,0,0
"solcap_snp_c2_2509",1,"1",76406745,NA,NA,172.58,4,2,1,1,1,1,0,0,1,1
"solcap_snp_c2_2291",1,"1",76480645,NA,NA,173.86,1,2,0,1,0,0,0,0,1,1
"solcap_snp_c1_641",1,"1",76511147,NA,NA,173.87,2,0,1,0,0,1,0,0,0,0
"solcap_snp_c2_2420",1,"1",76953005,NA,NA,174.97,3,2,1,0,1,1,1,1,0,0
"solcap_snp_c2_2423",1,"1",76958677,NA,NA,175.29,2,3,0,1,1,0,0,1,1,1
"solcap_snp_c2_2424",1,"1",76960116,NA,NA,177.14,0,1,0,0,0,0,0,1,0,0
"solcap_snp_c2_2427",1,"1",76960344,NA,NA,177.50,1,0,0,0,1,0,0,0,0,0
"solcap_snp_c2_2450",1,"1",77056087,NA,NA,177.93,2,2,0,1,1,0,1,1,0,0
"solcap_snp_c2_2463",1,"1",77190863,NA,NA,178.90,2,2,0,1,1,0,1,1,0,0
"solcap_snp_c2_2464",1,"1",77190891,NA,NA,178.91,2,2,0,1,1,0,1,1,0,0
"solcap_snp_c2_2466",1,"1",77191250,NA,NA,179.13,2,2,0,1,1,0,1,1,0,0
"solcap_snp_c2_2505",1,"1",77350779,NA,NA,179.60,0,1,0,0,0,0,0,1,0,0
"solcap_snp_c2_2508",1,"1",77353050,NA,NA,180.11,2,2,0,1,1,0,1,1,0,0
"solcap_snp_c1_758",1,"1",77526728,NA,NA,180.47,1,1,0,0,1,0,0,1,0,0
"solcap_snp_c2_2201",1,"1",77738922,NA,NA,180.81,2,2,0,1,1,0,1,1,0,0
"solcap_snp_c1_601",1,"1",78168030,NA,NA,182.54,3,4,0,1,1,1,1,1,1,1
"solcap_snp_c1_607",1,"1",78176086,NA,NA,182.55,2,2,0,1,1,0,1,1,0,0
"solcap_snp_c2_2299",1,"1",78192398,NA,NA,183.01,2,2,1,0,0,1,0,0,1,1
"solcap_snp_c2_2354",1,"1",78430745,NA,NA,183.71,2,2,1,0,0,1,0,0,1,1
"solcap_snp_c2_50486",1,"1",78756800,NA,NA,184.17,2,2,0,1,1,0,1,1,0,0
"solcap_snp_c2_50484",1,"1",78757017,NA,NA,184.40,2,2,0,1,1,0,1,1,0,0
"solcap_snp_c2_50483",1,"1",78757327,NA,NA,184.64,2,2,0,1,1,0,1,1,0,0
"solcap_snp_c2_50502",1,"1",78809381,NA,NA,184.88,2,2,1,0,0,1,0,0,1,1
"solcap_snp_c1_15872",1,"1",78928170,NA,NA,185.37,2,2,0,1,1,0,1,1,0,0
"solcap_snp_c2_7007",1,"1",79083850,NA,NA,189.56,2,2,1,0,1,0,0,1,1,0
"solcap_snp_c1_2484",1,"1",79157311,NA,NA,193.43,3,4,1,1,1,0,1,1,1,1
"solcap_snp_c2_7094",1,"1",79187093,NA,NA,193.45,1,0,1,0,0,0,0,0,0,0
"solcap_snp_c2_7193",1,"1",79391798,NA,NA,193.92,1,0,1,0,0,0,0,0,0,0
"solcap_snp_c2_7208",1,"1",79456001,NA,NA,197.01,3,2,1,1,1,0,1,1,0,0
"solcap_snp_c1_2519",1,"1",79487369,NA,NA,197.02,1,1,0,1,0,0,1,0,0,0
"solcap_snp_c1_2520",1,"1",79487485,NA,NA,197.32,1,1,0,0,1,0,0,1,0,0
"solcap_snp_c2_7241",1,"1",79678600,NA,NA,197.51,3,3,1,1,0,1,1,0,1,1
"solcap_snp_c2_7242",1,"1",79679061,NA,NA,197.53,3,2,1,1,1,0,1,1,0,0
"solcap_snp_c2_7245",1,"1",79679433,NA,NA,197.87,1,1,0,0,1,0,0,1,0,0
"solcap_snp_c2_7246",1,"1",79679919,NA,NA,198.23,1,1,0,0,1,0,0,1,0,0
"solcap_snp_c1_2531",1,"1",79711129,NA,NA,198.24,1,2,0,0,0,1,0,0,1,1
"solcap_snp_c2_7328",1,"1",79955769,NA,NA,199.85,4,3,1,1,1,1,1,0,1,1
"solcap_snp_c2_6990",1,"1",80077222,NA,NA,200.77,2,3,1,0,0,1,0,1,1,1
"solcap_snp_c1_2458",1,"1",80121157,NA,NA,200.84,2,2,1,0,0,1,0,0,1,1
"solcap_snp_c2_7053",1,"1",80228512,NA,NA,201.91,2,2,0,0,1,1,0,0,1,1
"solcap_snp_c2_7055",1,"1",80229751,NA,NA,203.03,2,2,0,0,1,1,0,0,1,1
"solcap_snp_c2_7056",1,"1",80229823,NA,NA,203.52,4,3,1,1,1,1,1,0,1,1
"solcap_snp_c2_7061",1,"1",80230621,NA,NA,204.84,2,2,0,0,1,1,0,0,1,1
"solcap_snp_c2_7062",1,"1",80230636,NA,NA,204.85,2,2,1,1,0,0,1,1,0,0
"solcap_snp_c1_1853",1,"1",80429124,NA,NA,205.13,1,2,0,0,0,1,0,0,1,1
"solcap_snp_c2_5091",1,"1",80558977,NA,NA,206.04,2,2,0,1,1,0,1,1,0,0
"solcap_snp_c2_5077",1,"1",80591992,NA,NA,207.60,1,1,1,0,0,0,0,1,0,0
"solcap_snp_c2_5078",1,"1",80592039,NA,NA,207.92,1,1,0,0,1,0,0,1,0,0
"solcap_snp_c2_5039",1,"1",80669402,NA,NA,208.99,4,3,1,1,1,1,1,0,1,1
"solcap_snp_c2_9727",1,"1",80833354,NA,NA,209.00,0,1,0,0,0,0,0,1,0,0
"solcap_snp_c2_9726",1,"1",80833555,NA,NA,209.19,2,2,0,1,0,1,1,1,0,0
"solcap_snp_c2_9722",1,"1",80835882,NA,NA,209.81,2,2,1,0,1,0,0,0,1,1
"solcap_snp_c2_9988",1,"1",81013079,NA,NA,211.70,4,3,1,1,1,1,1,0,1,1
"solcap_snp_c2_9925",1,"1",81410356,NA,NA,212.47,3,4,1,1,0,1,1,1,1,1
"solcap_snp_c2_9892",1,"1",81567397,NA,NA,215.74,3,4,1,1,1,0,1,1,1,1
"solcap_snp_c2_9864",1,"1",81615881,NA,NA,215.75,3,3,0,1,1,1,0,1,1,1
"solcap_snp_c1_3275",1,"1",81750527,NA,NA,217.13,0,2,0,0,0,0,0,0,1,1
"solcap_snp_c1_3255",1,"1",81795335,NA,NA,217.76,1,1,1,0,0,0,1,0,0,0
"solcap_snp_c1_3241",1,"1",81924813,NA,NA,218.83,1,0,1,0,0,0,0,0,0,0
"solcap_snp_c1_3234",1,"1",81927346,NA,NA,219.41,4,2,1,1,1,1,1,1,0,0
"solcap_snp_c2_47360",1,"1",82220028,NA,NA,221.69,3,4,1,1,1,0,1,1,1,1
"solcap_snp_c2_4896",1,"1",82628961,NA,NA,222.92,1,2,0,0,0,1,0,0,1,1
"solcap_snp_c2_4799",1,"1",82927941,NA,NA,223.23,1,2,0,0,0,1,0,0,1,1
"solcap_snp_c1_1638",1,"1",82935846,NA,NA,223.24,1,2,0,0,0,1,0,0,1,1
"solcap_snp_c1_1653",1,"1",83012188,NA,NA,224.79,1,1,0,1,0,0,1,0,0,0
"solcap_snp_c1_1683",1,"1",83059366,NA,NA,226.75,2,0,1,0,1,0,0,0,0,0
"solcap_snp_c2_4844",1,"1",83060466,NA,NA,227.62,1,1,0,1,0,0,1,0,0,0
"solcap_snp_c2_4845",1,"1",83060720,NA,NA,229.49,2,0,1,0,1,0,0,0,0,0
"solcap_snp_c2_4860",1,"1",83130390,NA,NA,229.78,0,2,0,0,0,0,0,0,1,1
"solcap_snp_c2_4864",1,"1",83138355,NA,NA,229.88,2,4,0,1,0,1,1,1,1,1
"solcap_snp_c2_4875",1,"1",83177618,NA,NA,231.81,3,1,1,1,1,0,1,0,0,0
"solcap_snp_c2_4884",1,"1",83186994,NA,NA,232.61,3,2,1,1,1,0,1,1,0,0
"solcap_snp_c2_4885",1,"1",83187000,NA,NA,232.85,3,2,1,1,1,0,1,1,0,0
"solcap_snp_c2_4898",1,"1",83283573,NA,NA,232.86,3,4,1,1,1,0,1,1,1,1
"solcap_snp_c2_4904",1,"1",83416355,NA,NA,234.24,2,0,1,0,1,0,0,0,0,0
"solcap_snp_c2_4907",1,"1",83418574,NA,NA,236.11,3,4,1,1,1,0,1,1,1,1
"solcap_snp_c2_4910",1,"1",83419340,NA,NA,237.99,0,1,0,0,0,0,0,1,0,0
"solcap_snp_c1_1737",1,"1",83602469,NA,NA,238.38,2,3,0,1,0,1,1,0,1,1
"solcap_snp_c1_1739",1,"1",83608625,NA,NA,240.71,3,4,1,1,0,1,1,1,1,1
"solcap_snp_c2_4614",1,"1",83843457,NA,NA,240.73,4,3,1,1,1,1,1,0,1,1
"solcap_snp_c2_4664",1,"1",84062694,NA,NA,242.00,1,3,0,0,0,1,0,1,1,1
"solcap_snp_c2_4708",1,"1",84214693,NA,NA,244.12,0,2,0,0,0,0,0,0,1,1
"solcap_snp_c2_4713",1,"1",84217673,NA,NA,244.13,4,2,1,1,1,1,1,1,0,0
"solcap_snp_c2_36495",1,"1",84457206,NA,NA,244.38,0,2,0,0,0,0,0,0,1,1
"solcap_snp_c2_34546",1,"1",84727952,NA,NA,245.96,1,3,0,0,0,1,0,1,1,1
"solcap_snp_c1_10354",1,"1",84979069,NA,NA,251.10,4,3,1,1,1,1,1,0,1,1
"solcap_snp_c1_22",1,"1",85243830,NA,NA,251.59,0,1,0,0,0,0,0,1,0,0
"solcap_snp_c2_24",1,"1",85323495,NA,NA,255.23,1,2,0,1,0,0,1,1,0,0
"solcap_snp_c2_13385",1,"1",85715515,NA,NA,256.66,3,0,1,0,1,1,0,0,0,0
"solcap_snp_c2_46448",1,"1",85760106,NA,NA,256.67,1,2,0,1,0,0,1,1,0,0
"solcap_snp_c2_53075",1,"1",85902499,NA,NA,257.40,3,2,1,0,1,1,0,0,1,1
"solcap_snp_c2_42943",1,"1",85953353,NA,NA,258.08,1,2,0,1,0,0,1,1,0,0
"solcap_snp_c2_49917",1,"1",86090288,NA,NA,258.09,1,4,0,1,0,0,1,1,1,1
"solcap_snp_c2_49911",1,"1",86095463,NA,NA,258.10,1,4,0,1,0,0,1,1,1,1
"solcap_snp_c2_49910",1,"1",86095890,NA,NA,258.11,3,2,1,0,1,1,0,0,1,1
"solcap_snp_c2_14839",1,"1",86328984,NA,NA,260.48,0,2,0,0,0,0,0,0,1,1
"solcap_snp_c2_14707",1,"1",86355213,NA,NA,260.49,0,2,0,0,0,0,0,0,1,1
"solcap_snp_c2_14708",1,"1",86356234,NA,NA,262.46,1,2,0,1,0,0,1,1,0,0
"solcap_snp_c2_14709",1,"1",86356378,NA,NA,262.47,1,2,0,1,0,0,1,1,0,0
"solcap_snp_c1_4796",1,"1",86388041,NA,NA,262.72,3,2,1,0,1,1,0,0,1,1
"solcap_snp_c2_14730",1,"1",86441357,NA,NA,266.10,0,2,0,0,0,0,0,0,1,1
"solcap_snp_c2_14733",1,"1",86527670,NA,NA,266.84,4,2,1,1,1,1,1,1,0,0
"solcap_snp_c1_4799",1,"1",86663770,NA,NA,268.85,1,2,0,1,0,0,1,1,0,0
"solcap_snp_c2_14761",1,"1",86750111,NA,NA,269.76,1,2,0,1,0,0,1,1,0,0
"solcap_snp_c2_14762",1,"1",86750599,NA,NA,270.03,1,2,0,1,0,0,1,1,0,0
"solcap_snp_c2_14763",1,"1",86847560,NA,NA,270.30,1,2,0,1,0,0,1,1,0,0
"solcap_snp_c2_14764",1,"1",86847664,NA,NA,270.68,3,2,1,0,1,1,0,0,1,1
"solcap_snp_c2_14772",1,"1",86877778,NA,NA,271.06,1,2,0,1,0,0,1,1,0,0
"solcap_snp_c2_14779",1,"1",86887803,NA,NA,273.48,0,2,0,0,0,0,0,0,1,1
"solcap_snp_c1_4803",1,"1",86942483,NA,NA,275.77,3,2,1,0,1,1,0,0,1,1
"solcap_snp_c2_14827",1,"1",87096629,NA,NA,276.43,1,2,0,1,0,0,1,1,0,0
"solcap_snp_c2_14840",1,"1",87161581,NA,NA,277.64,3,0,1,0,1,1,0,0,0,0
"solcap_snp_c2_14841",1,"1",87161695,NA,NA,278.88,3,3,1,0,1,1,0,1,1,1
"solcap_snp_c2_14848",1,"1",87196823,NA,NA,279.40,1,1,0,1,0,0,1,0,0,0
"solcap_snp_c2_37836",1,"1",87392825,NA,NA,281.43,1,4,0,1,0,0,1,1,1,1
"solcap_snp_c2_37820",1,"1",87463711,NA,NA,281.44,3,2,1,0,1,1,0,0,1,1
"solcap_snp_c1_11288",1,"1",87558384,NA,NA,281.45,3,2,1,0,1,1,0,0,1,1
"solcap_snp_c1_11308",1,"1",87663528,NA,NA,287.68,4,2,1,1,1,1,1,1,0,0
"solcap_snp_c2_37850",1,"1",87731594,NA,NA,287.69,4,2,1,1,1,1,1,1,0,0
"solcap_snp_c2_37816",1,"1",87746020,NA,NA,288.85,0,2,0,0,0,0,0,0,1,1
"solcap_snp_c1_9428",1,"1",87944667,NA,NA,298.54,3,1,1,1,1,0,0,1,0,0
"solcap_snp_c1_9430",1,"1",87965033,NA,NA,306.08,4,2,1,1,1,1,1,1,0,0
"solcap_snp_c2_22105",1,"1",88057376,NA,NA,308.57,4,3,1,1,1,1,1,0,1,1
"solcap_snp_c1_9413",1,"1",88294049,NA,NA,310.60,4,2,1,1,1,1,1,1,0,0
"solcap_snp_c1_9406",1,"1",88347489,NA,NA,311.27,0,2,0,0,0,0,0,0,1,1
"solcap_snp_c2_30963",1,"1",88362769,NA,NA,312.85,2,0,1,0,1,0,0,0,0,0
"solcap_snp_c2_30961",1,"1",88389459,NA,NA,313.30,0,1,0,0,0,0,0,1,0,0
"solcap_snp_c1_9397",1,"1",88409394,NA,NA,314.49,4,2,1,1,1,1,1,1,0,0
"solcap_snp_c1_9392",1,"1",88434818,NA,NA,314.50,4,2,1,1,1,1,1,1,0,0
"solcap_snp_c2_30958",1,"1",88451845,NA,NA,316.41,0,1,0,0,0,0,0,1,0,0
"solcap_snp_c2_30956",1,"1",88452032,NA,NA,316.42,0,1,0,0,0,0,0,1,0,0
"solcap_snp_c2_30955",1,"1",88452236,NA,NA,316.43,0,1,0,0,0,0,0,1,0,0
> 
> 
> 
> 
> cleanEx()
> nameEx("extract_map")
> ### * extract_map
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extract_map
> ### Title: Extract the maker position from an object of class 'mappoly.map'
> ### Aliases: extract_map
> 
> ### ** Examples
> 
>  x <- maps.hexafake[[1]]$info$sequence.pos/1e6
>  y <- extract_map(maps.hexafake[[1]])
>  plot(y~x, ylab = "Map position (cM)", xlab = "Genome Position (Mbp)")
> 
> 
> 
> cleanEx()
> nameEx("filter_missing")
> ### * filter_missing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filter_missing
> ### Title: Filter missing genotypes
> ### Aliases: filter_missing
> 
> ### ** Examples
> 
> plot(tetra.solcap)
> dat.filt.mrk <- filter_missing(input.data = tetra.solcap,
+                                type = "marker", 
+                                filter.thres = 0.1,
+                                inter = TRUE)
> plot(dat.filt.mrk)
> 
> 
> 
> cleanEx()
> nameEx("filter_segregation")
> ### * filter_segregation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filter_segregation
> ### Title: Filter markers based on chi-square test
> ### Aliases: filter_segregation
> 
> ### ** Examples
> 
> mrks.chi.filt <- filter_segregation(input.data = tetra.solcap,
+                                     chisq.pval.thres = 0.05/tetra.solcap$n.mrk,
+                                     inter = TRUE)
> seq.init<-make_seq_mappoly(mrks.chi.filt)
> 
> 
> 
> 
> cleanEx()
> nameEx("get_genomic_order")
> ### * get_genomic_order
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_genomic_order
> ### Title: Get the genomic position of markers in a sequence
> ### Aliases: get_genomic_order
> 
> ### ** Examples
> 
>  s1<-make_seq_mappoly(tetra.solcap, "all")
>  o1<-get_genomic_order(s1)
>  head(o1)
                    seq seq.pos
solcap_snp_c2_51460   1  151147
solcap_snp_c2_36608   1  251032
solcap_snp_c2_36615   1  252977
solcap_snp_c2_36658   1  269300
solcap_snp_c1_10930   1  309242
solcap_snp_c2_36629   1  433701
> 
> 
> 
> cleanEx()
> nameEx("get_submap")
> ### * get_submap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_submap
> ### Title: Extract sub-map from map
> ### Aliases: get_submap
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("group_mappoly")
> ### * group_mappoly
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: group_mappoly
> ### Title: Assign markers to linkage groups
> ### Aliases: group_mappoly
> 
> ### ** Examples
> 
>     ## Getting first 20 markers from two linkage groups
>     all.mrk <- make_seq_mappoly(hexafake, c(1:20,601:620))
>     red.mrk <- elim_redundant(all.mrk)
>     unique.mrks <- make_seq_mappoly(red.mrk)
>     counts <- cache_counts_twopt(unique.mrks, cached = TRUE)
>     all.pairs <- est_pairwise_rf(input.seq = unique.mrks,
+                                  count.cache = counts,
+                                  ncpus = 1,
+                                  verbose=TRUE)
INFO: Going singlemode. Using one CPU for calculation.
> 
>     ## Full recombination fraction matrix
>     mat.full<-rf_list_to_matrix(input.twopt=all.pairs)
INFO: Going singlemode. Using one CPU.
>     plot(mat.full, index = FALSE)
> 
>     lgs <- group_mappoly(input.mat = mat.full,
+                          expected.groups = 2,
+                          inter = TRUE,
+                          comp.mat = TRUE, #this data has physical information
+                          verbose = TRUE)
>     lgs
  This is an object of class 'mappoly.group'
  ------------------------------------------
  Criteria used to assign markers to groups:

    - Number of markers:          35 
    - Number of linkage groups:   2 
    - Number of markers per linkage groups: 
    group n.mrk
        1    16
        2    19
  ------------------------------------------
   1  2 NoChr
1 16  0     0
2  1 18     0
  ------------------------------------------
>     plot(lgs)
>    
> 
> 
> 
> cleanEx()
> nameEx("import_data_from_polymapR")
> ### * import_data_from_polymapR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: import_data_from_polymapR
> ### Title: Import data from polymapR
> ### Aliases: import_data_from_polymapR
> 
> ### ** Examples
> 
> require(polymapR)
Loading required package: polymapR
> data("screened_data3")
> mappoly.data <- import_data_from_polymapR(screened_data3, 4)
> plot(mappoly.data)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:polymapR’

> nameEx("import_from_updog")
> ### * import_from_updog
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: import_from_updog
> ### Title: Import from updog
> ### Aliases: import_from_updog
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("import_phased_maplist_from_polymapR")
> ### * import_phased_maplist_from_polymapR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: import_phased_maplist_from_polymapR
> ### Title: Import phased map list from polymapR
> ### Aliases: import_phased_maplist_from_polymapR
> 
> ### ** Examples
> 
> require(polymapR)
Loading required package: polymapR
> ## Loading polymapR example
> data("integrated.maplist", "screened_data3", "marker_assignments_P1","marker_assignments_P2")
> maplist <- create_phased_maplist(maplist = integrated.maplist,
+                                  dosage_matrix.conv = screened_data3,
+                                  marker_assignment.1=marker_assignments_P1,
+                                  marker_assignment.2=marker_assignments_P2,
+                                  ploidy = 4)

The following P1 markers had less than 2 significant linkages:
_______________________________________

|_           |_           |_           |_           |
|:-----------|:-----------|:-----------|:-----------|
|Ac_ws037885 |Ac_ws041942 |Ap_ts070305 |Zm_ns067574 |
|Ap_ts075300 |Ap_ns074397 |Ap_rs052672 |Ap_ws009328 |
|Ls_ns084822 |Ps_ns097876 |Ps_rs020537 |Ps_ts037900 |
|Zm_ts083135 |Zm_ts004298 |Zm_ns066194 |Zm_ws014166 |
|Ls_ts088453 |Ps_ns038007 |Ps_ts070891 |St_ts053498 |
|            |            |            |            |


The following P2 markers had less than 2 significant linkages:
_______________________________________

|_           |_           |_           |_           |
|:-----------|:-----------|:-----------|:-----------|
|Ls_ns063052 |Ls_rs094027 |Ps_ws078864 |St_ws039972 |
|Zm_rs092910 |Zm_ws037604 |Ls_rs086910 |Ps_ts054446 |
|Ps_ts081649 |Zm_ns036680 |Ac_ns067500 |Ac_rs051869 |
|Zm_rs004217 |            |            |            |



The following markers did not have the expected assignment in P1:
_______________________________________

|_           |_           |_           |_           |
|:-----------|:-----------|:-----------|:-----------|
|Ac_ws075687 |Ps_ws055810 |St_rs092189 |Zm_rs020209 |
|Zm_ts025575 |Zm_ws000975 |Ac_ns070094 |Ac_rs039298 |
|Ac_ts072582 |Ac_ts086562 |Ac_ws046030 |Ap_ts006601 |
|Ap_ws033898 |Ap_ws090446 |Ls_ns009578 |Ls_ns056381 |
|Ls_rs034786 |Ls_ts033116 |Ps_ns004324 |Ps_ns011259 |
|Ps_ns058881 |Ps_rs011148 |Ps_ws042725 |St_ns024128 |
|St_ns062583 |St_rs064926 |St_ts039094 |St_ts041924 |
|St_ws030944 |St_ws039119 |St_ws070920 |Zm_ns025423 |
|Zm_ns029518 |Zm_ts044244 |Zm_ts069738 |Zm_ts079926 |
|Ac_ws068755 |Ac_ws072122 |Ap_ts011409 |Ap_ts054001 |
|Ap_ts091140 |Ap_ws040909 |Ap_ws077592 |Ls_rs082323 |
|Ps_ns083739 |Ps_rs075426 |Ps_ws090199 |St_ns098458 |
|St_ts015229 |St_ws087200 |Zm_rs037757 |Zm_ts002446 |
|Zm_ts019711 |Zm_ws027219 |Zm_ws060259 |            |


The following markers did not have the expected assignment in P2:
_______________________________________

|_           |_           |_           |_           |
|:-----------|:-----------|:-----------|:-----------|
|St_ws063767 |Zm_ts045853 |Ap_rs093377 |St_ns088154 |
|Zm_rs086486 |Ac_ws097004 |Ls_ws040263 |St_ns001206 |
|St_ns030561 |St_ws013665 |St_ws018280 |Zm_rs054641 |
|Ac_ts007867 |Ac_ts048872 |Ac_ws080280 |Ap_ws040909 |
|Ap_ws060705 |Ap_ws077592 |Ls_ns013729 |Ls_rs007694 |
|Ls_rs080231 |Ls_ts028778 |Ps_ts082625 |Ps_ws015893 |
|St_rs003957 |St_ts015229 |Zm_rs083409 |Zm_ws057795 |
|            |            |            |            |



The following markers did not have the expected assignment across both parents:
_______________________________________

|_           |_           |_           |_           |
|:-----------|:-----------|:-----------|:-----------|
|Ls_ns063052 |Ls_rs094027 |Ps_ts060971 |Ps_ws078864 |
|St_ws039972 |St_ws063767 |Zm_rs092910 |Zm_ts045853 |
|Zm_ws037604 |Ac_ns067500 |Ac_rs051869 |Ac_ws097004 |
|Ls_ws040263 |St_ns001206 |St_ns030561 |St_ws013665 |
|St_ws018280 |Zm_rs054641 |Ls_rs086910 |Ps_ts054446 |
|Ps_ts081649 |Zm_ns036680 |Ac_ts007867 |Ac_ts048872 |
|Ac_ws080280 |Ap_ws060705 |Ls_rs007694 |Ls_rs080231 |
|Ls_ts028778 |Ps_ts082625 |Ps_ws015893 |St_rs003957 |
|Zm_rs004217 |Zm_rs083409 |Zm_ws057795 |Ac_ws033297 |
|Ac_ws037885 |Ac_ws041942 |Ap_ts070305 |Ap_ts089267 |
|St_ns048176 |St_ts030296 |Zm_ns067574 |Zm_ws010615 |
|Ac_ns070094 |Ac_rs039298 |Ac_ts072582 |Ac_ts086562 |
|Ac_ws046030 |Ap_ts006601 |Ap_ws033898 |Ap_ws090446 |
|Ls_ns009578 |Ls_ns056381 |Ls_rs034786 |Ls_ts033116 |
|Ls_ts080875 |Ls_ws031541 |Ps_ns004324 |Ps_ns011259 |
|Ps_ns058881 |Ps_rs011148 |Ps_ws042725 |St_ns024128 |
|St_ns062583 |St_rs064926 |St_ts039094 |St_ts041924 |
|St_ws030944 |St_ws039119 |St_ws070920 |Zm_ns025423 |
|Zm_ns029518 |Zm_ns066194 |Zm_ts044244 |Zm_ts069738 |
|Zm_ts079926 |Zm_ws014166 |Ls_ws066613 |St_ts061078 |
|Zm_rs086341 |Zm_ts004298 |Zm_ts021292 |Ac_ts000182 |
|Ac_ws097783 |Ap_ns074397 |Ap_rs052672 |Ap_ts018003 |
|Ap_ws009328 |Ls_ns084822 |Ps_ns005543 |Ps_ns097876 |
|Ps_rs020537 |Ps_rs063176 |Ps_ts037900 |Zm_ts004968 |
|Zm_ts032170 |Zm_ts069324 |Zm_ts083135 |Ac_ws068755 |
|Ac_ws072122 |Ap_ts011409 |Ap_ts053047 |Ap_ts054001 |
|Ap_ts091140 |Ls_rs082323 |Ls_ts088453 |Ps_ns038007 |
|Ps_ns083739 |Ps_rs075426 |Ps_ts033186 |Ps_ts070891 |
|Ps_ws090199 |St_ns098458 |St_ts053498 |St_ws087200 |
|Zm_rs037757 |Zm_ts002446 |Zm_ts019711 |Zm_ws027219 |
|Zm_ws060259 |            |            |            |



Phased marker breakdown:
_______________________________________

|     | P2_0| P2_1| P2_2| P2_3|
|:----|----:|----:|----:|----:|
|P1_0 |    0|  195|  101|    0|
|P1_1 |  173|  302|  196|   61|
|P1_2 |  111|  183|   88|    0|


>  ## Importing polymapR dataset                                
>  mappoly.data <- import_data_from_polymapR(screened_data3, 4)
>  plot(mappoly.data) 
>  
>  ## Importing polymapR phased maplist
>  mappoly.maplist <- import_phased_maplist_from_polymapR(maplist, mappoly.data)
>  plot_map_list(mappoly.maplist)
>  ## plot phased map
>  plot(mappoly.maplist[[1]])
>  ## plot a segment of phased map (from 0 to 20 cM)
>  plot(mappoly.maplist[[1]], mrk.names = TRUE, left.lim = 0, right.lim = 20, cex = .7)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:polymapR’

> nameEx("loglike_hmm")
> ### * loglike_hmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loglike_hmm
> ### Title: Multipoint log-likelihood computation
> ### Aliases: loglike_hmm
> 
> ### ** Examples
> 
>  
> 
> 
> 
> cleanEx()
> nameEx("ls_linkage_phases")
> ### * ls_linkage_phases
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ls_linkage_phases
> ### Title: List of linkage phases
> ### Aliases: ls_linkage_phases print.two.pts.linkage.phases
> ###   plot.two.pts.linkage.phases
> ### Keywords: internal
> 
> ### ** Examples
> 
> seq.all.mrk <- make_seq_mappoly(hexafake, 'all')
> id <- get_genomic_order(seq.all.mrk)
> seq10 <- make_seq_mappoly(hexafake, rownames(id)[1:10])
> twopt<-est_pairwise_rf(seq10)
INFO: Going singlemode. Using one CPU for calculation.
> 
> ## Using the first 10 markers 
> l10.seq.3.0 <- ls_linkage_phases(input.seq = seq10, thres = 3, twopt = twopt)
> l10.seq.3.0

This object is too complex to print. Here is a summary:
---------------------------------------------
There is (are)  6  possible linkage phase(s)
based on two-point analysis.
---------------------------------------------
The threshold assumed to discard unlikely
linkage phases was  3 
> plot(l10.seq.3.0)
> l10.seq.2.0 <- ls_linkage_phases(input.seq = seq10, thres = 2.0, twopt = twopt)
> l10.seq.2.0

This object is too complex to print. Here is a summary:
---------------------------------------------
There is (are)  6  possible linkage phase(s)
based on two-point analysis.
---------------------------------------------
The threshold assumed to discard unlikely
linkage phases was  2 
> plot(l10.seq.2.0)
> l10.seq.1.0 <- ls_linkage_phases(input.seq = seq10, thres = 1.0, twopt = twopt)
> l10.seq.1.0

This object is too complex to print. Here is a summary:
---------------------------------------------
There is (are)  2  possible linkage phase(s)
based on two-point analysis.
---------------------------------------------
The threshold assumed to discard unlikely
linkage phases was  1 
> plot(l10.seq.1.0)
> 
> ## Using the first 5 markers 
> seq5 <- make_seq_mappoly(hexafake, rownames(id)[1:5])
> l5.seq.5.0 <- ls_linkage_phases(input.seq = seq5, thres = 5, twopt = twopt)
> l5.seq.5.0

This object is too complex to print. Here is a summary:
---------------------------------------------
There is (are)  9  possible linkage phase(s)
based on two-point analysis.
---------------------------------------------
The threshold assumed to discard unlikely
linkage phases was  5 
> plot(l5.seq.5.0)
> l5.seq.3.0 <- ls_linkage_phases(input.seq = seq5, thres = 3, twopt = twopt)
> l5.seq.3.0

This object is too complex to print. Here is a summary:
---------------------------------------------
There is (are)  3  possible linkage phase(s)
based on two-point analysis.
---------------------------------------------
The threshold assumed to discard unlikely
linkage phases was  3 
> plot(l5.seq.3.0)
> l5.seq.1.0 <- ls_linkage_phases(input.seq = seq5, thres = 1, twopt = twopt)
> l5.seq.1.0

This object is too complex to print. Here is a summary:
---------------------------------------------
There is (are)  1  possible linkage phase(s)
based on two-point analysis.
---------------------------------------------
The threshold assumed to discard unlikely
linkage phases was  1 
> plot(l5.seq.1.0)
> 
> 
> 
> cleanEx()
> nameEx("make_mat_mappoly")
> ### * make_mat_mappoly
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_mat_mappoly
> ### Title: Subset recombination fraction matrices
> ### Aliases: make_mat_mappoly
> 
> ### ** Examples
> 
>     # sequence with 20 markers
>     mrk.seq<-make_seq_mappoly(hexafake, 1:20)
>     mrk.pairs<-est_pairwise_rf(input.seq = mrk.seq,
+                                verbose=TRUE)
INFO: Going singlemode. Using one CPU for calculation.
>     ## Full recombination fraction matrix
>     mat<-rf_list_to_matrix(input.twopt=mrk.pairs)
INFO: Going singlemode. Using one CPU.
>     plot(mat)
>     ## Matrix subset
>     id <- make_seq_mappoly(hexafake, 1:10)
>     mat.sub<-make_mat_mappoly(mat, id)
>     plot(mat.sub)
>    
> 
> 
> 
> cleanEx()
> nameEx("make_pairs_mappoly")
> ### * make_pairs_mappoly
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_pairs_mappoly
> ### Title: Subset pairwise recombination fractions
> ### Aliases: make_pairs_mappoly
> 
> ### ** Examples
> 
>     ## selecting some markers along the genome
>     some.mrk<-make_seq_mappoly(hexafake, seq(1, 1500, 30))
>     all.pairs<-est_pairwise_rf(input.seq = some.mrk)
INFO: Going singlemode. Using one CPU for calculation.
>     mat.full<-rf_list_to_matrix(input.twopt = all.pairs)
INFO: Going singlemode. Using one CPU.
>     plot(mat.full)
>     
>     ## selecting two-point information for chromosome 1
>     mrks.1<-make_seq_mappoly(hexafake, names(which(some.mrk$sequence==1)))
>     p1<-make_pairs_mappoly(input.seq = mrks.1, input.twopt = all.pairs)
>     m1<-rf_list_to_matrix(input.twopt = p1)
INFO: Going singlemode. Using one CPU.
>     plot(m1, main.text = "LG1")
>    
> 
> 
> 
> cleanEx()
> nameEx("make_seq_mappoly")
> ### * make_seq_mappoly
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_seq_mappoly
> ### Title: Create a sequence of markers
> ### Aliases: make_seq_mappoly print.mappoly.sequence plot.mappoly.sequence
> 
> ### ** Examples
> 
>     all.mrk<-make_seq_mappoly(hexafake, 'all')
>     seq1.mrk<-make_seq_mappoly(hexafake, 'seq1')
>     plot(seq1.mrk)
>     some.mrk.pos<-c(1,4,28,32,45)
>     (some.mrk.1<-make_seq_mappoly(hexafake, some.mrk.pos))
This is an object of class 'mappoly.sequence'
    ------------------------
    Parameters not estimated
    ------------------------
    Ploidy level:       6 
    No. individuals:    300 
    No. markers:        5 

    ----------
    No. markers per sequence:
 sequence No.mrk
        1      5

    ----------
    No. of markers per dosage in both parents:
    dP dQ freq
     0  1    1
     1  1    3
     1  2    1
>     plot(some.mrk.1)
> 
> 
> 
> 
> cleanEx()
> nameEx("mds_mappoly")
> ### * mds_mappoly
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mds_mappoly
> ### Title: Estimates loci position using Multidimensional Scaling
> ### Aliases: mds_mappoly print.mappoly.pcmap print.mappoly.pcmap3d
> 
> ### ** Examples
> 
>     s1 <- make_seq_mappoly(hexafake, 1:20)
>     t1 <- est_pairwise_rf(s1, ncpus = 1)
INFO: Going singlemode. Using one CPU for calculation.
>     m1 <- rf_list_to_matrix(t1)
INFO: Going singlemode. Using one CPU.
>     plot(m1, ord = rownames(get_genomic_order(s1)))
>     mds.ord <- mds_mappoly(m1)
Stress: 0.56364
Mean Nearest Neighbour Fit: 0.48961>     plot(mds.ord)
>     so <- make_seq_mappoly(mds.ord)
>     plot(m1, ord = rownames(get_genomic_order(so)))
>     plot(so$seq.num ~ I(so$sequence.pos/1e6), 
+          xlab = "Genome Position",
+          ylab = "MDS position")
> 
> 
> 
> 
> cleanEx()
> nameEx("merge_datasets")
> ### * merge_datasets
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: merge_datasets
> ### Title: Merge datasets
> ### Aliases: merge_datasets
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("merge_maps")
> ### * merge_maps
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: merge_maps
> ### Title: Merge two maps
> ### Aliases: merge_maps
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_genome_vs_map")
> ### * plot_genome_vs_map
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_genome_vs_map
> ### Title: Physical versus genetic distance
> ### Aliases: plot_genome_vs_map
> 
> ### ** Examples
> 
>   ## tetraploid example
>   plot_genome_vs_map(solcap.mds.map)
>   plot_genome_vs_map(solcap.mds.map, same.ch.lg = TRUE)
>   
>   ## hexaploid example
>   plot_genome_vs_map(maps.hexafake)
>   plot_genome_vs_map(maps.hexafake, same.ch.lg = TRUE)
>  
> 
> 
> 
> cleanEx()
> nameEx("plot_map_list")
> ### * plot_map_list
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_map_list
> ### Title: Plot a genetic map
> ### Aliases: plot_map_list
> 
> ### ** Examples
> 
>  ## hexafake map
>  plot_map_list(maps.hexafake, horiz = FALSE)
>  plot_map_list(maps.hexafake, col = c("#999999", "#E69F00", "#56B4E9"))
>  
>  ## solcap map
>  plot_map_list(solcap.dose.map, col = "ggstyle")
>  
> 
> 
> 
> cleanEx()
> nameEx("plot_mrk_info")
> ### * plot_mrk_info
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_mrk_info
> ### Title: Plot marker information
> ### Aliases: plot_mrk_info
> 
> ### ** Examples
> 
>  plot_mrk_info(tetra.solcap.geno.dist, 2680)
>  plot_mrk_info(tetra.solcap.geno.dist, "solcap_snp_c2_23828")
>     
> 
> 
> 
> cleanEx()
> nameEx("poly_cross_simulate")
> ### * poly_cross_simulate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: poly_cross_simulate
> ### Title: Simulate an autopolyploid full-sib population
> ### Aliases: poly_cross_simulate
> 
> ### ** Examples
> 
>     h.temp<-sim_homologous(m=6, n.mrk=20, max.d=3, max.ph=3, seed=123)
>     fake.poly.dat<-poly_cross_simulate(m=6, rf.vec=.05, n.mrk=20,
+                                   n.ind=200, h.temp, seed=123)
>     plot(fake.poly.dat)
>                                    
>                                   
> 
> 
> 
> cleanEx()
> nameEx("print_mrk")
> ### * print_mrk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print_mrk
> ### Title: Summary of a set of markers
> ### Aliases: print_mrk
> 
> ### ** Examples
> 
>  print_mrk(tetra.solcap.geno.dist, 1:5)

 solcap_snp_c2_41437
----------------------------------
 dosage P1:  3
 dosage P2:  4
----
 dosage distribution
  3   4 mis 
 81  79   0 
----
 expected polysomic segregation
  0   1   2   3   4 
0.0 0.0 0.0 0.5 0.5 
----------------------------------

 solcap_snp_c2_24258
----------------------------------
 dosage P1:  1
 dosage P2:  1
----
 dosage distribution
  0   1   2 mis 
 34  91  30   5 
----
 expected polysomic segregation
   0    1    2    3    4 
0.25 0.50 0.25 0.00 0.00 
----------------------------------

 solcap_snp_c2_4408
----------------------------------
 dosage P1:  4
 dosage P2:  3
----
 dosage distribution
  3   4 mis 
 65  76  19 
----
 expected polysomic segregation
  0   1   2   3   4 
0.0 0.0 0.0 0.5 0.5 
----------------------------------

 solcap_snp_c2_21332
----------------------------------
 dosage P1:  3
 dosage P2:  2
----
 dosage distribution
  1   2   3   4 mis 
 14  70  53  17   6 
----
 expected polysomic segregation
         0          1          2          3          4 
0.00000000 0.08333333 0.41666667 0.41666667 0.08333333 
----------------------------------

 solcap_snp_c2_21314
----------------------------------
 dosage P1:  4
 dosage P2:  3
----
 dosage distribution
  3   4 mis 
 80  80   0 
----
 expected polysomic segregation
  0   1   2   3   4 
0.0 0.0 0.0 0.5 0.5 
----------------------------------
>  print_mrk(hexafake, 256)

 M_256
----------------------------------
 dosage P1:  2
 dosage P2:  1
----
 dosage distribution
  0   1   2   3 mis 
 28 127 118  27   0 
----
 expected polysomic segregation
  0   1   2   3   4   5   6 
0.1 0.4 0.4 0.1 0.0 0.0 0.0 
----------------------------------
> 
> 
> 
> cleanEx()
> nameEx("read_fitpoly")
> ### * read_fitpoly
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_fitpoly
> ### Title: Data Input in fitPoly format
> ### Aliases: read_fitpoly
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("read_geno")
> ### * read_geno
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_geno
> ### Title: Data Input
> ### Aliases: read_geno print.mappoly.data plot.mappoly.data
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("read_geno_csv")
> ### * read_geno_csv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_geno_csv
> ### Title: Data Input in CSV format
> ### Aliases: read_geno_csv
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("read_geno_prob")
> ### * read_geno_prob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_geno_prob
> ### Title: Data Input
> ### Aliases: read_geno_prob
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("read_vcf")
> ### * read_vcf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_vcf
> ### Title: Data Input VCF
> ### Aliases: read_vcf
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("rev_map")
> ### * rev_map
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rev_map
> ### Title: Reverse map
> ### Aliases: rev_map
> 
> ### ** Examples
> 
> plot_genome_vs_map(solcap.mds.map[[1]])
> plot_genome_vs_map(rev_map(solcap.mds.map[[1]]))
> 
> 
> 
> cleanEx()
> nameEx("rf_list_to_matrix")
> ### * rf_list_to_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rf_list_to_matrix
> ### Title: Recombination fraction list to matrix
> ### Aliases: rf_list_to_matrix print.mappoly.rf.matrix
> ###   plot.mappoly.rf.matrix
> 
> ### ** Examples
> 
>     all.mrk<-make_seq_mappoly(hexafake, 1:20)
>     red.mrk<-elim_redundant(all.mrk)
>     unique.mrks<-make_seq_mappoly(red.mrk)
>     all.pairs<-est_pairwise_rf(input.seq = unique.mrks,
+                                ncpus = 1,
+                                verbose=TRUE)
INFO: Going singlemode. Using one CPU for calculation.
> 
>     ## Full recombination fraction matrix
>     mat.full<-rf_list_to_matrix(input.twopt=all.pairs)
INFO: Going singlemode. Using one CPU.
>     plot(mat.full)
>     plot(mat.full, type = "lod")
>  
> 
> 
> 
> cleanEx()
> nameEx("rf_snp_filter")
> ### * rf_snp_filter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rf_snp_filter
> ### Title: Remove markers that do not meet a LOD criteria
> ### Aliases: rf_snp_filter
> 
> ### ** Examples
> 
>     all.mrk<-make_seq_mappoly(hexafake, 1:20)
>     red.mrk<-elim_redundant(all.mrk)
>     unique.mrks<-make_seq_mappoly(red.mrk)
>     all.pairs<-est_pairwise_rf(input.seq = unique.mrks,
+                                ncpus = 1,
+                                verbose=TRUE)
INFO: Going singlemode. Using one CPU for calculation.
> 
>     ## Full recombination fraction matrix
>     mat.full<-rf_list_to_matrix(input.twopt=all.pairs)
INFO: Going singlemode. Using one CPU.
>     plot(mat.full)
> 
>     ## Removing disruptive SNPs
>     tpt.filt<-rf_snp_filter(all.pairs, 2, 2, 0.07, probs = c(0.15, 1))
>     p1.filt<-make_pairs_mappoly(input.seq = tpt.filt, input.twopt = all.pairs)
>     m1.filt<-rf_list_to_matrix(input.twopt = p1.filt)
INFO: Going singlemode. Using one CPU.
>     plot(mat.full, main.text = "LG1")
>     plot(m1.filt, main.text = "LG1.filt")
>    
> 
> 
> 
> cleanEx()
> nameEx("segreg_poly")
> ### * segreg_poly
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: segreg_poly
> ### Title: Polysomic segregation frequency
> ### Aliases: segreg_poly
> 
> ### ** Examples
> 
> # autohexaploid with two and three doses in parents P and Q,
> # respectively
> seg<-segreg_poly(m=6, dP=2, dQ=3)
> barplot(seg, las=2)
> 
> 
> 
> 
> cleanEx()
> nameEx("sim_homologous")
> ### * sim_homologous
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sim_homologous
> ### Title: Simulate homology groups
> ### Aliases: sim_homologous
> 
> ### ** Examples
> 
>     h.temp<-sim_homologous(m=6, n.mrk=20, max.d=3, max.ph=3,
+                            seed=123)
> 
> 
> 
> 
> cleanEx()
> nameEx("split_and_rephase")
> ### * split_and_rephase
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: split_and_rephase
> ### Title: Divides map in sub-maps and re-phase them
> ### Aliases: split_and_rephase
> 
> ### ** Examples
> 
>  map <- get_submap(maps.hexafake[[1]], 1:20, reestimate.rf = FALSE, reestimate.phase = FALSE)

    You selected: reestimate.rf = FALSE
    -----------------------------------------
    The recombination fractions provided were
    obtained using the marker positions in the 
    input map; For accurate values, plese 
    reestimate the map using functions 'reest_rf', 
    'est_full_hmm_with_global_error' or 
    'est_full_hmm_with_prior_prob'
>  tpt <- est_pairwise_rf(make_seq_mappoly(map))
INFO: Going singlemode. Using one CPU for calculation.
>  new.map <- split_and_rephase(map, tpt, 5)
>  map
This is an object of class 'mappoly.map'
    Ploidy level:	 6 
    No. individuals:	 300 
    No. markers:	 20 
    No. linkage phases:	 1 

    ---------------------------------------------
    Number of linkage phase configurations:  1
    ---------------------------------------------
    Linkage phase configuration:  1
       map length:	 2.34
       log-likelihood:	 0
       LOD:		 0
    ~~~~~~~~~~~~~~~~~~
>  new.map
This is an object of class 'mappoly.map'
    Ploidy level:	 6 
    No. individuals:	 300 
    No. markers:	 20 
    No. linkage phases:	 1 

    ---------------------------------------------
    Number of linkage phase configurations:  1
    ---------------------------------------------
    Linkage phase configuration:  1
       map length:	 2.34
       log-likelihood:	 0
       LOD:		 0
    ~~~~~~~~~~~~~~~~~~
>  plot_map_list(list(old.map = map, new.map = new.map))
> 
> 
> 
> 
> cleanEx()
> nameEx("summary_maps")
> ### * summary_maps
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary_maps
> ### Title: Summary maps
> ### Aliases: summary_maps
> 
> ### ** Examples
> 
> tetra.sum <- summary_maps(solcap.err.map)

Your dataset contains removed (redundant) markers. Once finished the maps, remember to add them back with the function 'update_map'.

> tetra.sum
      LG Genomic sequence Map size (cM) Markers/cM Simplex Double-simplex
1      1                1        316.43       1.18     108             24
2      2                2        202.85       1.23      88             49
3      3                3        102.26       2.66     104             47
4      4                4        101.93       3.52     143             34
5      5                5         82.98       2.95      75             22
6      6                6        181.58       2.02     100             55
7      7                7        134.58       2.44     110             55
8      8                8        117.42       2.14      71             36
9      9                9        202.32       1.32      85             46
10    10               10        127.32       1.55      70             31
11    11               11        101.28       2.34      79             35
12    12               12        162.09       1.21      61             35
13 Total             <NA>       1833.04       2.05    1094            469
   Multiplex Total Max gap
1        241   373    9.69
2        112   249   10.16
3        121   272    6.54
4        182   359    3.07
5        148   245    4.43
6        212   367    3.94
7        163   328    9.81
8        144   251   10.77
9        136   267   11.07
10        96   197    7.15
11       123   237    6.32
12       100   196    6.37
13      1778  3341    7.44
> 
> 
> 
> cleanEx()
> nameEx("update_map")
> ### * update_map
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: update_map
> ### Title: Update map
> ### Aliases: update_map
> 
> ### ** Examples
> 
> orig.map <- solcap.err.map
> up.map <- lapply(solcap.err.map, update_map)
Updating map 1 
Updating map 1 
Updating map 1 
Updating map 1 
Updating map 1 
Updating map 1 
Updating map 1 
Updating map 1 
Updating map 1 
Updating map 1 
Updating map 1 
Updating map 1 
> summary_maps(orig.map)

Your dataset contains removed (redundant) markers. Once finished the maps, remember to add them back with the function 'update_map'.

      LG Genomic sequence Map size (cM) Markers/cM Simplex Double-simplex
1      1                1        316.43       1.18     108             24
2      2                2        202.85       1.23      88             49
3      3                3        102.26       2.66     104             47
4      4                4        101.93       3.52     143             34
5      5                5         82.98       2.95      75             22
6      6                6        181.58       2.02     100             55
7      7                7        134.58       2.44     110             55
8      8                8        117.42       2.14      71             36
9      9                9        202.32       1.32      85             46
10    10               10        127.32       1.55      70             31
11    11               11        101.28       2.34      79             35
12    12               12        162.09       1.21      61             35
13 Total             <NA>       1833.04       2.05    1094            469
   Multiplex Total Max gap
1        241   373    9.69
2        112   249   10.16
3        121   272    6.54
4        182   359    3.07
5        148   245    4.43
6        212   367    3.94
7        163   328    9.81
8        144   251   10.77
9        136   267   11.07
10        96   197    7.15
11       123   237    6.32
12       100   196    6.37
13      1778  3341    7.44
> summary_maps(up.map)
      LG Genomic sequence Map size (cM) Markers/cM Simplex Double-simplex
1      1                1        316.44       1.24     108             24
2      2             2-NA        202.85       1.29      88             49
3      3                3        102.26       2.93     104             47
4      4                4        101.93       3.91     143             34
5      5                5         82.98       3.09      75             22
6      6             6-NA        181.59       2.24     100             55
7      7             7-NA        134.59       2.79     110             55
8      8                8        117.42       2.25      71             36
9      9                9        202.32       1.39      85             46
10    10               10        127.32        1.7      70             31
11    11               11        101.29       2.66      79             35
12    12               12        162.09       1.25      61             35
13 Total             <NA>       1833.08       2.23    1094            469
   Multiplex Total Max gap
1        241   393    9.69
2        112   262   10.16
3        121   300    6.54
4        182   399    3.07
5        148   256    4.43
6        212   406    3.94
7        163   375    9.81
8        144   264   10.77
9        136   281   11.07
10        96   216    7.15
11       123   269    6.32
12       100   202    6.37
13      1778  3623    7.44
> 
> 
> 
> cleanEx()
> nameEx("update_missing")
> ### * update_missing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: update_missing
> ### Title: Update missing information
> ### Aliases: update_missing
> 
> ### ** Examples
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  125.604 3.96 158.824 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')

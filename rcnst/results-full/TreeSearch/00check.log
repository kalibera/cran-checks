* using log directory ‘/var/scratch2/tomas/cran/rcnst/check/TreeSearch.Rcheck’
* using R Under development (unstable) (2022-12-01 r83394)
* using platform: x86_64-pc-linux-gnu (64-bit)
* using session charset: UTF-8
* checking for file ‘TreeSearch/DESCRIPTION’ ... OK
* this is package ‘TreeSearch’ version ‘1.2.0’
* package encoding: UTF-8
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking whether package ‘TreeSearch’ can be installed ... OK
* checking package directory ... OK
* checking ‘build’ directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking loading without being on the library search path ... OK
* checking dependencies in R code ... OK
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... OK
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking contents of ‘data’ directory ... OK
* checking data for non-ASCII characters ... OK
* checking LazyData ... OK
* checking data for ASCII and uncompressed saves ... OK
* checking line endings in C/C++/Fortran sources/headers ... OK
* checking compiled code ... NOTE
Note: information on .o files is not available
* checking installed files from ‘inst/doc’ ... OK
* checking files in ‘vignettes’ ... OK
* checking examples ... OK
* checking for unstated dependencies in ‘tests’ ... OK
* checking tests ... ERROR
  Running ‘spelling.R’
  Running ‘testthat.R’
Running the tests in ‘tests/testthat.R’ failed.
Last 13 lines of output:
      attr(dataset, "levels") <- lvls
      attr(dataset, "allLevels") <- c(lvls, "?")
      attr(dataset, "contrast") <- matrix(c(1, 0, 1, 0, 1, 1), 
          length(lvls) + 1L, length(lvls), dimnames = list(NULL, 
              lvls))
      attr(dataset, "nc") <- length(lvls)
      if (!any(attr(dataset, "bootstrap") == "info.amounts")) {
          attr(dataset, "bootstrap") <- c(attr(dataset, "bootstrap"), 
              "info.amounts")
      }
      dataset
  }
  Function PrepareDataProfile in namespace TreeSearch has this body.
  Fatal error: compiler constants were modified!
  
* checking for unstated dependencies in vignettes ... OK
* checking package vignettes in ‘inst/doc’ ... OK
* checking running R code from vignettes ... NONE
  ‘custom.Rmd’ using ‘UTF-8’... OK
  ‘getting-started.Rmd’ using ‘UTF-8’... OK
  ‘profile-scores.Rmd’ using ‘UTF-8’... OK
  ‘profile.Rmd’ using ‘UTF-8’... OK
  ‘tree-search.Rmd’ using ‘UTF-8’... OK
* checking re-building of vignette outputs ... ERROR
Error(s) in re-building vignettes:
--- re-building ‘custom.Rmd’ using rmarkdown
  - Performing tree search.  Initial score: 12.5064616755793
  - Final score 12.4783231474408 found 1 times after 100 rearrangements.
* Beginning Parsimony Ratchet, with initial score 12.4783231474408

* Ratchet iteration 1.
* Best score after 1/2 ratchet iterations: 12.4783 (hit 0/2)


* Ratchet iteration 2.
* Best score after 2/2 ratchet iterations: 12.4334 (hit 1/2)

Completed parsimony ratchet after 2 iterations with score 12.4334097275274

--- finished re-building ‘custom.Rmd’

--- re-building ‘getting-started.Rmd’ using rmarkdown
--- finished re-building ‘getting-started.Rmd’

--- re-building ‘profile-scores.Rmd’ using rmarkdown
--- finished re-building ‘profile-scores.Rmd’

--- re-building ‘profile.Rmd’ using rmarkdown

── BEGIN TREE SEARCH (k = profile) ─────────────────────────────────────────────
→ 

── Find local optimum ──────────────────────────────────────────────────────────
→  TBR depth 6; keeping max 8 trees; k = profile.
ℹ 2022-12-01 14:31:58.85071: Score to beat: 552.619
ERROR: modification of compiler constant of type character, length 2
ERROR: the modified value of the constant is:
[1] "0" "1"
attr(,".match.hash")
<hash table>
ERROR: the original value of the constant is:
[1] "0" "1"
ERROR: the modified constant is at index 285
ERROR: the modified constant is in this function body:
{
    if ("info.amounts" %fin% names(attributes(dataset))) {
        return(dataset)
    }
    at <- attributes(dataset)
    nLevel <- length(at$level)
    cont <- attr(dataset, "contrast")
    nTip <- length(dataset)
    index <- at$index
    allLevels <- as.character(at$allLevels)
    contSums <- rowSums(cont)
    qmLevel <- which(contSums == ncol(cont))
    if (length(qmLevel) == 0) {
        attr(dataset, "contrast") <- rbind(attr(dataset, "contrast"), 
            1)
        attr(dataset, "allLevels") <- c(attr(dataset, "allLevels"), 
            "{?}")
        qmLevel <- length(allLevels) + 1L
    }
    ambigs <- which(contSums > 1L & contSums < ncol(cont))
    inappLevel <- which(colnames(cont) == "-")
    if (length(inappLevel) != 0L) {
        cli_alert("Inapplicable tokens treated as ambiguous for profile parsimony")
        inappLevel <- which(apply(unname(cont), 1, identical, 
            as.double(colnames(cont) == "-")))
        dataset[] <- lapply(dataset, function(i) {
            i[i %fin% inappLevel] <- qmLevel
            i
        })
    }
    if (length(ambigs) != 0L) {
        dataset[] <- lapply(dataset, function(i) {
            i[i %fin% ambigs] <- qmLevel
            i
        })
    }
    mataset <- matrix(unlist(dataset, recursive = FALSE, use.names = FALSE), 
        max(index))
    .RemoveExtraTokens <- function(char, ambiguousTokens) {
        unambig <- char[!char %fin% ambiguousTokens]
        if (length(unambig) == 0) {
            return(matrix(nrow = length(char), ncol = 0))
        }
        split <- table(unambig)
        ranking <- order(order(split, decreasing = TRUE))
        ignored <- ranking > 2L
        if (any(split[ignored] > 1L)) {
            warningMsg <- "Can handle max. 2 informative tokens. Dropping others."
            if (interactive()) {
                cli_alert_warning(warningMsg)
            }
            else {
                warning(warningMsg)
            }
        }
        if (length(ambiguousTokens) == 0) {
            stop("No ambiguous token available for replacement")
        }
        tokens <- names(split)
        most <- tokens[which.min(ranking)]
        vapply(setdiff(names(split)[split > 1], most), function(kept) {
            simplified <- char
            simplified[!simplified %fin% c(most, kept)] <- ambiguousTokens[1]
            simplified
        }, char)
    }
    decomposed <- lapply(seq_along(mataset[, 1]), function(i) .RemoveExtraTokens(mataset[i, 
        ], ambiguousTokens = qmLevel))
    nChar <- vapply(decomposed, dim, c(0, 0))[2, ]
    if (sum(nChar) == 0) {
        cli_alert("No informative characters in `dataset`.")
        attr(dataset, "info.amounts") <- double(0)
        return(dataset[0])
    }
    newIndex <- seq_len(sum(nChar))
    oldIndex <- rep.int(seq_along(nChar), nChar)
    index <- unlist(lapply(index, function(i) {
        newIndex[oldIndex == i]
    }))
    mataset <- unname(do.call(cbind, decomposed))
    NON_AMBIG <- 1:2
    AMBIG <- max(NON_AMBIG) + 1L
    .Recompress <- function(char, ambiguousTokens) {
        tokens <- unique(char)
        nonAmbig <- setdiff(tokens, ambiguousTokens)
        stopifnot(length(nonAmbig) == 2L)
        cipher <- seq_len(max(tokens))
        cipher[nonAmbig] <- NON_AMBIG
        cipher[ambiguousTokens] <- AMBIG
        cipher[char]
    }
    if (length(mataset) == 0) {
        cli_alert("No informative characters in `dataset`.")
        attr(dataset, "info.amounts") <- double(0)
        return(dataset[0])
    }
    mataset <- apply(mataset, 2, .Recompress, qmLevel)
    dupCols <- duplicated(t(mataset))
    kept <- which(!dupCols)
    copies <- lapply(kept, function(i) {
        i + which(apply(mataset[, -seq_len(i), drop = FALSE], 
            2, identical, mataset[, i]))
    })
    firstOccurrence <- seq_len(dim(mataset)[2])
    for (i in seq_along(copies)) {
        firstOccurrence[copies[[i]]] <- kept[i]
    }
    cipher <- seq_len(max(kept))
    cipher[kept] <- order(kept)
    index <- cipher[firstOccurrence][index]
    mataset <- mataset[, !dupCols, drop = FALSE]
    dataset[] <- lapply(seq_len(length(dataset)), function(i) mataset[i, 
        ])
    info <- lapply(seq_along(mataset[1, ]), function(i) StepInformation(mataset[, 
        i], ambiguousTokens = AMBIG))
    maxSteps <- max(vapply(info, function(i) max(as.integer(names(i))), 
        integer(1)))
    info <- vapply(info, function(x) {
        ret <- setNames(double(maxSteps), seq_len(maxSteps))
        x <- x[setdiff(names(x), "0")]
        if (length(x)) {
            ret[names(x)] <- max(x) - x
        }
        ret
    }, double(maxSteps))
    if (is.null(dim(info))) {
        dim(info) <- c(1L, length(info))
    }
    attr(dataset, "index") <- index
    weight <- as.integer(table(index))
    attr(dataset, "weight") <- weight
    attr(dataset, "nr") <- length(weight)
    attr(dataset, "info.amounts") <- info
    attr(dataset, "informative") <- colSums(info) > 0
    lvls <- c("0", "1")
    attr(dataset, "levels") <- lvls
    attr(dataset, "allLevels") <- c(lvls, "?")
    attr(dataset, "contrast") <- matrix(c(1, 0, 1, 0, 1, 1), 
        length(lvls) + 1L, length(lvls), dimnames = list(NULL, 
            lvls))
    attr(dataset, "nc") <- length(lvls)
    if (!any(attr(dataset, "bootstrap") == "info.amounts")) {
        attr(dataset, "bootstrap") <- c(attr(dataset, "bootstrap"), 
            "info.amounts")
    }
    dataset
}
Function PrepareDataProfile in namespace TreeSearch has this body.
Fatal error: compiler constants were modified!

--- re-building ‘tree-search.Rmd’ using rmarkdown

── BEGIN TREE SEARCH (k = Inf) ─────────────────────────────────────────────────
→ 

── Find local optimum ──────────────────────────────────────────────────────────
→  TBR depth 4; keeping max 41 trees; k = Inf.
ℹ 2022-12-01 14:32:51.590323: Score to beat: 83
TBR search 1 ■■■■■■■■■■■■■■■■■■■■■■■■■■■       86% | D1, score 79, hit 36. ETA:…
  - TBR rearrangement at depth 2 found score 79 42 times.


── Escape local optimum ────────────────────────────────────────────────────────
→ 7 ratchet iterations; TBR depth 2; max. 14 hits; k = Inf.
→ 2022-12-01 14:32:54.33753: Score to beat: 79
→ Ratchet iteration 1 @ 14:32:54; score to beat: 79 
→ Ratchet iteration 2 @ 14:32:55; score to beat: 79 
→ Ratchet iteration 3 @ 14:32:56; score to beat: 79 
→ Ratchet iteration 4 @ 14:32:58; score to beat: 79 
→ Ratchet iteration 5 @ 14:33:00; score to beat: 79 
→ Ratchet iteration 6 @ 14:33:02; score to beat: 79 
→ Ratchet iteration 7 @ 14:33:04; score to beat: 79 
TBR search ■■■■■■■                           21% | D1, score 79, hit 33. ETA:  …
  - TBR rearrangement at depth 1 found score 79 42 times.


── Sample local optimum ────────────────────────────────────────────────────────
→ TBR depth 2; keeping 41.4 trees; k = Inf
ℹ 2022-12-01 14:33:06.646656: Score: 79
✔ 2022-12-01 14:33:07.692187: Tree search terminated with score 79
ℹ Starting search from `tree[[23]]`

── BEGIN TREE SEARCH (k = Inf) ─────────────────────────────────────────────────
→ 

── Find local optimum ──────────────────────────────────────────────────────────
→  TBR depth 8; keeping max 80 trees; k = Inf.
ℹ 2022-12-01 14:33:14.830494: Score to beat: 79

── Escape local optimum ────────────────────────────────────────────────────────
→ 6 ratchet iterations; TBR depth 4; max. 27 hits; k = Inf.
→ 2022-12-01 14:33:16.635694: Score to beat: 79
→ Ratchet iteration 1 @ 14:33:16; score to beat: 79 
→ Ratchet iteration 2 @ 14:33:19; score to beat: 79 
→ Ratchet iteration 3 @ 14:33:21; score to beat: 79 
TBR search ■■■■■■■■■■■■■■■■■■■■■■■■■■■       86% | D0, score 79, hit 19. ETA:  …
  - TBR rearrangement at depth 2 found score 79 80 times.

→ Ratchet iteration 4 @ 14:33:27; score to beat: 79 
→ Ratchet iteration 5 @ 14:33:29; score to beat: 79 
TBR search ■■■■■■■■■■■■■■■■■■■■■■            71% | D1, score 79, hit 46. ETA:  …
  - TBR rearrangement at depth 2 found score 79 80 times.

→ Ratchet iteration 6 @ 14:33:31; score to beat: 79 
TBR search ■■■■■■■■■■■■■■■■■■■               60% | D2, score 79, hit 79. ETA:  …
  - TBR rearrangement at depth 2 found score 79 80 times.


── Sample local optimum ────────────────────────────────────────────────────────
→ TBR depth 12; keeping 80 trees; k = Inf
ℹ 2022-12-01 14:33:34.519551: Score: 79
✔ 2022-12-01 14:33:35.395051: Tree search terminated with score 79

── BEGIN TREE SEARCH (k = 10) ──────────────────────────────────────────────────
→ 

── Find local optimum ──────────────────────────────────────────────────────────
→  TBR depth 4; keeping max 41 trees; k = 10.
ℹ 2022-12-01 14:34:42.205838: Score to beat: 1.83683
TBR search 1 ■■■■■■■                           21% | D1, score 1.52814, hit 7. …
TBR search 1 ■■■■■■■■■■■■■■■■■■■■■■■■■■■       88% | D2, score 1.52814, hit 21.…
  - TBR rearrangement at depth 4 found score 1.52814 39 times.


── Escape local optimum ────────────────────────────────────────────────────────
→ 7 ratchet iterations; TBR depth 2; max. 14 hits; k = 10.
→ 2022-12-01 14:34:48.828909: Score to beat: 1.52814
→ Ratchet iteration 1 @ 14:34:48; score to beat: 1.52814 
TBR search ■■■■■■■                           21% | D2, score 1.52814, hit 9. ET…
  - TBR rearrangement at depth 2 found score 1.52814 15 times.

→ Ratchet iteration 2 @ 14:34:52; score to beat: 1.52814 
TBR search ■■■■■■■■■■■■■■■■■■■■■■■■■■        83% | D1, score 1.52814, hit 11. E…
TBR search ■■■■■■■■■■■■■■■■■■■■■■■           74% | D2, score 1.52814, hit 17. E…
  - TBR rearrangement at depth 2 found score 1.52814 19 times.

→ Ratchet iteration 3 @ 14:34:56; score to beat: 1.52814 
TBR search ■■■■■■■■■■■                       33% | D2, score 1.52814, hit 15. E…
  - TBR rearrangement at depth 2 found score 1.52814 21 times.

→ Ratchet iteration 4 @ 14:34:59; score to beat: 1.52814 
TBR search ■■■■■■■■■■■■■                     40% | D1, score 1.52814, hit 9. ET…
  - TBR rearrangement at depth 2 found score 1.52814 23 times.

→ Ratchet iteration 5 @ 14:35:03; score to beat: 1.52814 
TBR search ■■■■■■■■■■■■■■                    43% | D2, score 1.52814, hit 11. E…
  - TBR rearrangement at depth 2 found score 1.52814 15 times.

→ Ratchet iteration 6 @ 14:35:07; score to beat: 1.52814 
TBR search ■■■■■■■■■■■■■■■■■                 52% | D2, score 1.6039, hit 1. ETA…
  - TBR rearrangement at depth 2 found score 1.6039 1 time.

→ Ratchet iteration 7 @ 14:35:10; score to beat: 1.52814 
TBR search ■■■■■■■■■■■■                      38% | D2, score 1.52814, hit 21. E…
TBR search ■■■■■■■■■■■■■■■■■■■■              62% | D2, score 1.52814, hit 23. E…
  - TBR rearrangement at depth 2 found score 1.52814 27 times.


── Sample local optimum ────────────────────────────────────────────────────────
→ TBR depth 2; keeping 41.4 trees; k = 10
ℹ 2022-12-01 14:35:14.058898: Score: 1.52814
✔ 2022-12-01 14:35:16.285429: Tree search terminated with score 1.52814
✔ Initialized 1 distinct constraints.
→ 2022-12-01 14:35:16.638119: Score to beat: 3
✔ Initialized 2 distinct constraints.
→ 2022-12-01 14:35:17.115579: Score to beat: 2
--- finished re-building ‘tree-search.Rmd’

SUMMARY: processing the following file failed:
  ‘profile.Rmd’

Error: Vignette re-building failed.
Execution halted

* checking PDF version of manual ... OK
* DONE
Status: 2 ERRORs, 1 NOTE


R Under development (unstable) (2022-12-01 r83394) -- "Unsuffered Consequences"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ParamHelpers"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ParamHelpers')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Param")
> ### * Param
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Param
> ### Title: Create a description object for a parameter.
> ### Aliases: Param makeNumericParam makeNumericVectorParam makeIntegerParam
> ###   makeIntegerVectorParam makeLogicalParam makeLogicalVectorParam
> ###   makeDiscreteParam makeDiscreteVectorParam makeFunctionParam
> ###   makeUntypedParam makeCharacterParam makeCharacterVectorParam
> 
> ### ** Examples
> 
> makeNumericParam("x", lower = -1, upper = 1)
     Type len Def  Constr Req Tunable Trafo
1 numeric   -   - -1 to 1   -    TRUE     -
> makeNumericVectorParam("x", len = 2)
           Type len Def      Constr Req Tunable Trafo
1 numericvector   2   - -Inf to Inf   -    TRUE     -
> makeDiscreteParam("y", values = c("a", "b"))
      Type len Def Constr Req Tunable Trafo
1 discrete   -   -    a,b   -    TRUE     -
> makeCharacterParam("z")
       Type len Def Constr Req Tunable Trafo
1 character   -   -      -   -   FALSE     -
> 
> 
> 
> cleanEx()
> nameEx("addOptPathEl")
> ### * addOptPathEl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addOptPathEl
> ### Title: Add a new element to an optimization path.
> ### Aliases: addOptPathEl
> 
> ### ** Examples
> 
> ps = makeParamSet(
+   makeNumericParam("p1"),
+   makeDiscreteParam("p2", values = c("a", "b"))
+ )
> op = makeOptPathDF(par.set = ps, y.names = "y", minimize = TRUE)
> addOptPathEl(op, x = list(p1 = 7, p2 = "b"), y = 1)
> addOptPathEl(op, x = list(p1 = -1, p2 = "a"), y = 2)
> as.data.frame(op)
  p1 p2 y dob eol
1  7  b 1   1  NA
2 -1  a 2   2  NA
> 
> 
> 
> cleanEx()
> nameEx("checkParamSet")
> ### * checkParamSet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: checkParamSet
> ### Title: Sanity check expressions of a parameter set.
> ### Aliases: checkParamSet
> 
> ### ** Examples
> 
> ps = makeParamSet(
+   makeNumericParam("u", lower = expression(p)),
+   makeIntegerParam("v", lower = 1, upper = expression(3 * p)),
+   makeDiscreteParam("w", default = expression(z), values = c("a", "b")),
+   makeDiscreteParam("x", default = "a", values = c("a", "b")),
+   keys = c("p", "z")
+ )
> checkParamSet(ps, dict = list(p = 3, z = "b"))
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("discreteNameToValue")
> ### * discreteNameToValue
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: discreteNameToValue
> ### Title: Convert encoding name(s) to discrete value(s).
> ### Aliases: discreteNameToValue
> 
> ### ** Examples
> 
> p = makeDiscreteParam("u", values = c(x1 = "a", x2 = "b", x3 = "b"))
> discreteNameToValue(p, "x3")
[1] "b"
> 
> 
> 
> cleanEx()
> nameEx("discreteValueToName")
> ### * discreteValueToName
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: discreteValueToName
> ### Title: Convert discrete value(s) to encoding name(s).
> ### Aliases: discreteValueToName
> 
> ### ** Examples
> 
> p = makeDiscreteParam("u", values = c(x1 = "a", x2 = "b", x3 = "c"))
> discreteValueToName(p, "b")
[1] "x2"
> 
> 
> 
> cleanEx()
> nameEx("evaluateParamExpressions")
> ### * evaluateParamExpressions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: evaluateParamExpressions
> ### Title: Evaluates all expressions within a parameter.
> ### Aliases: evaluateParamExpressions
> 
> ### ** Examples
> 
> ps = makeParamSet(
+   makeNumericParam("x", lower = expression(p), upper = expression(ceiling(3 * p))),
+   makeIntegerParam("y", lower = 1, upper = 2)
+ )
> evaluateParamExpressions(ps, dict = list(p = 3))
     Type len Def Constr Req Tunable Trafo
x numeric   -   - 3 to 9   -    TRUE     -
y integer   -   - 1 to 2   -    TRUE     -
> 
> ps = makeParamSet(
+   makeNumericParam("x", default = expression(sum(data$Species == "setosa"))),
+   makeIntegerParam("y", lower = 1, upper = 2),
+   keys = c("data", "Species")
+ )
> evaluateParamExpressions(ps, dict = list(data = iris))
     Type len Def      Constr Req Tunable Trafo
x numeric   -  50 -Inf to Inf   -    TRUE     -
y integer   -   -      1 to 2   -    TRUE     -
> 
> par.vals = list(
+   x = expression(k),
+   y = 5
+ )
> evaluateParamExpressions(par.vals, dict = list(k = 3))
$x
[1] 3

$y
[1] 5

> 
> 
> 
> cleanEx()
> nameEx("filterParams")
> ### * filterParams
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filterParams
> ### Title: Get parameter subset of only certain parameters.
> ### Aliases: filterParams filterParamsNumeric filterParamsDiscrete
> 
> ### ** Examples
> 
> ps = makeParamSet(
+   makeNumericParam("u", lower = 1),
+   makeIntegerParam("v", lower = 1, upper = 2),
+   makeDiscreteParam("w", values = 1:2),
+   makeLogicalParam("x"),
+   makeCharacterParam("s"),
+   makeNumericParam("y", tunable = FALSE)
+ )
> 
> # filter for numeric and integer parameters
> filterParams(ps, type = c("integer", "numeric"))
     Type len Def      Constr Req Tunable Trafo
u numeric   -   -    1 to Inf   -    TRUE     -
v integer   -   -      1 to 2   -    TRUE     -
y numeric   -   - -Inf to Inf   -   FALSE     -
> 
> # filter for tunable, numeric parameters
> filterParams(ps, type = "numeric", tunable = TRUE)
     Type len Def   Constr Req Tunable Trafo
u numeric   -   - 1 to Inf   -    TRUE     -
> 
> # filter for all numeric parameters among "u", "v" and "x"
> filterParams(ps, type = "numeric", ids = c("u", "v", "x"))
     Type len Def   Constr Req Tunable Trafo
u numeric   -   - 1 to Inf   -    TRUE     -
> 
> 
> 
> cleanEx()
> nameEx("generateDesign")
> ### * generateDesign
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generateDesign
> ### Title: Generates a statistical design for a parameter set.
> ### Aliases: generateDesign
> 
> ### ** Examples
> 
> ps = makeParamSet(
+   makeNumericParam("x1", lower = -2, upper = 1),
+   makeIntegerParam("x2", lower = 10, upper = 20)
+ )
> # random latin hypercube design with 5 samples:
> generateDesign(5, ps)
           x1 x2
1  0.52358474 19
2 -1.58778629 17
3 -0.93809515 15
4 -0.36942890 12
5  0.02802111 13
> 
> # with trafo
> ps = makeParamSet(
+   makeNumericParam("x", lower = -2, upper = 1),
+   makeNumericVectorParam("y", len = 2, lower = 0, upper = 1, trafo = function(x) x / sum(x))
+ )
> generateDesign(10, ps, trafo = TRUE)
             x        y1        y2
1  -0.05671411 0.5497616 0.4502384
2  -1.02656082 0.3019307 0.6980693
3  -1.60511849 0.6712415 0.3287585
4  -0.67795094 0.2170166 0.7829834
5   0.83771972 0.5855484 0.4144516
6   0.17740503 0.1314864 0.8685136
7  -0.47472593 0.4133360 0.5866640
8  -1.14816789 0.7814911 0.2185089
9   0.54290537 0.5402875 0.4597125
10 -1.88300314 0.8325848 0.1674152
> 
> 
> 
> cleanEx()
> nameEx("generateGridDesign")
> ### * generateGridDesign
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generateGridDesign
> ### Title: Generates a grid design for a parameter set.
> ### Aliases: generateGridDesign
> 
> ### ** Examples
> 
> ps = makeParamSet(
+   makeNumericParam("x1", lower = -2, upper = 1),
+   makeNumericParam("x2", lower = -2, upper = 2, trafo = function(x) x^2)
+ )
> generateGridDesign(ps, resolution = c(x1 = 4, x2 = 5), trafo = TRUE)
   x1 x2
1  -2  4
2  -1  4
3   0  4
4   1  4
5  -2  1
6  -1  1
7   0  1
8   1  1
9  -2  0
10 -1  0
11  0  0
12  1  0
> 
> 
> 
> cleanEx()
> nameEx("getDefaults")
> ### * getDefaults
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getDefaults
> ### Title: Return defaults of parameters in parameter set.
> ### Aliases: getDefaults
> 
> ### ** Examples
> 
> ps1 = makeParamSet(
+   makeDiscreteParam("x", values = c("a", "b"), default = "a"),
+   makeNumericVectorParam("y", len = 2),
+   makeIntegerParam("z", default = 99)
+ )
> getDefaults(ps1, include.null = TRUE)
$x
[1] "a"

$y
NULL

$z
[1] 99

> 
> ps2 = makeParamSet(
+   makeNumericVectorParam("a", len = expression(k), default = expression(p)),
+   makeIntegerParam("b", default = 99),
+   makeLogicalParam("c")
+ )
> getDefaults(ps2, dict = list(k = 3, p = 5.4))
$a
[1] 5.4 5.4 5.4

$b
[1] 99

> 
> 
> 
> cleanEx()
> nameEx("getLower")
> ### * getLower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getLower
> ### Title: Get lower / upper bounds and allowed discrete values for
> ###   parameters.
> ### Aliases: getLower getUpper getValues
> 
> ### ** Examples
> 
> ps = makeParamSet(
+   makeNumericParam("u"),
+   makeDiscreteParam("v", values = c("a", "b")),
+   makeIntegerParam("w", lower = expression(ceiling(p / 3)), upper = 2),
+   makeDiscreteParam("x", values = 1:2),
+   makeNumericVectorParam("y", len = 2, lower = c(0, 10), upper = c(1, 11)),
+   keys = "p"
+ )
ERROR: modification of compiler constant of type character, length 2
ERROR: the modified value of the constant is:
[1] "integer"       "integervector"
attr(,".match.hash")
<hash table>
ERROR: the original value of the constant is:
[1] "integer"       "integervector"
ERROR: the modified constant is at index 1
ERROR: the modified constant is in this function body:
c("integer", "integervector")
Fatal error: compiler constants were modified!


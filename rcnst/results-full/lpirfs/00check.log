* using log directory ‘/var/scratch2/tomas/cran/rcnst/check/lpirfs.Rcheck’
* using R Under development (unstable) (2021-03-04 r80063)
* using platform: x86_64-pc-linux-gnu (64-bit)
* using session charset: UTF-8
* checking for file ‘lpirfs/DESCRIPTION’ ... OK
* checking extension type ... Package
* this is package ‘lpirfs’ version ‘0.1.9’
* package encoding: UTF-8
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking whether package ‘lpirfs’ can be installed ... OK
* checking package directory ... OK
* checking ‘build’ directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking loading without being on the library search path ... OK
* checking dependencies in R code ... OK
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... OK
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking contents of ‘data’ directory ... OK
* checking data for non-ASCII characters ... OK
* checking data for ASCII and uncompressed saves ... OK
* checking line endings in C/C++/Fortran sources/headers ... OK
* checking line endings in Makefiles ... OK
* checking compilation flags in Makevars ... OK
* checking for GNU extensions in Makefiles ... OK
* checking for portable use of $(BLAS_LIBS) and $(LAPACK_LIBS) ... OK
* checking use of PKG_*FLAGS in Makefiles ... OK
* checking compiled code ... NOTE
Note: information on .o files is not available
* checking installed files from ‘inst/doc’ ... OK
* checking files in ‘vignettes’ ... OK
* checking examples ... OK
* checking for unstated dependencies in ‘tests’ ... OK
* checking tests ... ERROR
  Running ‘testthat.R’
Running the tests in ‘tests/testthat.R’ failed.
Last 13 lines of output:
      else {
          names_fns <- names(fns)
          empties <- which(names_fns == "")
          if (length(empties)) {
              names_fns[empties] <- empties
          }
      }
      glue_mask <- glue_mask <- across_glue_mask(.caller_env, .col = rep(vars, 
          each = length(fns)), .fn = rep(names_fns, length(vars)))
      names <- vec_as_names(glue(names, .envir = glue_mask), repair = "check_unique")
      list(vars = vars, fns = fns, names = names)
  }
  Function across_setup_impl in namespace dplyr has this body.
  Fatal error: compiler constants were modified!
  
* checking for unstated dependencies in vignettes ... OK
* checking package vignettes in ‘inst/doc’ ... OK
* checking running R code from vignettes ... NONE
  ‘lpirfs_vignette.Rmd’ using ‘UTF-8’... OK
* checking re-building of vignette outputs ... WARNING
Error(s) in re-building vignettes:
--- re-building ‘lpirfs_vignette.Rmd’ using rmarkdown

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union


Attaching package: 'gridExtra'

The following object is masked from 'package:dplyr':

    combine

Loading required package: ggplot2
ERROR: modification of compiler constant of type integer, length 1
ERROR: the modified value of the constant is:
[1] 17
ERROR: the original value of the constant is:
[1] 1
ERROR: the modified constant is at index 12
ERROR: the modified constant is in this function body:
{
    cols <- enquo(cols)
    if (.top_level) {
        mask$set_current_group(1L)
    }
    else {
        cols <- quo_set_env(cols, data_mask_top(quo_get_env(cols), 
            recursive = FALSE, inherit = TRUE))
    }
    vars <- tidyselect::eval_select(cols, data = mask$across_cols())
    vars <- names(vars)
    if (is.null(fns)) {
        if (!is.null(names)) {
            glue_mask <- across_glue_mask(.caller_env, .col = vars, 
                .fn = "1")
            names <- vec_as_names(glue(names, .envir = glue_mask), 
                repair = "check_unique")
        }
        value <- list(vars = vars, fns = fns, names = names)
        return(value)
    }
    if (is.function(fns) || is_formula(fns)) {
        names <- names %||% "{.col}"
        fns <- list(`1` = fns)
    }
    else {
        names <- names %||% "{.col}_{.fn}"
    }
    if (!is.list(fns)) {
        abort(c("Problem with `across()` input `.fns`.", i = "Input `.fns` must be NULL, a function, a formula, or a list of functions/formulas."))
    }
    expr_protect <- function(x) {
        call2(quote, x)
    }
    fns <- map(fns, function(fn) {
        if (is_formula(fn) && .top_level) {
            f_rhs(fn) <- call2(quote(rlang::eval_tidy), expr_protect(f_rhs(fn)), 
                data = mask$get_rlang_mask())
        }
        fn <- as_function(fn)
        fn
    })
    if (is.null(names(fns))) {
        names_fns <- seq_along(fns)
    }
    else {
        names_fns <- names(fns)
        empties <- which(names_fns == "")
        if (length(empties)) {
            names_fns[empties] <- empties
        }
    }
    glue_mask <- glue_mask <- across_glue_mask(.caller_env, .col = rep(vars, 
        each = length(fns)), .fn = rep(names_fns, length(vars)))
    names <- vec_as_names(glue(names, .envir = glue_mask), repair = "check_unique")
    list(vars = vars, fns = fns, names = names)
}
Function across_setup_impl in namespace dplyr has this body.
Fatal error: compiler constants were modified!


* checking PDF version of manual ... OK
* DONE
Status: 1 ERROR, 1 WARNING, 1 NOTE

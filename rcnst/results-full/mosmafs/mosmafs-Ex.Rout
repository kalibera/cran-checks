
R Under development (unstable) (2022-08-19 r82734) -- "Unsuffered Consequences"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "mosmafs"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('mosmafs')
Loading required package: ecr
Loading required package: BBmisc

Attaching package: ‘BBmisc’

The following object is masked from ‘package:base’:

    isFALSE

Loading required package: smoof
Loading required package: ParamHelpers
Loading required package: checkmate

Attaching package: ‘mosmafs’

The following objects are masked from ‘package:ecr’:

    getPopulations, getStatistics

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("collectResult")
> ### * collectResult
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: collectResult
> ### Title: Collect Result Information
> ### Aliases: collectResult
> 
> ### ** Examples
> 
> library(mlrCPO)
Loading required package: mlr
Warning message: 'mlr' is in 'maintenance-only' mode since July 2019.
Future development will only happen in 'mlr3'
(<https://mlr3.mlr-org.com>). Due to the focus on 'mlr3' there might be
uncaught bugs meanwhile in {mlr} - please consider switching.
> 
> # Setup of optimization problem 
> ps.simple <- pSS(
+  a: numeric [0, 10],
+  selector.selection: logical^10)
>  
> mutator.simple <- combine.operators(ps.simple,
+  a = mutGauss,
+  selector.selection = mutBitflipCHW)
>  
> crossover.simple <- combine.operators(ps.simple,
+  a = recSBX,
+  selector.selection = recPCrossover)
> 
> initials <- sampleValues(ps.simple, 30, discrete.names = TRUE)
> 
> fitness.fun <- smoof::makeMultiObjectiveFunction(
+  sprintf("simple test"),
+  has.simple.signature = FALSE, par.set = ps.simple, n.objectives = 2, 
+  noisy = TRUE,
+  ref.point = c(10, 1),
+  fn = function(args, fidelity = NULL, holdout = FALSE) {
+    pfeat <- mean(args$selector.selection)
+    c(perform = args$a, pfeat = pfeat)
+  })
> fitness.fun.single <- smoof::makeMultiObjectiveFunction(
+  sprintf("simple test"),
+  has.simple.signature = FALSE, par.set = ps.simple, n.objectives = 1, 
+  noisy = TRUE,
+  ref.point = c(10),
+  fn = function(args, fidelity = NULL, holdout = FALSE) {
+    propfeat <- mean(args$selector.selection)
+    c(propfeat = propfeat)
+  })
> 
> # Run NSGA-II
> results <- slickEcr(fitness.fun = fitness.fun, lambda = 10, population = initials, 
+  mutator = mutator.simple, recombinator = crossover.simple, generations = 10)
> 
> # Collect results
> colres <- collectResult(results)
> print(colres)
   gen runtime evals eval.perform.min eval.perform.mean eval.perform.max
1    0   0.234    30        0.3554058         4.2159837         9.761707
2    1   0.288    40        0.3554058         3.2259098         9.761707
3    2   0.341    50        0.3554058         2.9198269         9.761707
4    3   0.391    60        0.3554058         2.5692106         9.761707
5    4   0.443    70        0.3554058         2.3894018         9.761707
6    5   0.496    80        0.3554058         2.3900108         9.761707
7    6   0.548    90        0.3554058         1.8245395         7.007046
8    7   0.594   100        0.3172515         1.4385361         3.746404
9    8   0.642   110        0.2878886         1.3739212         3.746404
10   9   0.691   120        0.2878886         1.1609860         3.646461
11  10   0.739   130        0.2878886         0.9512652         1.917154
   eval.pfeat.min eval.pfeat.mean eval.pfeat.max eval.domHV hout.perform.min
1             0.1       0.4866667            0.9   8.331689        0.3554058
2             0.1       0.4900000            0.9   8.331689        0.3554058
3             0.1       0.4733333            0.9   8.332183        0.3554058
4             0.1       0.4833333            0.9   8.332183        0.3554058
5             0.1       0.4800000            0.9   8.332183        0.3554058
6             0.1       0.4433333            0.9   8.333395        0.3554058
7             0.1       0.4266667            0.9   8.333395        0.3554058
8             0.1       0.4600000            0.9   8.352472        0.3172515
9             0.1       0.3933333            0.9   8.454006        0.2878886
10            0.1       0.3500000            0.8   8.523028        0.2878886
11            0.1       0.3533333            0.7   8.523028        0.2878886
   hout.perform.mean hout.perform.max hout.pfeat.min hout.pfeat.mean
1          4.2159837         9.761707            0.1       0.4866667
2          3.2259098         9.761707            0.1       0.4900000
3          2.9198269         9.761707            0.1       0.4733333
4          2.5692106         9.761707            0.1       0.4833333
5          2.3894018         9.761707            0.1       0.4800000
6          2.3900108         9.761707            0.1       0.4433333
7          1.8245395         7.007046            0.1       0.4266667
8          1.4385361         3.746404            0.1       0.4600000
9          1.3739212         3.746404            0.1       0.3933333
10         1.1609860         3.646461            0.1       0.3500000
11         0.9512652         1.917154            0.1       0.3533333
   hout.pfeat.max hout.domHV true.hout.domHV naive.hout.domHV cor.perform
1             0.9   8.331689        8.331689         8.331689           1
2             0.9   8.331689        8.331689         8.331689           1
3             0.9   8.332183        8.332183         8.332183           1
4             0.9   8.332183        8.332183         8.332183           1
5             0.9   8.332183        8.332183         8.332183           1
6             0.9   8.333395        8.333395         8.333395           1
7             0.9   8.333395        8.333395         8.333395           1
8             0.9   8.352472        8.352472         8.352472           1
9             0.9   8.454006        8.454006         8.454006           1
10            0.8   8.523028        8.523028         8.523028           1
11            0.7   8.523028        8.523028         8.523028           1
   cor.pfeat
1          1
2          1
3          1
4          1
5          1
6          1
7          1
8          1
9          1
10         1
11         1
>  
> 
> 
> 
> cleanEx()

detaching ‘package:mlrCPO’, ‘package:mlr’

> nameEx("combine.operators")
> ### * combine.operators
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combine.operators
> ### Title: Combine ECR-Operators
> ### Aliases: combine.operators
> 
> ### ** Examples
> 
> library(mlrCPO)
Loading required package: mlr
Warning message: 'mlr' is in 'maintenance-only' mode since July 2019.
Future development will only happen in 'mlr3'
(<https://mlr3.mlr-org.com>). Due to the focus on 'mlr3' there might be
uncaught bugs meanwhile in {mlr} - please consider switching.
> 
> # Create parameter set 
> ps <- pSS(
+ logi: logical, 
+ disc: discrete[yes, no], 
+ discvec: discrete[letters]^3, 
+ numer: numeric[0, 10])
> 
> # Define mutators for groups of parameters 
> combo.mut <- combine.operators(ps, 
+ .params.group1 = c("logi", "disc"), # define group for which same mutator is used
+ group1 = ecr::setup(mutBitflip, p = 1), # set probability for mutation to 1
+ discrete = mutRandomChoice, # define operator for all other discrete parameters
+ numer = mutGauss) # specific operator for parameter numer
> 
> combo.mut(list(logi = FALSE, disc = "yes", discvec = c("a", "x", "y"), 
+ numer = 2.5))
$logi
[1] TRUE

$disc
[1] "no"

$discvec
[1] "a" "x" "y"

$numer
[1] 2.579764

> 
> # Define mutator with strategy parameter
> combo.strategy <- combine.operators(ps,
+ logical = ecr::setup(mutBitflip, p = 0),
+ discrete = mutRandomChoice,
+ numeric = mutGauss, 
+ .strategy.numeric = function(ind) {
+ if (ind$disc == "yes") {
+ return(list(p = 1L))
+ } else {
+ return(list(p = 0L))
+ }
+ })
> 
> combo.strategy(list(logi = FALSE, disc = "no", discvec = c("a", "x", "y"), 
+ numer = 2.5))
$logi
[1] FALSE

$disc
[1] "no"

$discvec
[1] "a" "x" "y"

$numer
[1] 2.5

> 
> # Define recombinators for groups of parameters
> combo.rec <- combine.operators(ps, 
+ .params.group1 = c("logi", "disc"), # define group for which same mutator is used
+ group1 = recPCrossover, 
+ discrete = recPCrossover,
+ numer = recGaussian)
> 
> combo.rec(list(list(logi = FALSE, disc = "no", discvec = c("a", "x", "y"), 
+ numer = 2.5), list(logi = TRUE, disc = "yes", discvec = c("c", "e", "g"), 
+ numer = 7.5)))
[[1]]
[[1]]$logi
[1] FALSE

[[1]]$disc
[1] "no"

[[1]]$discvec
[1] "a" "x" "y"

[[1]]$numer
[1] 6.908984


[[2]]
[[2]]$logi
[1] TRUE

[[2]]$disc
[1] "yes"

[[2]]$discvec
[1] "c" "e" "g"

[[2]]$numer
[1] 3.002477


attr(,"multiple")
[1] TRUE
> 
> 
> 
> 
> cleanEx()

detaching ‘package:mlrCPO’, ‘package:mlr’

> nameEx("cpoSelector")
> ### * cpoSelector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cpoSelector
> ### Title: CPO that Selects Features
> ### Aliases: cpoSelector
> 
> ### ** Examples
> 
> library("mlr")
Warning message: 'mlr' is in 'maintenance-only' mode since July 2019.
Future development will only happen in 'mlr3'
(<https://mlr3.mlr-org.com>). Due to the focus on 'mlr3' there might be
uncaught bugs meanwhile in {mlr} - please consider switching.
> library("mlrCPO")
> 
> # Dataset has originally four features
> iris.task$task.desc$n.feat
   numerics     factors     ordered functionals 
          4           0           0           0 
> 
> iris.task.subset = iris.task %>>% cpoSelector(c(TRUE, TRUE, FALSE, FALSE))
> 
> # Now only two were selected
> iris.task.subset$task.desc$n.feat
   numerics     factors     ordered functionals 
          2           0           0           0 
> 
> 
> 
> cleanEx()

detaching ‘package:mlrCPO’, ‘package:mlr’

> nameEx("initSelector")
> ### * initSelector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: initSelector
> ### Title: Initialize Selector
> ### Aliases: initSelector
> 
> ### ** Examples
> 
> library(mlrCPO)
Loading required package: mlr
Warning message: 'mlr' is in 'maintenance-only' mode since July 2019.
Future development will only happen in 'mlr3'
(<https://mlr3.mlr-org.com>). Due to the focus on 'mlr3' there might be
uncaught bugs meanwhile in {mlr} - please consider switching.
> 
> # Initialize parameter set and sample candidates
> ps <- pSS(
+  maxdepth: integer[1, 30],
+  minsplit: integer[2, 30],
+  cp: numeric[0.001, 0.999], 
+  selector.selection: logical^5)
> 
> initials <- sampleValues(ps, 15, discrete.names = TRUE)
> 
> # Resample logical vector selector.selection of initials 
> # with binomial distribution 
> initSelector(initials, distribution = function() rbinom(n = 5, size = 5, 
+  prob = 0.5))
[[1]]
[[1]]$maxdepth
[1] 8

[[1]]$minsplit
[1] 12

[[1]]$cp
[1] 0.5727077

[[1]]$selector.selection
[1]  TRUE FALSE FALSE  TRUE FALSE


[[2]]
[[2]]$maxdepth
[1] 19

[[2]]$minsplit
[1] 3

[[2]]$cp
[1] 0.2065626

[[2]]$selector.selection
[1]  TRUE FALSE  TRUE  TRUE FALSE


[[3]]
[[3]]$maxdepth
[1] 22

[[3]]$minsplit
[1] 30

[[3]]$cp
[1] 0.3802751

[[3]]$selector.selection
[1] FALSE FALSE FALSE FALSE  TRUE


[[4]]
[[4]]$maxdepth
[1] 9

[[4]]$minsplit
[1] 13

[[4]]$cp
[1] 0.01436355

[[4]]$selector.selection
[1] FALSE  TRUE FALSE  TRUE FALSE


[[5]]
[[5]]$maxdepth
[1] 15

[[5]]$minsplit
[1] 7

[[5]]$cp
[1] 0.8267186

[[5]]$selector.selection
[1]  TRUE FALSE FALSE  TRUE FALSE


[[6]]
[[6]]$maxdepth
[1] 25

[[6]]$minsplit
[1] 20

[[6]]$cp
[1] 0.7823669

[[6]]$selector.selection
[1]  TRUE FALSE  TRUE  TRUE  TRUE


[[7]]
[[7]]$maxdepth
[1] 22

[[7]]$minsplit
[1] 22

[[7]]$cp
[1] 0.4776644

[[7]]$selector.selection
[1]  TRUE FALSE FALSE  TRUE  TRUE


[[8]]
[[8]]$maxdepth
[1] 10

[[8]]$minsplit
[1] 17

[[8]]$cp
[1] 0.6616811

[[8]]$selector.selection
[1] FALSE  TRUE  TRUE FALSE FALSE


[[9]]
[[9]]$maxdepth
[1] 20

[[9]]$minsplit
[1] 9

[[9]]$cp
[1] 0.4785882

[[9]]$selector.selection
[1]  TRUE FALSE FALSE  TRUE  TRUE


[[10]]
[[10]]$maxdepth
[1] 11

[[10]]$minsplit
[1] 11

[[10]]$cp
[1] 0.4763985

[[10]]$selector.selection
[1] FALSE  TRUE FALSE  TRUE FALSE


[[11]]
[[11]]$maxdepth
[1] 14

[[11]]$minsplit
[1] 22

[[11]]$cp
[1] 0.4001944

[[11]]$selector.selection
[1]  TRUE FALSE  TRUE FALSE FALSE


[[12]]
[[12]]$maxdepth
[1] 8

[[12]]$minsplit
[1] 6

[[12]]$cp
[1] 0.2401502

[[12]]$selector.selection
[1] FALSE  TRUE FALSE FALSE  TRUE


[[13]]
[[13]]$maxdepth
[1] 14

[[13]]$minsplit
[1] 13

[[13]]$cp
[1] 0.8102485

[[13]]$selector.selection
[1]  TRUE FALSE  TRUE  TRUE FALSE


[[14]]
[[14]]$maxdepth
[1] 20

[[14]]$minsplit
[1] 8

[[14]]$cp
[1] 0.1301136

[[14]]$selector.selection
[1] FALSE FALSE  TRUE  TRUE FALSE


[[15]]
[[15]]$maxdepth
[1] 11

[[15]]$minsplit
[1] 14

[[15]]$cp
[1] 0.1489151

[[15]]$selector.selection
[1]  TRUE FALSE  TRUE FALSE FALSE


> 
> 
> 
> 
> cleanEx()

detaching ‘package:mlrCPO’, ‘package:mlr’

> nameEx("intifyMutator")
> ### * intifyMutator
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: intifyMutator
> ### Title: Turn Continuous-Space Operators into Integer-Space Operators
> ### Aliases: intifyMutator intifyRecombinator
> 
> ### ** Examples
> 
> library(mlrCPO)
Loading required package: mlr
Warning message: 'mlr' is in 'maintenance-only' mode since July 2019.
Future development will only happen in 'mlr3'
(<https://mlr3.mlr-org.com>). Due to the focus on 'mlr3' there might be
uncaught bugs meanwhile in {mlr} - please consider switching.
> 
> # Create parameter set
> ps <- pSS(
+ numb: numeric[1, 10],
+ int: integer[0, 5])
> 
> # Define mutator
> # If Gaussian mutator is applied to integer parameter,
> # it does not return an integer
> combo.mut <- combine.operators(ps,
+ numeric = mutGauss,
+ int = mutGauss)
> combo.mut(list(numb = 1.5, int = 3))
$numb
[1] 1.483688

$int
[1] 2.958219

> 
> # Turn continuous-space operator mutGauss into integer-space operator
> mutGaussInt <- intifyMutator(mutGauss)
> combo.mut.int <- combine.operators(ps,
+ numeric = mutGauss,
+ int = mutGaussInt)
> combo.mut.int(list(numb = 1.5, int = 3))
$numb
[1] 1.520732

$int
[1] 3

> 
> # Turn continuous-space operator recSBX into integer-space operator
> recSBXInt <- intifyRecombinator(recSBX)
> combo.rec.int <- combine.operators(ps,
+ numeric = recSBX,
+ int = recSBXInt)
> combo.rec.int(list(list(numb = 1.5, int = 3), list(numb = 3, int = 0)))
[[1]]
[[1]]$numb
[1] 1.535066

[[1]]$int
[1] 3


[[2]]
[[2]]$numb
[1] 3.103529

[[2]]$int
[1] 0


attr(,"multiple")
[1] TRUE
> 
> 
> 
> 
> cleanEx()

detaching ‘package:mlrCPO’, ‘package:mlr’

> nameEx("listToDf")
> ### * listToDf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: listToDf
> ### Title: List to data.frame
> ### Aliases: listToDf
> 
> ### ** Examples
> 
> library(mlrCPO)
Loading required package: mlr
Warning message: 'mlr' is in 'maintenance-only' mode since July 2019.
Future development will only happen in 'mlr3'
(<https://mlr3.mlr-org.com>). Due to the focus on 'mlr3' there might be
uncaught bugs meanwhile in {mlr} - please consider switching.
> 
> # Create parameter set
> temp <- c("a", "b", "c")
> ps.simple <- pSS(
+  num: numeric [0, 10],
+  int: integer[0, 10] [[trafo = function(x) x / 10]],
+  char: discrete [temp], 
+  selector.selection: logical^10)
>  
> # Sample values as list and convert list to data frame
> init.list <- sampleValues(ps.simple, 5, discrete.names = TRUE)
> result <- listToDf(init.list, ps.simple)
> result
        num int char selector.selection1 selector.selection2
1 2.6550866   4    c                TRUE               FALSE
2 3.8410372   8    b               FALSE               FALSE
3 0.1339033   4    a               FALSE               FALSE
4 4.1127443   9    b                TRUE               FALSE
5 4.3809711   2    a                TRUE               FALSE
  selector.selection3 selector.selection4 selector.selection5
1                TRUE                TRUE                TRUE
2               FALSE                TRUE                TRUE
3               FALSE                TRUE               FALSE
4               FALSE               FALSE               FALSE
5               FALSE               FALSE                TRUE
  selector.selection6 selector.selection7 selector.selection8
1               FALSE               FALSE                TRUE
2                TRUE                TRUE                TRUE
3                TRUE                TRUE               FALSE
4               FALSE                TRUE                TRUE
5                TRUE               FALSE               FALSE
  selector.selection9 selector.selection10
1                TRUE                 TRUE
2                TRUE                 TRUE
3                TRUE                FALSE
4               FALSE                 TRUE
5               FALSE                FALSE
> 
> 
> 
> 
> cleanEx()

detaching ‘package:mlrCPO’, ‘package:mlr’

> nameEx("makeFilterMat")
> ### * makeFilterMat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: makeFilterMat
> ### Title: Create a Filter-Matrix
> ### Aliases: makeFilterMat
> 
> ### ** Examples
> 
> library("mlr")
Warning message: 'mlr' is in 'maintenance-only' mode since July 2019.
Future development will only happen in 'mlr3'
(<https://mlr3.mlr-org.com>). Due to the focus on 'mlr3' there might be
uncaught bugs meanwhile in {mlr} - please consider switching.
> 
> # Example for iris task
> filters <- c("praznik_JMI", "anova.test", "variance", "DUMMY")
> fima <- makeFilterMat(iris.task, filters = filters)
> print(fima)
     value.praznik_JMI value.anova.test value.variance DUMMY
[1,]         0.6666667        0.3333333      0.6666667   0.5
[2,]         0.0000000        0.0000000      0.0000000   0.5
[3,]         0.3333333        1.0000000      1.0000000   0.5
[4,]         1.0000000        0.6666667      0.3333333   0.5
> 
> 
> 
> 
> cleanEx()

detaching ‘package:mlr’

> nameEx("makeObjective")
> ### * makeObjective
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: makeObjective
> ### Title: Create ecr Objective Function
> ### Aliases: makeObjective
> 
> ### ** Examples
> 
> library("mlr")
Warning message: 'mlr' is in 'maintenance-only' mode since July 2019.
Future development will only happen in 'mlr3'
(<https://mlr3.mlr-org.com>). Due to the focus on 'mlr3' there might be
uncaught bugs meanwhile in {mlr} - please consider switching.
> library("rpart")
> 
> task.whole <- bh.task
> rows.whole <- sample(nrow(getTaskData(task.whole)))
> task <- subsetTask(task.whole, rows.whole[1:250])
> task.hout <- subsetTask(task.whole, rows.whole[251])
> lrn <- makeLearner("regr.rpart")
> 
> ps.simple <- mlrCPO::pSS(
+   maxdepth: integer[1, 30],
+   minsplit: integer[2, 30],
+   cp: numeric[0.001, 0.999])
>   nRes <- function(n) {
+   makeResampleDesc("Subsample", split = 0.9, iters = n)
+ }
> 
> fitness.fun.mos <- makeObjective(lrn, task, ps.simple, nRes,
+   measure = mse,
+   holdout.data = task.hout, worst.measure = 100)
> 
> # extract param set from objective
> ps.obj  <- getParamSet(fitness.fun.mos)
> getParamIds(ps.obj) # automatically added parameter ' for selecting features
[1] "maxdepth"           "minsplit"           "cp"                
[4] "selector.selection"
> 
> exp <- sampleValue(ps.obj)
> res <- fitness.fun.mos(exp, fidelity = 2, holdout = FALSE)
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:rpart’, ‘package:mlr’

> nameEx("slickEcr")
> ### * slickEcr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: slickEcr
> ### Title: Modified Interface to ECR
> ### Aliases: slickEcr initEcr continueEcr
> 
> ### ** Examples
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  28.722 3.942 35.603 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')

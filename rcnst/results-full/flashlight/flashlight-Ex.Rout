
R Under development (unstable) (2021-03-04 r80063) -- "Unsuffered Consequences"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "flashlight"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('flashlight')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("add_shap")
> ### * add_shap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_shap
> ### Title: Add SHAP values to (multi-)flashlight
> ### Aliases: add_shap add_shap.default add_shap.flashlight
> ###   add_shap.multiflashlight
> 
> ### ** Examples
> 
> ## Not run: 
> ##D fit <- lm(Sepal.Length ~ . + Petal.Length:Species, data = iris)
> ##D x <- flashlight(model = fit, label = "lm", data = iris, y = "Sepal.Length")
> ##D x <- add_shap(x)
> ##D is.shap(x$shap)
> ##D plot(light_importance(x, type = "shap"))
> ##D plot(light_scatter(x, type = "shap", v = "Petal.Length"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("all_identical")
> ### * all_identical
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: all_identical
> ### Title: all_identical
> ### Aliases: all_identical
> 
> ### ** Examples
> 
> x <- list(a = 1, b = 2)
> y <- list(a = 1, b = 3)
> all_identical(list(x, y), `[[`, "a")
[1] TRUE
> all_identical(list(x, y), `[[`, "b")
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("auto_cut")
> ### * auto_cut
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: auto_cut
> ### Title: Discretizes a Vector
> ### Aliases: auto_cut
> 
> ### ** Examples
> 
> auto_cut(1:10, n_bins = 3)
$data
   value   level
1    2.5  [0, 5]
2    2.5  [0, 5]
3    2.5  [0, 5]
4    2.5  [0, 5]
5    2.5  [0, 5]
6    7.5 (5, 10]
7    7.5 (5, 10]
8    7.5 (5, 10]
9    7.5 (5, 10]
10   7.5 (5, 10]

$breaks
[1]  0  5 10

$bin_means
[1] 2.5 7.5

$bin_labels
[1] [0, 5]  (5, 10]
Levels: [0, 5] (5, 10]

> auto_cut(c(NA, 1:10), n_bins = 3)
$data
   value   level
1     NA    <NA>
2    2.5  [0, 5]
3    2.5  [0, 5]
4    2.5  [0, 5]
5    2.5  [0, 5]
6    2.5  [0, 5]
7    7.5 (5, 10]
8    7.5 (5, 10]
9    7.5 (5, 10]
10   7.5 (5, 10]
11   7.5 (5, 10]

$breaks
[1]  0  5 10

$bin_means
[1] 2.5 7.5  NA

$bin_labels
[1] [0, 5]  (5, 10] <NA>   
Levels: [0, 5] (5, 10]

> auto_cut(1:10, breaks = 3:4, n_bins = 3)
$data
   value  level
1     NA   <NA>
2     NA   <NA>
3    3.5 [3, 4]
4    3.5 [3, 4]
5     NA   <NA>
6     NA   <NA>
7     NA   <NA>
8     NA   <NA>
9     NA   <NA>
10    NA   <NA>

$breaks
[1] 3 4

$bin_means
[1] 3.5  NA

$bin_labels
[1] [3, 4] <NA>  
Levels: [3, 4]

> auto_cut(1:10, n_bins = 3, cut_type = "quantile")
$data
   value   level
1    2.5  [1, 4]
2    2.5  [1, 4]
3    2.5  [1, 4]
4    2.5  [1, 4]
5    5.5  (4, 7]
6    5.5  (4, 7]
7    5.5  (4, 7]
8    8.5 (7, 10]
9    8.5 (7, 10]
10   8.5 (7, 10]

$breaks
[1]  1  4  7 10

$bin_means
[1] 2.5 5.5 8.5

$bin_labels
[1] [1, 4]  (4, 7]  (7, 10]
Levels: [1, 4] (4, 7] (7, 10]

> auto_cut(LETTERS[4:1], n_bins = 2)
$data
  value level
1     D     D
2     C     C
3     B     B
4     A     A

$breaks
NULL

$bin_means
[1] "A" "B" "C" "D"

$bin_labels
[1] "A" "B" "C" "D"

> auto_cut(factor(LETTERS[1:4], LETTERS[4:1]), n_bins = 2)
$data
  value level
1     A     A
2     B     B
3     C     C
4     D     D

$breaks
NULL

$bin_means
[1] D C B A
Levels: D C B A

$bin_labels
[1] D C B A
Levels: D C B A

> auto_cut(990:1100, n_bins = 3, big.mark = "'", format = "fg")
$data
    value          level
1     975   [950, 1'000]
2     975   [950, 1'000]
3     975   [950, 1'000]
4     975   [950, 1'000]
5     975   [950, 1'000]
6     975   [950, 1'000]
7     975   [950, 1'000]
8     975   [950, 1'000]
9     975   [950, 1'000]
10    975   [950, 1'000]
11    975   [950, 1'000]
12   1025 (1'000, 1'050]
13   1025 (1'000, 1'050]
14   1025 (1'000, 1'050]
15   1025 (1'000, 1'050]
16   1025 (1'000, 1'050]
17   1025 (1'000, 1'050]
18   1025 (1'000, 1'050]
19   1025 (1'000, 1'050]
20   1025 (1'000, 1'050]
21   1025 (1'000, 1'050]
22   1025 (1'000, 1'050]
23   1025 (1'000, 1'050]
24   1025 (1'000, 1'050]
25   1025 (1'000, 1'050]
26   1025 (1'000, 1'050]
27   1025 (1'000, 1'050]
28   1025 (1'000, 1'050]
29   1025 (1'000, 1'050]
30   1025 (1'000, 1'050]
31   1025 (1'000, 1'050]
32   1025 (1'000, 1'050]
33   1025 (1'000, 1'050]
34   1025 (1'000, 1'050]
35   1025 (1'000, 1'050]
36   1025 (1'000, 1'050]
37   1025 (1'000, 1'050]
38   1025 (1'000, 1'050]
39   1025 (1'000, 1'050]
40   1025 (1'000, 1'050]
41   1025 (1'000, 1'050]
42   1025 (1'000, 1'050]
43   1025 (1'000, 1'050]
44   1025 (1'000, 1'050]
45   1025 (1'000, 1'050]
46   1025 (1'000, 1'050]
47   1025 (1'000, 1'050]
48   1025 (1'000, 1'050]
49   1025 (1'000, 1'050]
50   1025 (1'000, 1'050]
51   1025 (1'000, 1'050]
52   1025 (1'000, 1'050]
53   1025 (1'000, 1'050]
54   1025 (1'000, 1'050]
55   1025 (1'000, 1'050]
56   1025 (1'000, 1'050]
57   1025 (1'000, 1'050]
58   1025 (1'000, 1'050]
59   1025 (1'000, 1'050]
60   1025 (1'000, 1'050]
61   1025 (1'000, 1'050]
62   1075 (1'050, 1'100]
63   1075 (1'050, 1'100]
64   1075 (1'050, 1'100]
65   1075 (1'050, 1'100]
66   1075 (1'050, 1'100]
67   1075 (1'050, 1'100]
68   1075 (1'050, 1'100]
69   1075 (1'050, 1'100]
70   1075 (1'050, 1'100]
71   1075 (1'050, 1'100]
72   1075 (1'050, 1'100]
73   1075 (1'050, 1'100]
74   1075 (1'050, 1'100]
75   1075 (1'050, 1'100]
76   1075 (1'050, 1'100]
77   1075 (1'050, 1'100]
78   1075 (1'050, 1'100]
79   1075 (1'050, 1'100]
80   1075 (1'050, 1'100]
81   1075 (1'050, 1'100]
82   1075 (1'050, 1'100]
83   1075 (1'050, 1'100]
84   1075 (1'050, 1'100]
85   1075 (1'050, 1'100]
86   1075 (1'050, 1'100]
87   1075 (1'050, 1'100]
88   1075 (1'050, 1'100]
89   1075 (1'050, 1'100]
90   1075 (1'050, 1'100]
91   1075 (1'050, 1'100]
92   1075 (1'050, 1'100]
93   1075 (1'050, 1'100]
94   1075 (1'050, 1'100]
95   1075 (1'050, 1'100]
96   1075 (1'050, 1'100]
97   1075 (1'050, 1'100]
98   1075 (1'050, 1'100]
99   1075 (1'050, 1'100]
100  1075 (1'050, 1'100]
101  1075 (1'050, 1'100]
102  1075 (1'050, 1'100]
103  1075 (1'050, 1'100]
104  1075 (1'050, 1'100]
105  1075 (1'050, 1'100]
106  1075 (1'050, 1'100]
107  1075 (1'050, 1'100]
108  1075 (1'050, 1'100]
109  1075 (1'050, 1'100]
110  1075 (1'050, 1'100]
111  1075 (1'050, 1'100]

$breaks
[1]  950 1000 1050 1100

$bin_means
[1]  975 1025 1075

$bin_labels
[1] [950, 1'000]   (1'000, 1'050] (1'050, 1'100]
Levels: [950, 1'000] (1'000, 1'050] (1'050, 1'100]

> auto_cut(c(0.0001, 0.0002, 0.0003, 0.005), n_bins = 3, format = "fg")
$data
  value          level
1 0.001     [0, 0.002]
2 0.001     [0, 0.002]
3 0.001     [0, 0.002]
4 0.005 (0.004, 0.006]

$breaks
[1] 0.000 0.002 0.004 0.006

$bin_means
[1] 0.001 0.003 0.005

$bin_labels
[1] [0, 0.002]     (0.002, 0.004] (0.004, 0.006]
Levels: [0, 0.002] (0.002, 0.004] (0.004, 0.006]

> 
> 
> 
> cleanEx()
> nameEx("cut3")
> ### * cut3
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cut3
> ### Title: Modified cut
> ### Aliases: cut3
> 
> ### ** Examples
> 
> x <- 998:1001
> cut3(x, breaks = 2)
[1] (998, 999.5]  (998, 999.5]  (999.5, 1001] (999.5, 1001]
Levels: (998, 999.5] (999.5, 1001]
> cut3(x, breaks = 2, big.mark = "'", sep = ":")
[1] (998:999.5]   (998:999.5]   (999.5:1'001] (999.5:1'001]
Levels: (998:999.5] (999.5:1'001]
> 
> 
> 
> cleanEx()
> nameEx("flashlight")
> ### * flashlight
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: flashlight
> ### Title: Create or Update a flashlight
> ### Aliases: flashlight flashlight.default flashlight.flashlight
> 
> ### ** Examples
> 
> fit <- lm(Sepal.Length ~ ., data = iris)
> (fl <- flashlight(model = fit, data = iris, y = "Sepal.Length", label = "ols"))

Flashlight ols 

Model:			 Yes
y:			 Sepal.Length
w:			 No
by:			 No
data dim:		 150 5
predict_fct default:	 TRUE
linkinv default:	 FALSE
metrics:		 rmse
SHAP:			 No
> (fl_updated <- flashlight(fl, linkinv = exp))

Flashlight ols 

Model:			 Yes
y:			 Sepal.Length
w:			 No
by:			 No
data dim:		 150 5
predict_fct default:	 TRUE
linkinv default:	 FALSE
metrics:		 rmse
SHAP:			 No
> 
> 
> 
> cleanEx()
> nameEx("grouped_center")
> ### * grouped_center
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: grouped_center
> ### Title: Grouped, weighted mean centering
> ### Aliases: grouped_center
> 
> ### ** Examples
> 
> ir <- data.frame(iris, w = 1)
> mean(grouped_center(ir, "Sepal.Width"))
[1] 9.169893e-17
> rowsum(grouped_center(ir, "Sepal.Width", by = "Species"), ir$Species)
                    [,1]
setosa      3.108624e-15
versicolor -1.332268e-15
virginica  -1.021405e-14
> mean(grouped_center(ir, "Sepal.Width", w = "w"))
[1] -3.523903e-16
> rowsum(grouped_center(ir, "Sepal.Width", by = "Species", w = "w"), ir$Species)
                    [,1]
setosa      3.108624e-15
versicolor -1.332268e-15
virginica   1.199041e-14
> 
> 
> 
> cleanEx()
> nameEx("grouped_counts")
> ### * grouped_counts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: grouped_counts
> ### Title: Grouped count
> ### Aliases: grouped_counts
> 
> ### ** Examples
> 
> grouped_counts(iris)
    n
1 150
> grouped_counts(iris, by = "Species")
# A tibble: 3 x 2
  Species        n
* <fct>      <int>
1 setosa        50
2 versicolor    50
3 virginica     50
> grouped_counts(iris, w = "Petal.Length")
      n
1 563.7
> grouped_counts(iris, by = "Species", w = "Petal.Length")
# A tibble: 3 x 2
  Species        n
* <fct>      <dbl>
1 setosa      73.1
2 versicolor 213  
3 virginica  278. 
> 
> 
> 
> cleanEx()
> nameEx("grouped_stats")
> ### * grouped_stats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: grouped_stats
> ### Title: Grouped Weighted Means, Quartiles, or Variances
> ### Aliases: grouped_stats
> 
> ### ** Examples
> 
> grouped_stats(iris, "Sepal.Width")
  counts Sepal.Width
1    150    3.057333
> grouped_stats(iris, "Sepal.Width", stats = "quartiles")
  counts  q1 Sepal.Width  q3
1    150 2.8           3 3.3
> grouped_stats(iris, "Sepal.Width", stats = "variance")
  counts Sepal.Width
1    150   0.1899794
> grouped_stats(iris, "Sepal.Width", w = "Petal.Width", counts_weighted = TRUE)
  counts Sepal.Width
1  179.9    2.956587
> grouped_stats(iris, "Sepal.Width", by = "Species")
# A tibble: 3 x 3
  Species    counts Sepal.Width
* <fct>       <int>       <dbl>
1 setosa         50        3.43
2 versicolor     50        2.77
3 virginica      50        2.97
> 
> 
> 
> cleanEx()
> nameEx("grouped_weighted_mean")
> ### * grouped_weighted_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: grouped_weighted_mean
> ### Title: Fast Grouped Weighted Mean
> ### Aliases: grouped_weighted_mean
> 
> ### ** Examples
> 
> n <- 100
> data <- data.frame(x = rnorm(n), w = runif(n), group = factor(sample(1:3, n, TRUE)))
> grouped_weighted_mean(data, x = "x", w = "w", by = "group")
  group          x
1     1 -0.1222327
2     2  0.1757693
3     3  0.4799990
> 
> 
> 
> cleanEx()
> nameEx("is.flashlight")
> ### * is.flashlight
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.flashlight
> ### Title: Check functions for flashlight Classes
> ### Aliases: is.flashlight is.multiflashlight is.light is.light_performance
> ###   is.light_performance_multi is.light_importance
> ###   is.light_importance_multi is.light_breakdown is.light_breakdown_multi
> ###   is.light_ice is.light_ice_multi is.light_profile
> ###   is.light_profile_multi is.light_effects is.light_effects_multi
> ###   is.shap is.light_scatter is.light_scatter_multi
> ###   is.light_global_surrogate is.light_global_surrogate_multi
> 
> ### ** Examples
> 
> a <- flashlight(label = "a")
> is.flashlight(a)
[1] TRUE
> is.flashlight("a")
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("light_breakdown")
> ### * light_breakdown
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: light_breakdown
> ### Title: Variable Contribution Breakdown for Single Observation
> ### Aliases: light_breakdown light_breakdown.default
> ###   light_breakdown.flashlight light_breakdown.multiflashlight
> 
> ### ** Examples
> 
> fit <- lm(Sepal.Length ~ . + Petal.Length:Species, data = iris)
> fl <- flashlight(model = fit, label = "lm", data = iris, y = "Sepal.Length")
> light_breakdown(fl, new_obs = iris[1, ])

I am an object with class(es) light_breakdown, light, list 

data.frames (maximum 6 rows shown):

 data 
# A tibble: 6 x 6
   step variable     after before label description             
  <int> <chr>        <dbl>  <dbl> <chr> <chr>                   
1     0 baseline      5.84   5.84 lm    average in data: 5.8    
2     1 Petal.Length  3.86   5.84 lm    Petal.Length = 1.4: -2  
3     2 Species       4.53   3.86 lm    Species = setosa: +0.67 
4     3 Petal.Width   4.81   4.53 lm    Petal.Width = 0.2: +0.28
5     4 Sepal.Width   5.03   4.81 lm    Sepal.Width = 3.5: +0.22
6     5 prediction    5.03   5.03 lm    prediction: +0          
> 
> 
> 
> cleanEx()
> nameEx("light_check")
> ### * light_check
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: light_check
> ### Title: Check flashlight
> ### Aliases: light_check light_check.default light_check.flashlight
> ###   light_check.multiflashlight
> 
> ### ** Examples
> 
> fit <- lm(Sepal.Length ~ ., data = iris)
> fit_log <- lm(log(Sepal.Length) ~ ., data = iris)
> fl <- flashlight(fit, data = iris, y = "Sepal.Length", label = "ols")
> fl_log <- flashlight(fit_log,  y = "Sepal.Length", label = "ols", linkinv = exp)
> light_check(fl)
> light_check(fl_log)
> 
> 
> 
> cleanEx()
> nameEx("light_combine")
> ### * light_combine
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: light_combine
> ### Title: Combine Objects
> ### Aliases: light_combine light_combine.default light_combine.light
> ###   light_combine.list
> 
> ### ** Examples
> 
> fit_lm <- lm(Sepal.Length ~ ., data = iris)
> fit_glm <- glm(Sepal.Length ~ ., family = Gamma(link = "log"), data = iris)
> mod_lm <- flashlight(model = fit_lm, label = "lm", data = iris, y = "Sepal.Length")
> mod_glm <- flashlight(model = fit_glm, label = "glm", data = iris, y = "Sepal.Length",
+                       predict_function = function(object, newdata)
+                       predict(object, newdata, type = "response"))
> mods <- multiflashlight(list(mod_lm, mod_glm))
> perf_lm <- light_performance(mod_lm)
> perf_glm <- light_performance(mod_glm)
> manual_comb <- light_combine(list(perf_lm, perf_glm),
+   new_class = "light_performance_multi")
> auto_comb <- light_performance(mods)
> all.equal(manual_comb, auto_comb)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("light_effects")
> ### * light_effects
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: light_effects
> ### Title: Combination of Response, Predicted, Partial Dependence, and ALE
> ###   profiles.
> ### Aliases: light_effects light_effects.default light_effects.flashlight
> ###   light_effects.multiflashlight
> 
> ### ** Examples
> 
> fit <- lm(Sepal.Length ~ ., data = iris)
> fl <- flashlight(model = fit, label = "iris", data = iris, y = "Sepal.Length")
> light_effects(fl, v = "Species")

I am an object with class(es) light_effects, light, list 

data.frames (maximum 6 rows shown):

 response 
# A tibble: 3 x 5
  Species    counts value label type    
  <fct>       <int> <dbl> <chr> <fct>   
1 setosa         50  5.01 iris  response
2 versicolor     50  5.94 iris  response
3 virginica      50  6.59 iris  response

 predicted 
# A tibble: 3 x 4
  Species    value label type     
  <fct>      <dbl> <chr> <fct>    
1 setosa      5.01 iris  predicted
2 versicolor  5.94 iris  predicted
3 virginica   6.59 iris  predicted

 pd 
# A tibble: 3 x 4
  Species    value label type              
  <fct>      <dbl> <chr> <fct>             
1 setosa      6.43 iris  partial dependence
2 versicolor  5.70 iris  partial dependence
3 virginica   5.40 iris  partial dependence

 ale 
# A tibble: 3 x 4
  Species    value label type 
  <fct>      <dbl> <chr> <fct>
1 setosa      6.43 iris  ale  
2 versicolor  5.70 iris  ale  
3 virginica   5.40 iris  ale  
> 
> 
> 
> cleanEx()
> nameEx("light_global_surrogate")
> ### * light_global_surrogate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: light_global_surrogate
> ### Title: Global Surrogate Tree
> ### Aliases: light_global_surrogate light_global_surrogate.default
> ###   light_global_surrogate.flashlight
> ###   light_global_surrogate.multiflashlight
> 
> ### ** Examples
> 
> fit <- lm(Sepal.Length ~ ., data = iris)
> x <- flashlight(model = fit, label = "lm", data = iris)
> light_global_surrogate(x)

I am an object with class(es) light_global_surrogate, light, list 

data.frames (maximum 6 rows shown):

 data 
# A tibble: 1 x 3
  label r_squared tree     
  <chr>     <dbl> <I<list>>
1 lm        0.923 <rpart>  
> 
> 
> 
> 
> cleanEx()
> nameEx("light_ice")
> ### * light_ice
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: light_ice
> ### Title: Individual Conditional Expectation (ICE)
> ### Aliases: light_ice light_ice.default light_ice.flashlight
> ###   light_ice.multiflashlight
> 
> ### ** Examples
> 
> fit <- lm(Sepal.Length ~ ., data = iris)
> fl <- flashlight(model = fit, label = "lm", data = iris, y = "Sepal.Length")
> light_ice(fl, v = "Species")

I am an object with class(es) light_ice, light, list 

data.frames (maximum 6 rows shown):

 data 
# A tibble: 6 x 4
     id Species    value label
  <int> <fct>      <dbl> <chr>
1    68 setosa      6.59 lm   
2    68 versicolor  5.87 lm   
3    68 virginica   5.57 lm   
4   129 setosa      7.54 lm   
5   129 versicolor  6.82 lm   
6   129 virginica   6.52 lm   
> 
> 
> 
> cleanEx()
> nameEx("light_importance")
> ### * light_importance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: light_importance
> ### Title: Variable Importance
> ### Aliases: light_importance light_importance.default
> ###   light_importance.flashlight light_importance.multiflashlight
> 
> ### ** Examples
> 
> fit <- lm(Sepal.Length ~ Petal.Length, data = iris)
> fl <- flashlight(model = fit, label = "full", data = iris, y = "Sepal.Length")
> light_importance(fl)

I am an object with class(es) light_importance, light, list 

data.frames (maximum 6 rows shown):

 data 
# A tibble: 4 x 5
  label metric variable     value error
  <chr> <fct>  <chr>        <dbl> <lgl>
1 full  rmse   Sepal.Width  0     NA   
2 full  rmse   Petal.Length 0.694 NA   
3 full  rmse   Petal.Width  0     NA   
4 full  rmse   Species      0     NA   
> 
> 
> 
> cleanEx()
> nameEx("light_interaction")
> ### * light_interaction
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: light_interaction
> ### Title: Interaction Strength
> ### Aliases: light_interaction light_interaction.default
> ###   light_interaction.flashlight light_interaction.multiflashlight
> 
> ### ** Examples
> 
> fit_additive <- lm(Sepal.Length ~ Petal.Length + Petal.Width + Species, data = iris)
> fit_nonadditive <- lm(Sepal.Length ~ Petal.Length * Petal.Width + Species, data = iris)
> fl_additive <- flashlight(model = fit_additive, label = "additive")
> fl_nonadditive <- flashlight(model = fit_nonadditive, label = "nonadditive")
> fls <- multiflashlight(list(fl_additive, fl_nonadditive), data = iris, y = "Sepal.Length")
> plot(st <- light_interaction(fls), fill = "darkgreen")
ERROR: modification of compiler constant of type integer, length 1
ERROR: the modified value of the constant is:
[1] 4
ERROR: the original value of the constant is:
[1] 1
ERROR: the modified constant is at index 12
ERROR: the modified constant is in this function body:
{
    cols <- enquo(cols)
    if (.top_level) {
        mask$set_current_group(1L)
    }
    else {
        cols <- quo_set_env(cols, data_mask_top(quo_get_env(cols), 
            recursive = FALSE, inherit = TRUE))
    }
    vars <- tidyselect::eval_select(cols, data = mask$across_cols())
    vars <- names(vars)
    if (is.null(fns)) {
        if (!is.null(names)) {
            glue_mask <- across_glue_mask(.caller_env, .col = vars, 
                .fn = "1")
            names <- vec_as_names(glue(names, .envir = glue_mask), 
                repair = "check_unique")
        }
        value <- list(vars = vars, fns = fns, names = names)
        return(value)
    }
    if (is.function(fns) || is_formula(fns)) {
        names <- names %||% "{.col}"
        fns <- list(`1` = fns)
    }
    else {
        names <- names %||% "{.col}_{.fn}"
    }
    if (!is.list(fns)) {
        abort(c("Problem with `across()` input `.fns`.", i = "Input `.fns` must be NULL, a function, a formula, or a list of functions/formulas."))
    }
    expr_protect <- function(x) {
        call2(quote, x)
    }
    fns <- map(fns, function(fn) {
        if (is_formula(fn) && .top_level) {
            f_rhs(fn) <- call2(quote(rlang::eval_tidy), expr_protect(f_rhs(fn)), 
                data = mask$get_rlang_mask())
        }
        fn <- as_function(fn)
        fn
    })
    if (is.null(names(fns))) {
        names_fns <- seq_along(fns)
    }
    else {
        names_fns <- names(fns)
        empties <- which(names_fns == "")
        if (length(empties)) {
            names_fns[empties] <- empties
        }
    }
    glue_mask <- glue_mask <- across_glue_mask(.caller_env, .col = rep(vars, 
        each = length(fns)), .fn = rep(names_fns, length(vars)))
    names <- vec_as_names(glue(names, .envir = glue_mask), repair = "check_unique")
    list(vars = vars, fns = fns, names = names)
}
Function across_setup_impl in namespace dplyr has this body.
Fatal error: compiler constants were modified!


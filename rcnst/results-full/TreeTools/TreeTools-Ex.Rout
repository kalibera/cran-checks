
R Under development (unstable) (2023-04-27 r84331) -- "Unsuffered Consequences"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "TreeTools"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('TreeTools')
Loading required package: ape
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("AddTip")
> ### * AddTip
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AddTip
> ### Title: Add a tip to a phylogenetic tree
> ### Aliases: AddTip AddTipEverywhere
> ### Keywords: tree
> 
> ### ** Examples
> 
> plot(tree <- BalancedTree(10))
> ape::nodelabels()
> ape::nodelabels(15, 15, bg="green")
> 
> plot(AddTip(tree, 15, "NEW_TIP"))
> 
> oldPar <- par(mfrow = c(2, 4), mar = rep(0.3, 4), cex = 0.9)
> 
> backbone <- BalancedTree(4)
> # Treating the position of the root as instructive:
> additions <- AddTipEverywhere(backbone, includeRoot = TRUE)
> xx <- lapply(additions, plot)
> 
> par(mfrow=c(2, 3))
> # Don't treat root edges as distinct:
> additions <- AddTipEverywhere(backbone, includeRoot = FALSE)
> xx <- lapply(additions, plot)
> 
> par(oldPar)
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("AncestorEdge")
> ### * AncestorEdge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AncestorEdge
> ### Title: Ancestral edge
> ### Aliases: AncestorEdge
> ### Keywords: internal
> 
> ### ** Examples
> 
> tree <- BalancedTree(6)
> parent <- tree$edge[, 1]
> child <- tree$edge[, 2]
> plot(tree)
> ape::edgelabels()
> AncestorEdge(5, parent, child)
 [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
> which(AncestorEdge(5, parent, child))
[1] 1
> 
> 
> 
> 
> cleanEx()
> nameEx("ArtificialExtinction")
> ### * ArtificialExtinction
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ArtificialExtinction
> ### Title: Artificial Extinction
> ### Aliases: ArtificialExtinction ArtificialExtinction.matrix
> ###   ArtificialExtinction.phyDat ArtEx
> 
> ### ** Examples
> 
> set.seed(1)
> dataset <- matrix(c(sample(0:2, 4 * 8, TRUE),
+                     "0", "0", rep("?", 6)), nrow = 5,
+                     dimnames = list(c(LETTERS[1:4], "FOSSIL"),
+                                     paste("char", 1:8)), byrow = TRUE)
> artex <- ArtificialExtinction(dataset, c("A", "C"), "FOSSIL")
> 
> 
> 
> cleanEx()
> nameEx("CladeSizes")
> ### * CladeSizes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CladeSizes
> ### Title: Clade sizes
> ### Aliases: CladeSizes
> 
> ### ** Examples
> 
> tree <- BalancedTree(6)
> plot(tree)
> ape::nodelabels()
> CladeSizes(tree, nodes = c(1, 8, 9))
[1] 1 3 2
> 
> 
> 
> 
> cleanEx()
> nameEx("ClusterTable-methods")
> ### * ClusterTable-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ClusterTable-methods
> ### Title: S3 methods for 'ClusterTable' objects
> ### Aliases: ClusterTable-methods as.matrix.ClusterTable print.ClusterTable
> ###   summary.ClusterTable
> 
> ### ** Examples
> 
> clustab <- as.ClusterTable(TreeTools::BalancedTree(6))
> as.matrix(clustab)
     [,1] [,2]
[1,]    0    0
[2,]    2    3
[3,]    1    3
[4,]    1    4
[5,]    1    5
[6,]    1    6
> print(clustab)
ClusterTable on 6 leaves: t1 .. t6> summary(clustab)
ClusterTable on 6 leaves:
 123456
 .**...
 ***...
 ****..
 *****.
 ******
 1: t6  2: t5  3: t4  4: t3  5: t2  6: t1 
> 
> 
> 
> cleanEx()
> nameEx("ClusterTable")
> ### * ClusterTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ClusterTable
> ### Title: Convert phylogenetic tree to 'ClusterTable'
> ### Aliases: ClusterTable as.ClusterTable as.ClusterTable.phylo
> ###   as.ClusterTable.list as.ClusterTable.multiPhylo
> 
> ### ** Examples
> 
> tree1 <- ape::read.tree(text = "(A, (B, (C, (D, E))));");
> tree2 <- ape::read.tree(text = "(A, (B, (D, (C, E))));");
> ct1 <- as.ClusterTable(tree1)
> summary(ct1)
ClusterTable on 5 leaves:
 12345
 **...
 ***..
 ****.
 *****
 1: E  2: D  3: C  4: B  5: A 
> as.matrix(ct1)
     [,1] [,2]
[1,]    0    0
[2,]    1    2
[3,]    1    3
[4,]    1    4
[5,]    1    5
> 
> # Tip label order must match ct1 to allow comparison
> ct2 <- as.ClusterTable(tree2, tipLabels = LETTERS[1:5])
> 
> 
> 
> cleanEx()
> nameEx("CollapseNode")
> ### * CollapseNode
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CollapseNode
> ### Title: Collapse nodes on a phylogenetic tree
> ### Aliases: CollapseNode CollapseNode.phylo CollapseEdge
> 
> ### ** Examples
> 
> oldPar <- par(mfrow = c(3, 1), mar = rep(0.5, 4))
> 
> tree <- as.phylo(898, 7)
> tree$edge.length <- 11:22
> plot(tree)
> nodelabels()
> edgelabels()
> edgelabels(round(tree$edge.length, 2),
+            cex = 0.6, frame = "n", adj = c(1, -1))
> 
> # Collapse by node number
> newTree <- CollapseNode(tree, c(12, 13))
> plot(newTree)
> nodelabels()
> edgelabels(round(newTree$edge.length, 2),
+            cex = 0.6, frame = "n", adj = c(1, -1))
> 
> # Collapse by edge number
> newTree <- CollapseEdge(tree, c(2, 4))
> plot(newTree)
> 
> par(oldPar)
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("CompatibleSplits")
> ### * CompatibleSplits
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CompatibleSplits
> ### Title: Which splits are compatible?
> ### Aliases: CompatibleSplits .CompatibleSplit .CompatibleRaws
> ### Keywords: internal
> 
> ### ** Examples
> 
> splits <- as.Splits(BalancedTree(8))
> splits2 <- as.Splits(PectinateTree(8))
> 
> summary(splits)
5 bipartition splits dividing 8 tips, t1 .. t8
     12345678
 10  ****....
 11  **......
 12  ..**....
 14  ....**..
 15  ......**

 Tip 1: t1	 Tip 2: t2	 Tip 3: t3	 Tip 4: t4	 Tip 5: t5	
 Tip 6: t6	 Tip 7: t7	 Tip 8: t8	> summary(splits2)
5 bipartition splits dividing 8 tips, t1 .. t8
     12345678
 11  ..******
 12  ...*****
 13  ....****
 14  .....***
 15  ......**

 Tip 1: t1	 Tip 2: t2	 Tip 3: t3	 Tip 4: t4	 Tip 5: t5	
 Tip 6: t6	 Tip 7: t7	 Tip 8: t8	> 
> CompatibleSplits(splits, splits2)
     11    12   13    14   15
10 TRUE  TRUE TRUE  TRUE TRUE
11 TRUE  TRUE TRUE  TRUE TRUE
12 TRUE FALSE TRUE  TRUE TRUE
14 TRUE  TRUE TRUE FALSE TRUE
15 TRUE  TRUE TRUE  TRUE TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("Consensus")
> ### * Consensus
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Consensus
> ### Title: Construct consensus trees
> ### Aliases: Consensus
> 
> ### ** Examples
> 
> Consensus(as.phylo(0:2, 8))

Phylogenetic tree with 8 tips and 6 internal nodes.

Tip labels:
  t1, t2, t3, t4, t5, t6, ...

Rooted; no branch lengths.
> 
> 
> 
> cleanEx()
> nameEx("ConsensusWithout")
> ### * ConsensusWithout
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ConsensusWithout
> ### Title: Reduced consensus, omitting specified taxa
> ### Aliases: ConsensusWithout ConsensusWithout.phylo
> ###   ConsensusWithout.multiPhylo ConsensusWithout.list MarkMissing
> 
> ### ** Examples
> 
> oldPar <- par(mfrow = c(1, 2), mar = rep(0.5, 4))
> 
> # Two trees differing only in placement of tip 2:
> trees <- as.phylo(c(0, 53), 6)
> plot(trees[[1]])
> plot(trees[[2]])
> 
> # Strict consensus (left panel) lacks resolution:
> plot(ape::consensus(trees))
> 
> # But omitting tip two (right panel) reveals shared structure in common:
> plot(ConsensusWithout(trees, "t2"))
> MarkMissing("t2")
> 
> par(oldPar)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("ConstrainedNJ")
> ### * ConstrainedNJ
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ConstrainedNJ
> ### Title: Constrained neighbour-joining tree
> ### Aliases: ConstrainedNJ
> 
> ### ** Examples
> 
> dataset <- MatrixToPhyDat(matrix(
+   c(0, 1, 1, 1, 0, 1,
+     0, 1, 1, 0, 0, 1), ncol = 2,
+   dimnames = list(letters[1:6], NULL)))
> constraint <- MatrixToPhyDat(
+   c(a = 0, b = 0, c = 0, d = 0, e = 1, f = 1))
> plot(ConstrainedNJ(dataset, constraint))
> 
> 
> 
> cleanEx()
> nameEx("DoubleFactorial")
> ### * DoubleFactorial
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DoubleFactorial
> ### Title: Double factorial
> ### Aliases: DoubleFactorial DoubleFactorial64 LnDoubleFactorial
> ###   Log2DoubleFactorial LogDoubleFactorial LnDoubleFactorial.int
> ###   LogDoubleFactorial.int
> 
> ### ** Examples
> 
> DoubleFactorial (-4:0) # Return 1 if n < 2
[1] 1 1 1 1 1
> DoubleFactorial (2) # 2
[1] 2
> DoubleFactorial (5) # 1 * 3 * 5
[1] 15
> exp(LnDoubleFactorial.int (8)) # log(2 * 4 * 6 * 8)
[1] 384
> DoubleFactorial64(31)
integer64
[1] 191898783962510625
> 
> 
> 
> cleanEx()
> nameEx("DropTip")
> ### * DropTip
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DropTip
> ### Title: Drop leaves from tree
> ### Aliases: DropTip DropTip.phylo DropTip.Splits DropTipPhylo
> ###   DropTip.multiPhylo DropTip.list DropTip.NULL KeepTipPreorder
> ###   KeepTipPostorder KeepTip
> 
> ### ** Examples
> 
> tree <- BalancedTree(9)
> plot(tree)
> plot(DropTip(tree, c("t5", "t6")))
> 
> unrooted <- UnrootTree(tree)
> plot(unrooted)
> plot(DropTip(unrooted, 4:5))
> 
> summary(DropTip(as.Splits(tree), 4:5))
4 bipartition splits dividing 7 tips, t1 .. t9
     1234567
 12  ***....
 13  **.....
 16  ...**..
 17  .....**

 Tip 1: t1	 Tip 2: t2	 Tip 3: t3	 Tip 4: t6	 Tip 5: t7	
 Tip 6: t8	 Tip 7: t9	> 
> 
> 
> cleanEx()
> nameEx("EdgeAncestry")
> ### * EdgeAncestry
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EdgeAncestry
> ### Title: Ancestors of an edge
> ### Aliases: EdgeAncestry
> 
> ### ** Examples
> 
> tree <- PectinateTree(6)
> plot(tree)
> ape::edgelabels()
> parent <- tree$edge[, 1]
> child <- tree$edge[, 2]
> EdgeAncestry(7, parent, child)
 [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE
> which(EdgeAncestry(7, parent, child, stopAt = 4))
[1] 4 6
> 
> 
> 
> 
> cleanEx()
> nameEx("EdgeDistances")
> ### * EdgeDistances
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EdgeDistances
> ### Title: Distance between edges
> ### Aliases: EdgeDistances
> 
> ### ** Examples
> 
> 
> tree <- BalancedTree(5)
> plot(tree)
> ape::edgelabels()
> 
> EdgeDistances(tree)
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
[1,]    0    1    2    2    1    0    1    1
[2,]    1    0    1    1    1    1    2    2
[3,]    2    1    0    1    2    2    3    3
[4,]    2    1    1    0    2    2    3    3
[5,]    1    1    2    2    0    1    2    2
[6,]    0    1    2    2    1    0    1    1
[7,]    1    2    3    3    2    1    0    1
[8,]    1    2    3    3    2    1    1    0
> 
> 
> 
> 
> cleanEx()
> nameEx("EndSentence")
> ### * EndSentence
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EndSentence
> ### Title: Add full stop to end of a sentence
> ### Aliases: EndSentence
> 
> ### ** Examples
> 
> EndSentence("Hello World") # "Hello World."
[1] "Hello World."
> 
> 
> 
> cleanEx()
> nameEx("EnforceOutgroup")
> ### * EnforceOutgroup
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EnforceOutgroup
> ### Title: Generate a tree with a specified outgroup
> ### Aliases: EnforceOutgroup EnforceOutgroup.phylo
> ###   EnforceOutgroup.character
> 
> ### ** Examples
> 
> tree <- EnforceOutgroup(letters[1:9], letters[1:3])
> plot(tree)
> 
> 
> 
> 
> cleanEx()
> nameEx("ExtractTaxa")
> ### * ExtractTaxa
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ExtractTaxa
> ### Title: Extract taxa from a matrix block
> ### Aliases: ExtractTaxa NexusTokens
> ### Keywords: internal
> 
> ### ** Examples
> 
> fileName <- paste0(system.file(package = "TreeTools"),
+                    "/extdata/input/dataset.nex")
> matrixLines <- readLines(fileName)[6:11]
> ExtractTaxa(matrixLines)
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]
____1 "'"  "C"  "h"  "a"  "r"  "a"  "c"  "t"  "e"  "r"   "o"   "n"   "e"  
____2 "C"  "h"  "a"  "r"  "a"  "c"  "t"  "e"  "r"  "_"   "t"   "w"   "o"  
____3 "'"  "l"  "o"  "t"  "s"  "-"  "o"  "f"  "-"  "p"   "u"   "n"   "c"  
____4 "C"  "h"  "a"  "r"  "a"  "c"  "t"  "e"  "r"  "_"   "n"   "/"   "a"  
____5 "C"  "h"  "a"  "r"  "a"  "c"  "t"  "e"  "r"  "_"   "5"   "/"   "s"  
____6 "C"  "h"  "a"  "r"  "a"  "c"  "t"  "e"  "r"  "_"   "6"   "/"   NA   
      [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25]
____1 "'"   "/"   "a"   "b"   "s"   "e"   "n"   "t"   "p"   "r"   "e"   "s"  
____2 "/"   "a"   "b"   "s"   "e"   "n"   "t"   "p"   "r"   "e"   "s"   "e"  
____3 "t"   "u"   "a"   "t"   "i"   "o"   "n"   ","   "a"   "n"   "d"   "\"" 
____4 "_"   "l"   "o"   "n"   "g"   "_"   "d"   "e"   "s"   "c"   "r"   "i"  
____5 "i"   "m"   "p"   "l"   "e"   "m"   "o"   "r"   "e"   "_"   "c"   "o"  
____6 NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA   
      [,26] [,27] [,28] [,29]
____1 "e"   "n"   "t"   ","  
____2 "n"   "t"   ","   NA   
____3 "s"   "o"   "o"   "n"  
____4 "p"   "t"   "i"   "o"  
____5 "m"   "p"   "l"   "e"  
____6 NA    NA    NA    NA   
> 
> NexusTokens("01[01]-?")
     [,1] [,2] [,3]   [,4] [,5]
[1,] "0"  "1"  "[01]" "-"  "?" 
> 
> 
> 
> cleanEx()
> nameEx("GenerateTree")
> ### * GenerateTree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GenerateTree
> ### Title: Generate pectinate, balanced or random trees
> ### Aliases: GenerateTree RandomTree PectinateTree BalancedTree StarTree
> 
> ### ** Examples
> 
> RandomTree(LETTERS[1:10])

Phylogenetic tree with 10 tips and 8 internal nodes.

Tip labels:
  A, B, C, D, E, F, ...

Unrooted; no branch lengths.
> 
> data("Lobo")
> RandomTree(Lobo.phy)

Phylogenetic tree with 48 tips and 46 internal nodes.

Tip labels:
  Tubiluchus_Priapulida, Cricocosmia, Aysheaia, Siberion, Onychodictyon_ferox, Onychodictyon_gracilis, ...

Unrooted; no branch lengths.
> 
> plot(PectinateTree(LETTERS[1:10]))
> 
> plot(BalancedTree(LETTERS[1:10]))
> plot(StarTree(LETTERS[1:10]))
> 
> 
> 
> 
> cleanEx()
> nameEx("Hamming")
> ### * Hamming
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Hamming
> ### Title: Hamming distance between taxa in a phylogenetic dataset
> ### Aliases: Hamming
> 
> ### ** Examples
> 
> tokens <- matrix(c(0, 0, "0", 0, "?",
+                    0, 0, "1", 0, 1,
+                    0, 0, "1", 0, 1,
+                    0, 0, "2", 0, 1,
+                    1, 1, "-", "?", 0,
+                    1, 1, "2", 1, "{01}"),
+                    nrow = 6, ncol = 5, byrow = TRUE,
+                    dimnames = list(
+                      paste0("Taxon_", LETTERS[1:6]),
+                      paste0("Char_", 1:5)))
> 
> dataset <- MatrixToPhyDat(tokens)
> Hamming(dataset)
        Taxon_A Taxon_B Taxon_C Taxon_D Taxon_E
Taxon_B    0.25                                
Taxon_C    0.25    0.00                        
Taxon_D    0.25    0.20    0.20                
Taxon_E    1.00    1.00    1.00    1.00        
Taxon_F    1.00    0.80    0.80    0.60    0.00
> 
> 
> 
> cleanEx()
> nameEx("ImposeConstraint")
> ### * ImposeConstraint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ImposeConstraint
> ### Title: Force a tree to match a constraint
> ### Aliases: ImposeConstraint AddUnconstrained
> 
> ### ** Examples
> 
> tips <- letters[1:9]
> tree <- as.phylo(1, 9, tips)
> plot(tree)
> 
> constraint <- StringToPhyDat("0000?1111 000111111 0000??110", tips, FALSE)
> plot(ImposeConstraint(tree, constraint))
> 
> 
> 
> cleanEx()
> nameEx("KeptPaths")
> ### * KeptPaths
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: KeptPaths
> ### Title: Paths present in reduced tree
> ### Aliases: KeptPaths KeptPaths.data.frame KeptPaths.matrix
> 
> ### ** Examples
> 
> master <- BalancedTree(9)
> paths <- PathLengths(master)
> keptTips <- c(1, 5, 7, 9)
> keptVerts <- KeptVerts(master, keptTips)
> KeptPaths(paths, keptVerts)
 [1]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[13] FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE
[25] FALSE FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE
[37] FALSE  TRUE FALSE FALSE FALSE FALSE
> paths[KeptPaths(paths, keptVerts, all = FALSE), ]
   start end length
2     11   1      3
16    11   5      2
22    15   7      2
28    15   9      2
30    10  11      1
38    10  15      1
> 
> 
> 
> cleanEx()
> nameEx("KeptVerts")
> ### * KeptVerts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: KeptVerts
> ### Title: Identify vertices retained when leaves are dropped
> ### Aliases: KeptVerts KeptVerts.phylo KeptVerts.numeric
> 
> ### ** Examples
> 
> master <- BalancedTree(12)
> master <- Preorder(master) # Nodes must be listed in Preorder sequence
> plot(master)
> nodelabels()
> 
> allTips <- master[["tip.label"]]
> keptTips <- sample(allTips, 8)
> plot(KeepTip(master, keptTips))
> kept <- KeptVerts(master, allTips %in% keptTips)
> 
> map <- which(kept)
> # Node `i` in the reduced tree corresponds to node `map[i]` in the original.
> 
> 
> 
> cleanEx()
> nameEx("LabelSplits")
> ### * LabelSplits
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LabelSplits
> ### Title: Label splits
> ### Aliases: LabelSplits
> 
> ### ** Examples
> 
> tree <- BalancedTree(LETTERS[1:5])
> splits <- as.Splits(tree)
> plot(tree)
> LabelSplits(tree, as.character(splits), frame = "none", pos = 3L)
> LabelSplits(tree, TipsInSplits(splits), unit = " tips", frame = "none",
+             pos = 1L)
> 
> # An example forest of 100 trees, some identical
> forest <- as.phylo(c(1, rep(10, 79), rep(100, 15), rep(1000, 5)), nTip = 9)
> 
> # Generate an 80% consensus tree
> cons <- ape::consensus(forest, p = 0.8)
> plot(cons)
> 
> # Calculate split frequencies
> splitFreqs <- SplitFrequency(cons, forest)
> 
> # Optionally, colour edges by corresponding frequency.
> # Note that not all edges are associated with a unique split
> # (and two root edges may be associated with one split - not handled here)
> edgeSupport <- rep(1, nrow(cons$edge)) # Initialize trivial splits to 1
> childNode <- cons$edge[, 2]
> edgeSupport[match(names(splitFreqs), childNode)] <- splitFreqs / 100
> 
> plot(cons, edge.col = SupportColour(edgeSupport), edge.width = 3)
> 
> # Annotate nodes by frequency 
> LabelSplits(cons, splitFreqs, unit = "%",
+             col = SupportColor(splitFreqs / 100),
+             frame = "none", pos = 3L)
> 
> 
> 
> 
> cleanEx()
> nameEx("LeafLabelInterchange")
> ### * LeafLabelInterchange
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LeafLabelInterchange
> ### Title: Leaf label interchange
> ### Aliases: LeafLabelInterchange
> 
> ### ** Examples
> 
> tree <- PectinateTree(8)
> plot(LeafLabelInterchange(tree, 3L))
> 
> 
> 
> 
> cleanEx()
> nameEx("ListAncestors")
> ### * ListAncestors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ListAncestors
> ### Title: List ancestors
> ### Aliases: ListAncestors AllAncestors
> 
> ### ** Examples
> 
> tree <- PectinateTree(5)
> edge <- tree[["edge"]]
> 
> # Identify desired node with:
> plot(tree)
> nodelabels()
> tiplabels()
> 
> # Ancestors of specific nodes:
> ListAncestors(edge[, 1], edge[, 2], 4L)
[1] 9 8 7 6
> ListAncestors(edge[, 1], edge[, 2], 8L)
[1] 7 6
> 
> # Ancestors of each node, if tree numbering system is uncertain:
> lapply(seq_len(max(edge)), ListAncestors,
+        parent = edge[, 1], child = edge[, 2])
[[1]]
[1] 6

[[2]]
[1] 7 6

[[3]]
[1] 8 7 6

[[4]]
[1] 9 8 7 6

[[5]]
[1] 9 8 7 6

[[6]]
integer(0)

[[7]]
[1] 6

[[8]]
[1] 7 6

[[9]]
[1] 8 7 6

> 
> # Ancestors of each node, if tree is in preorder:
> ListAncestors(edge[, 1], edge[, 2])
[[1]]
[1] 6

[[2]]
[1] 7 6

[[3]]
[1] 8 7 6

[[4]]
[1] 9 8 7 6

[[5]]
[1] 9 8 7 6

[[6]]
integer(0)

[[7]]
[1] 6

[[8]]
[1] 7 6

[[9]]
[1] 8 7 6

> 
> # Alias:
> AllAncestors(edge[, 1], edge[, 2])
[[1]]
[1] 6

[[2]]
[1] 7 6

[[3]]
[1] 8 7 6

[[4]]
[1] 9 8 7 6

[[5]]
[1] 9 8 7 6

[[6]]
integer(0)

[[7]]
[1] 6

[[8]]
[1] 7 6

[[9]]
[1] 8 7 6

> 
> 
> 
> 
> cleanEx()
> nameEx("Lobo.data")
> ### * Lobo.data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Lobo.data
> ### Title: Data from Zhang et al. 2016
> ### Aliases: Lobo.data Lobo.phy
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data("Lobo", package = "TreeTools")
> Lobo.data
$Tubiluchus_Priapulida
  [1] "0" "0" "-" "-" "-" "-" "0" "0" "0" "0" "0" "-" "0" "1" "0" "0" "1" "1"
 [19] "1" "1" "0" "0" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-"
 [37] "-" "-" "-" "0" "-" "-" "-" "0" "0" "0" "1" "-" "1" "0" "0" "0" "-" "-"
 [55] "-" "-" "-" "-" "0" "-" "-" "-" "-" "1" "0" "0" "-" "-" "-" "-" "-" "-"
 [73] "-" "-" "-" "-" "-" "0" "-" "0" "-" "-" "0" "0" "-" "0" "0" "-" "-" "-"
 [91] "-" "0" "0" "-" "-" "0" "0" "0" "-" "-" "0" "0" "-" "-" "1" "1" "1" "-"
[109] "-" "0" "0" "0" "1" "1" "1"

$Cricocosmia
  [1] "0" "0" "-" "-" "-" "-" "0" "0" "0" "0" "0" "-" "0" "1" "0" "0" "1" "1"
 [19] "1" "?" "0" "0" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-"
 [37] "-" "-" "-" "0" "-" "-" "-" "0" "0" "0" "1" "-" "1" "0" "0" "1" "1" "0"
 [55] "0" "-" "1" "0" "0" "1" "-" "0" "0" "1" "0" "0" "-" "-" "-" "-" "-" "-"
 [73] "-" "-" "-" "-" "-" "0" "-" "0" "-" "-" "0" "0" "-" "0" "0" "-" "-" "-"
 [91] "-" "0" "0" "-" "-" "0" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "0" "?" "?" "?"

$Aysheaia
  [1] "1" "0" "-" "-" "-" "-" "0" "0" "0" "0" "0" "-" "0" "1" "0" "0" "?" "0"
 [19] "?" "?" "?" "0" "-" "-" "0" "1" "0" "-" "0" "0" "-" "0" "-" "0" "-" "0"
 [37] "0" "-" "-" "1" "0" "-" "1" "0" "0" "0" "1" "1" "1" "0" "0" "0" "-" "-"
 [55] "-" "-" "-" "-" "0" "-" "-" "-" "-" "1" "0" "0" "0" "-" "0" "-" "-" "0"
 [73] "1" "0" "0" "0" "0" "0" "1" "0" "4" "0" "0" "0" "-" "0" "0" "-" "-" "-"
 [91] "0" "0" "1" "1" "-" "1" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "0" "?" "?" "?"

$Siberion
  [1] "1" "0" "-" "-" "-" "-" "0" "0" "0" "0" "0" "-" "0" "1" "0" "0" "?" "0"
 [19] "?" "?" "?" "0" "-" "-" "0" "1" "0" "-" "0" "0" "-" "0" "-" "0" "-" "0"
 [37] "1" "0" "-" "?" "?" "?" "?" "0" "0" "0" "1" "1" "?" "0" "0" "0" "-" "-"
 [55] "-" "-" "-" "-" "?" "-" "-" "-" "-" "1" "?" "0" "0" "-" "0" "-" "-" "0"
 [73] "?" "?" "?" "0" "0" "?" "?" "?" "?" "?" "?" "0" "-" "0" "0" "-" "-" "-"
 [91] "?" "0" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Onychodictyon_ferox
  [1] "1" "0" "-" "-" "-" "-" "0" "0" "0" "0" "0" "-" "0" "?" "?" "?" "?" "0"
 [19] "?" "?" "?" "1" "0" "0" "0" "1" "0" "-" "0" "0" "-" "0" "-" "0" "-" "0"
 [37] "0" "-" "-" "1" "1" "1" "0" "0" "0" "0" "1" "1" "1" "1" "0" "1" "1" "0"
 [55] "1" "0" "1" "0" "?" "1" "-" "0" "0" "1" "0" "0" "0" "-" "0" "-" "-" "0"
 [73] "1" "1" "-" "0" "0" "0" "1" "0" "1" "1" "0" "0" "-" "0" "0" "-" "-" "-"
 [91] "0" "0" "1" "1" "-" "1" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Onychodictyon_gracilis
  [1] "1" "0" "-" "-" "-" "-" "0" "?" "?" "0" "0" "-" "0" "?" "?" "?" "?" "0"
 [19] "?" "?" "?" "?" "?" "?" "0" "?" "?" "?" "0" "?" "-" "?" "-" "0" "-" "?"
 [37] "?" "?" "?" "?" "?" "?" "?" "0" "0" "0" "1" "1" "0" "?" "0" "1" "1" "0"
 [55] "?" "?" "1" "?" "?" "1" "-" "0" "0" "1" "0" "?" "0" "-" "0" "-" "-" "0"
 [73] "?" "?" "?" "0" "0" "0" "1" "0" "1" "?" "0" "0" "-" "0" "0" "?" "?" "-"
 [91] "1" "0" "1" "1" "-" "0" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Diania
  [1] "1" "0" "-" "-" "-" "-" "0" "0" "0" "0" "0" "-" "?" "?" "?" "?" "?" "0"
 [19] "?" "?" "?" "0" "-" "-" "0" "0" "-" "-" "0" "0" "-" "0" "-" "0" "-" "0"
 [37] "0" "-" "-" "0" "-" "-" "-" "0" "0" "0" "1" "1" "0" "1" "0" "1" "1" "0"
 [55] "0" "-" "0" "?" "?" "0" "-" "0" "0" "1" "0" "0" "0" "-" "0" "-" "-" "0"
 [73] "1" "0" "0" "0" "0" "0" "?" "?" "-" "-" "0" "0" "-" "0" "0" "-" "-" "-"
 [91] "1" "0" "0" "-" "-" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Xenusion
  [1] "1" "0" "-" "-" "-" "-" "0" "?" "0" "0" "?" "?" "?" "?" "?" "?" "?" "?"
 [19] "?" "?" "?" "0" "-" "-" "0" "0" "-" "-" "0" "0" "-" "0" "-" "0" "-" "0"
 [37] "0" "-" "-" "?" "?" "?" "?" "0" "0" "0" "1" "1" "?" "1" "0" "1" "1" "0"
 [55] "0" "-" "0" "?" "?" "1" "-" "0" "0" "1" "?" "0" "0" "-" "0" "-" "-" "0"
 [73] "1" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "0" "-" "0" "0" "-" "-" "-"
 [91] "1" "0" "0" "-" "-" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Paucipodia
  [1] "1" "0" "-" "-" "-" "-" "0" "0" "0" "0" "0" "-" "?" "?" "?" "?" "?" "0"
 [19] "1" "?" "?" "0" "-" "-" "0" "0" "-" "-" "0" "0" "-" "0" "-" "0" "-" "0"
 [37] "0" "-" "-" "0" "-" "-" "-" "0" "0" "0" "1" "1" "0" "0" "0" "0" "-" "-"
 [55] "-" "-" "-" "-" "?" "-" "-" "-" "-" "0" "0" "0" "0" "-" "0" "-" "-" "0"
 [73] "0" "-" "-" "0" "0" "0" "1" "0" "1" "0" "0" "0" "-" "0" "0" "-" "-" "-"
 [91] "1" "0" "0" "-" "-" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Microdictyon
  [1] "1" "0" "-" "-" "-" "-" "0" "1" "0" "0" "0" "-" "?" "?" "?" "?" "?" "0"
 [19] "?" "?" "?" "0" "-" "-" "0" "0" "-" "-" "0" "0" "-" "0" "-" "0" "-" "0"
 [37] "0" "-" "-" "0" "-" "-" "-" "0" "0" "0" "1" "1" "1" "1" "0" "1" "1" "0"
 [55] "0" "-" "1" "0" "?" "1" "-" "0" "0" "0" "0" "0" "0" "-" "0" "-" "-" "0"
 [73] "0" "-" "-" "0" "0" "0" "1" "0" "1" "?" "0" "0" "-" "0" "0" "-" "-" "-"
 [91] "1" "0" "0" "-" "-" "0" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Cardiodictyon
  [1] "1" "0" "-" "-" "-" "-" "0" "1" "1" "0" "d" "?" "?" "?" "?" "?" "?" "0"
 [19] "?" "?" "?" "1" "0" "?" "0" "?" "?" "?" "0" "?" "-" "?" "?" "0" "-" "0"
 [37] "0" "-" "-" "0" "-" "-" "-" "0" "0" "0" "1" "1" "1" "1" "0" "1" "1" "0"
 [55] "0" "-" "1" "0" "?" "1" "-" "0" "0" "0" "0" "0" "0" "-" "0" "-" "-" "0"
 [73] "0" "-" "-" "0" "0" "0" "1" "0" "1" "?" "0" "0" "-" "0" "0" "-" "-" "-"
 [91] "1" "0" "0" "-" "-" "0" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Hallucigenia_sparsa
  [1] "1" "0" "-" "-" "-" "-" "0" "1" "1" "0" "0" "-" "1" "1" "0" "0" "1" "0"
 [19] "1" "0" "1" "1" "0" "0" "0" "0" "-" "-" "0" "0" "-" "d" "-" "0" "-" "0"
 [37] "0" "-" "-" "0" "-" "-" "-" "0" "0" "0" "0" "-" "-" "-" "-" "1" "1" "1"
 [55] "1" "1" "1" "1" "1" "1" "0" "0" "0" "-" "0" "1" "0" "-" "0" "-" "-" "0"
 [73] "0" "-" "-" "0" "0" "0" "1" "0" "1" "0" "0" "0" "-" "0" "0" "1" "0" "-"
 [91] "0" "0" "0" "-" "-" "0" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Hallucigenia_fortis
  [1] "1" "0" "-" "-" "-" "-" "0" "1" "1" "0" "0" "-" "?" "?" "?" "?" "?" "0"
 [19] "?" "?" "?" "1" "0" "?" "0" "0" "-" "-" "0" "0" "-" "d" "-" "0" "-" "0"
 [37] "0" "-" "-" "0" "-" "-" "-" "0" "0" "0" "1" "1" "1" "1" "?" "1" "1" "1"
 [55] "1" "1" "1" "?" "?" "1" "0" "0" "0" "0" "0" "1" "0" "-" "0" "-" "-" "0"
 [73] "0" "-" "-" "0" "0" "0" "1" "0" "1" "?" "0" "0" "-" "0" "0" "0" "0" "-"
 [91] "?" "0" "0" "-" "-" "0" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Hallucigenia_hongmeia
  [1] "1" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
 [19] "?" "?" "?" "?" "?" "?" "0" "?" "?" "?" "0" "?" "-" "?" "?" "0" "-" "?"
 [37] "?" "?" "?" "?" "?" "?" "?" "0" "0" "0" "1" "1" "?" "1" "?" "1" "1" "1"
 [55] "1" "1" "1" "0" "?" "1" "0" "1" "0" "0" "?" "?" "0" "-" "0" "-" "-" "0"
 [73] "0" "-" "-" "0" "0" "0" "1" "0" "0" "-" "0" "0" "-" "0" "0" "?" "?" "-"
 [91] "1" "0" "0" "-" "-" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Luolishania
  [1] "1" "1" "0" "0" "-" "-" "-" "?" "1" "0" "0" "-" "?" "?" "?" "?" "?" "0"
 [19] "?" "?" "?" "1" "0" "0" "0" "1" "0" "-" "0" "0" "-" "d" "-" "0" "-" "0"
 [37] "0" "-" "-" "0" "-" "-" "-" "0" "0" "0" "1" "1" "1" "1" "0" "1" "1" "1"
 [55] "1" "1" "1" "?" "?" "2" "0" "1" "1" "1" "0" "1" "0" "-" "0" "-" "-" "0"
 [73] "1" "0" "1" "1" "0" "0" "1" "0" "0" "-" "0" "0" "-" "0" "0" "2" "1" "-"
 [91] "1" "0" "0" "-" "-" "0" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Collinsium
  [1] "1" "1" "0" "0" "-" "-" "-" "1" "0" "0" "0" "-" "?" "?" "?" "?" "?" "?"
 [19] "?" "?" "?" "0" "-" "-" "0" "1" "0" "-" "0" "0" "-" "d" "-" "0" "-" "0"
 [37] "0" "-" "-" "0" "-" "-" "-" "0" "0" "0" "1" "1" "0" "1" "0" "1" "1" "1"
 [55] "1" "1" "1" "0" "1" "4" "0" "1" "1" "1" "0" "1" "0" "-" "0" "-" "-" "0"
 [73] "1" "0" "1" "0" "0" "0" "1" "0" "0" "-" "0" "0" "-" "0" "0" "3" "1" "-"
 [91] "1" "0" "0" "-" "-" "0" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Collins_monster_Burgess_Shale
  [1] "1" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
 [19] "?" "?" "?" "?" "?" "?" "0" "?" "?" "?" "0" "0" "-" "d" "-" "0" "-" "?"
 [37] "?" "?" "?" "?" "?" "?" "?" "0" "0" "0" "1" "1" "?" "1" "0" "1" "1" "1"
 [55] "1" "1" "1" "?" "?" "?" "?" "?" "?" "?" "?" "1" "0" "-" "0" "-" "-" "0"
 [73] "1" "0" "1" "?" "?" "?" "?" "?" "?" "?" "?" "0" "-" "0" "0" "3" "1" "-"
 [91] "?" "0" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Collins_monster_Emu_Bay
  [1] "1" "1" "0" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
 [19] "?" "?" "?" "?" "?" "?" "0" "?" "?" "?" "0" "?" "-" "d" "-" "0" "-" "?"
 [37] "?" "?" "?" "?" "?" "?" "?" "0" "0" "0" "1" "1" "?" "1" "0" "1" "1" "1"
 [55] "1" "1" "1" "?" "?" "2" "0" "1" "?" "?" "?" "1" "0" "-" "0" "-" "-" "0"
 [73] "1" "0" "1" "0" "0" "0" "1" "0" "0" "-" "0" "0" "-" "0" "0" "2" "1" "-"
 [91] "?" "0" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Acinocrinus
  [1] "1" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
 [19] "?" "?" "?" "?" "?" "?" "0" "?" "?" "?" "0" "0" "-" "d" "-" "0" "-" "?"
 [37] "?" "?" "?" "?" "?" "?" "?" "0" "0" "0" "1" "1" "?" "1" "0" "1" "1" "1"
 [55] "1" "1" "1" "?" "?" "5" "1" "1" "?" "?" "0" "1" "0" "-" "0" "-" "-" "0"
 [73] "1" "0" "1" "?" "?" "?" "?" "?" "?" "?" "?" "0" "-" "0" "0" "2" "1" "-"
 [91] "?" "0" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Orstenotubulus
  [1] "1" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
 [19] "?" "?" "?" "?" "?" "?" "0" "?" "?" "?" "0" "?" "-" "?" "?" "?" "-" "?"
 [37] "?" "?" "?" "?" "?" "?" "?" "0" "0" "0" "1" "1" "?" "1" "1" "1" "1" "1"
 [55] "?" "?" "?" "?" "?" "1" "0" "1" "?" "1" "?" "?" "0" "-" "0" "-" "-" "0"
 [73] "0" "-" "-" "1" "1" "?" "?" "?" "?" "?" "?" "0" "-" "0" "0" "?" "?" "-"
 [91] "?" "0" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Tritonychus
  [1] "1" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
 [19] "?" "?" "?" "?" "?" "?" "0" "?" "?" "?" "0" "?" "-" "?" "?" "?" "-" "?"
 [37] "?" "?" "?" "?" "?" "?" "?" "0" "0" "0" "1" "1" "?" "?" "1" "?" "?" "?"
 [55] "?" "?" "?" "?" "?" "?" "?" "?" "?" "1" "?" "?" "0" "-" "0" "-" "-" "0"
 [73] "0" "-" "-" "1" "1" "0" "1" "?" "2" "0" "0" "0" "-" "0" "0" "?" "?" "?"
 [91] "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "0" "1" "?" "?"

$Carbotubulus
  [1] "1" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
 [19] "?" "?" "?" "?" "?" "?" "0" "?" "?" "?" "0" "?" "-" "?" "?" "?" "-" "?"
 [37] "?" "?" "?" "?" "?" "?" "?" "0" "0" "0" "0" "-" "-" "-" "-" "?" "?" "?"
 [55] "?" "?" "?" "?" "?" "?" "?" "?" "?" "-" "?" "1" "0" "-" "0" "-" "-" "0"
 [73] "0" "-" "-" "0" "0" "?" "?" "?" "?" "?" "?" "0" "-" "0" "0" "?" "?" "-"
 [91] "0" "0" "?" "e" "-" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "0" "?" "?" "?"

$Antennacanthopodia
  [1] "1" "0" "-" "-" "-" "-" "0" "?" "0" "0" "?" "?" "?" "?" "?" "?" "?" "?"
 [19] "?" "?" "?" "1" "0" "0" "0" "1" "0" "-" "0" "1" "-" "1" "-" "0" "-" "0"
 [37] "0" "-" "-" "0" "-" "-" "-" "0" "0" "0" "1" "?" "?" "?" "?" "0" "-" "-"
 [55] "-" "-" "-" "-" "?" "-" "-" "-" "-" "?" "?" "0" "0" "-" "0" "-" "-" "0"
 [73] "0" "-" "-" "1" "?" "0" "0" "0" "-" "-" "0" "0" "-" "0" "0" "-" "-" "-"
 [91] "1" "0" "0" "-" "-" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Helenodora
  [1] "1" "0" "-" "-" "-" "-" "0" "?" "0" "0" "?" "?" "?" "?" "?" "?" "?" "?"
 [19] "?" "?" "?" "?" "?" "?" "0" "1" "0" "-" "0" "?" "-" "?" "?" "1" "-" "0"
 [37] "0" "-" "-" "0" "-" "-" "-" "0" "0" "0" "?" "?" "?" "?" "?" "0" "-" "-"
 [55] "-" "-" "-" "-" "?" "-" "-" "-" "-" "1" "0" "?" "0" "-" "0" "-" "-" "0"
 [73] "0" "-" "-" "1" "?" "0" "1" "0" "1" "0" "?" "0" "-" "0" "0" "?" "?" "-"
 [91] "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Euperipatoides_Onychophora
  [1] "1" "0" "-" "-" "-" "-" "0" "0" "0" "0" "1" "1" "1" "0" "-" "-" "1" "0"
 [19] "0" "-" "-" "1" "0" "0" "0" "1" "0" "-" "0" "1" "-" "2" "0" "1" "-" "0"
 [37] "0" "-" "-" "0" "-" "-" "-" "0" "0" "0" "1" "1" "0" "0" "1" "0" "-" "-"
 [55] "-" "-" "-" "-" "1" "-" "-" "-" "-" "1" "0" "0" "0" "-" "0" "-" "-" "0"
 [73] "0" "-" "-" "1" "1" "0" "1" "0" "1" "0" "1" "0" "-" "0" "0" "-" "-" "-"
 [91] "1" "0" "0" "-" "-" "0" "0" "1" "1" "2" "1" "0" "1" "1" "1" "1" "1" "0"
[109] "1" "0" "1" "0" "1" "1" "1"

$Plicatoperipatus_Onychophora
  [1] "1" "0" "-" "-" "-" "-" "0" "0" "0" "0" "1" "1" "1" "0" "-" "-" "1" "0"
 [19] "0" "-" "-" "1" "0" "0" "0" "1" "0" "-" "0" "1" "-" "2" "1" "1" "-" "0"
 [37] "0" "-" "-" "0" "-" "-" "-" "0" "0" "0" "1" "1" "0" "0" "1" "0" "-" "-"
 [55] "-" "-" "-" "-" "1" "-" "-" "-" "-" "1" "0" "0" "0" "-" "0" "-" "-" "0"
 [73] "0" "-" "-" "1" "1" "0" "1" "0" "1" "0" "1" "0" "-" "0" "0" "-" "-" "-"
 [91] "1" "0" "0" "-" "-" "0" "0" "1" "1" "2" "1" "0" "1" "1" "1" "1" "1" "0"
[109] "1" "0" "1" "0" "1" "1" "1"

$Ooperipatellus_Onychophora
  [1] "1" "0" "-" "-" "-" "-" "0" "0" "0" "0" "1" "1" "1" "0" "-" "-" "1" "0"
 [19] "0" "-" "-" "1" "0" "0" "0" "1" "0" "-" "0" "1" "-" "2" "1" "1" "-" "0"
 [37] "0" "-" "-" "0" "-" "-" "-" "0" "0" "0" "1" "1" "0" "0" "1" "0" "-" "-"
 [55] "-" "-" "-" "-" "1" "-" "-" "-" "-" "1" "0" "0" "0" "-" "0" "-" "-" "0"
 [73] "0" "-" "-" "1" "1" "0" "1" "0" "1" "0" "1" "0" "-" "0" "0" "-" "-" "-"
 [91] "1" "0" "0" "-" "-" "0" "0" "1" "1" "2" "1" "0" "1" "1" "1" "1" "1" "0"
[109] "1" "0" "1" "0" "1" "1" "1"

$Actinarctus_Heterotardigrada
  [1] "1" "1" "0" "0" "-" "-" "-" "0" "0" "1" "1" "0" "0" "1" "0" "0" "1" "0"
 [19] "1" "0" "0" "1" "0" "0" "0" "1" "1" "0" "0" "0" "-" "0" "-" "0" "-" "1"
 [37] "0" "-" "-" "0" "-" "-" "-" "0" "0" "0" "0" "-" "-" "-" "-" "1" "1" "0"
 [55] "0" "-" "1" "0" "0" "?" "?" "-" "-" "-" "0" "0" "0" "-" "0" "-" "-" "0"
 [73] "0" "-" "-" "0" "0" "1" "1" "0" "3" "1" "0" "0" "-" "0" "0" "-" "-" "-"
 [91] "0" "0" "1" "1" "-" "1" "1" "1" "0" "0" "1" "1" "0" "1" "1" "1" "0" "1"
[109] "1" "?" "-" "1" "0" "0" "-"

$Halobiotus_Eutardigrada
  [1] "1" "0" "-" "-" "-" "-" "0" "0" "0" "0" "0" "-" "0" "1" "0" "0" "1" "0"
 [19] "1" "0" "0" "1" "0" "0" "0" "1" "1" "0" "0" "0" "-" "0" "-" "0" "-" "2"
 [37] "0" "-" "-" "0" "-" "-" "-" "0" "0" "0" "0" "-" "-" "-" "-" "1" "0" "-"
 [55] "-" "-" "-" "-" "0" "?" "?" "-" "-" "-" "0" "0" "0" "-" "0" "-" "-" "0"
 [73] "0" "-" "-" "0" "0" "1" "1" "1" "1" "1" "0" "0" "-" "0" "0" "-" "-" "-"
 [91] "0" "0" "1" "1" "-" "1" "1" "1" "0" "0" "1" "1" "0" "1" "1" "1" "0" "1"
[109] "1" "1" "-" "1" "0" "0" "-"

$Siberian_Orsten_tardigrade
  [1] "1" "0" "-" "-" "-" "-" "0" "0" "0" "0" "0" "-" "0" "1" "0" "0" "?" "?"
 [19] "?" "?" "?" "?" "b" "?" "0" "?" "?" "?" "0" "?" "-" "?" "?" "?" "-" "?"
 [37] "?" "?" "?" "?" "?" "?" "?" "0" "0" "0" "0" "-" "-" "-" "-" "?" "?" "?"
 [55] "-" "-" "?" "?" "?" "?" "?" "-" "-" "-" "?" "0" "0" "-" "0" "-" "-" "0"
 [73] "0" "-" "-" "0" "0" "0" "1" "1" "1" "1" "0" "0" "-" "0" "0" "-" "-" "-"
 [91] "0" "0" "1" "a" "-" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Megadictyon
  [1] "1" "0" "-" "-" "-" "-" "0" "?" "0" "0" "?" "?" "?" "1" "?" "?" "?" "0"
 [19] "?" "?" "?" "0" "-" "-" "0" "1" "0" "-" "0" "0" "-" "0" "-" "0" "-" "0"
 [37] "0" "-" "-" "1" "0" "-" "1" "0" "0" "0" "1" "1" "?" "0" "?" "0" "-" "-"
 [55] "-" "-" "-" "-" "?" "-" "-" "-" "-" "0" "1" "0" "0" "-" "0" "-" "-" "0"
 [73] "1" "1" "-" "0" "0" "0" "?" "?" "?" "?" "0" "0" "-" "0" "0" "-" "-" "-"
 [91] "?" "0" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Jianshanopodia
  [1] "1" "0" "-" "-" "-" "-" "0" "0" "0" "0" "0" "-" "0" "1" "?" "?" "1" "0"
 [19] "1" "1" "0" "0" "-" "-" "0" "1" "0" "-" "0" "0" "-" "0" "-" "0" "-" "0"
 [37] "?" "?" "?" "1" "0" "-" "?" "0" "0" "0" "1" "1" "?" "1" "0" "0" "-" "-"
 [55] "-" "-" "-" "-" "?" "-" "-" "-" "-" "0" "1" "0" "0" "-" "0" "-" "-" "0"
 [73] "1" "1" "-" "0" "0" "0" "?" "?" "?" "?" "0" "0" "-" "0" "0" "-" "-" "-"
 [91] "0" "0" "1" "0" "1" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Hadranax
  [1] "1" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
 [19] "?" "?" "?" "?" "?" "?" "0" "?" "?" "?" "0" "?" "-" "?" "?" "?" "-" "?"
 [37] "?" "?" "?" "?" "?" "?" "?" "0" "0" "0" "1" "1" "?" "1" "0" "1" "1" "0"
 [55] "0" "-" "0" "-" "?" "3" "-" "-" "0" "1" "?" "0" "0" "-" "0" "-" "-" "0"
 [73] "0" "-" "-" "1" "0" "?" "?" "?" "?" "?" "0" "0" "-" "0" "0" "-" "-" "-"
 [91] "?" "0" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Kerygmachela
  [1] "1" "0" "-" "-" "-" "-" "0" "0" "0" "0" "0" "-" "0" "1" "0" "0" "?" "0"
 [19] "?" "?" "?" "?" "?" "?" "0" "1" "0" "-" "0" "0" "-" "0" "-" "0" "-" "0"
 [37] "1" "0" "-" "1" "0" "-" "1" "0" "0" "0" "1" "1" "0" "1" "0" "1" "1" "0"
 [55] "0" "-" "0" "-" "?" "3" "-" "?" "0" "1" "1" "0" "1" "0" "0" "1" "0" "0"
 [73] "0" "-" "-" "0" "0" "0" "0" "0" "-" "-" "0" "0" "0" "0" "0" "-" "-" "-"
 [91] "0" "0" "1" "0" "0" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "0" "?" "?" "?"

$Pambdelurion
  [1] "1" "0" "-" "-" "-" "-" "0" "0" "0" "0" "1" "0" "0" "1" "0" "0" "?" "0"
 [19] "?" "?" "?" "0" "-" "-" "0" "1" "0" "-" "0" "0" "-" "0" "-" "0" "-" "1"
 [37] "1" "0" "-" "1" "0" "-" "?" "0" "0" "0" "1" "?" "?" "?" "?" "?" "?" "?"
 [55] "?" "?" "?" "?" "?" "-" "-" "?" "-" "?" "1" "0" "1" "0" "0" "1" "0" "0"
 [73] "0" "-" "-" "0" "0" "0" "0" "0" "-" "-" "0" "0" "0" "0" "0" "-" "-" "-"
 [91] "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "1" "1" "0" "-"

$Opabinia
  [1] "1" "0" "-" "-" "-" "-" "0" "0" "0" "0" "2" "1" "0" "?" "?" "?" "?" "0"
 [19] "?" "?" "?" "1" "1" "1" "0" "1" "0" "-" "0" "0" "-" "0" "-" "0" "-" "1"
 [37] "1" "1" "0" "1" "0" "-" "1" "1" "0" "0" "0" "-" "-" "-" "-" "0" "-" "-"
 [55] "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "1" "0" "1" "0" "0" "1" "1" "0"
 [73] "0" "-" "-" "0" "0" "0" "0" "0" "-" "-" "0" "0" "0" "0" "0" "-" "-" "-"
 [91] "?" "1" "1" "0" "1" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Anomalocaris_canadensis
  [1] "1" "1" "0" "1" "0" "0" "0" "0" "?" "0" "1" "1" "0" "1" "1" "1" "1" "0"
 [19] "?" "?" "?" "1" "1" "1" "0" "1" "1" "1" "1" "0" "-" "0" "-" "0" "-" "1"
 [37] "1" "0" "-" "1" "1" "0" "1" "0" "0" "0" "0" "-" "-" "-" "-" "0" "-" "-"
 [55] "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "1" "0" "1" "0" "0" "0" "1" "0"
 [73] "0" "-" "-" "0" "0" "0" "0" "0" "-" "-" "0" "1" "1" "0" "1" "-" "-" "-"
 [91] "0" "1" "1" "0" "1" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "1" "?" "?" "?"

$Peytoia_nathorsti
  [1] "1" "1" "0" "1" "1" "0" "0" "0" "?" "0" "1" "1" "0" "1" "1" "1" "?" "0"
 [19] "?" "?" "?" "1" "1" "1" "0" "1" "1" "1" "1" "0" "-" "0" "-" "0" "-" "1"
 [37] "1" "0" "-" "1" "0" "-" "1" "0" "0" "0" "0" "-" "-" "-" "-" "0" "-" "-"
 [55] "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "1" "0" "1" "0" "0" "1" "1" "0"
 [73] "0" "-" "-" "0" "0" "0" "0" "0" "-" "-" "0" "1" "1" "0" "1" "-" "-" "-"
 [91] "0" "0" "0" "-" "-" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Hurdia_victoria
  [1] "1" "1" "0" "1" "1" "0" "1" "0" "?" "0" "1" "1" "0" "1" "1" "1" "1" "0"
 [19] "1" "1" "0" "1" "1" "1" "0" "1" "1" "1" "1" "0" "-" "0" "-" "0" "-" "1"
 [37] "?" "?" "?" "1" "0" "-" "1" "?" "0" "0" "0" "-" "-" "-" "-" "0" "-" "-"
 [55] "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "?" "0" "1" "0" "0" "1" "1" "0"
 [73] "0" "-" "-" "0" "0" "0" "0" "0" "-" "-" "0" "1" "0" "0" "1" "-" "-" "-"
 [91] "0" "0" "1" "0" "1" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Aegirocassis_benmoulae
  [1] "1" "1" "0" "1" "1" "0" "1" "0" "?" "0" "?" "1" "0" "?" "?" "?" "?" "?"
 [19] "?" "?" "?" "?" "?" "?" "0" "1" "1" "1" "1" "0" "-" "0" "-" "0" "-" "1"
 [37] "?" "?" "?" "1" "0" "-" "1" "0" "0" "0" "0" "-" "-" "-" "-" "0" "-" "-"
 [55] "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "?" "0" "1" "0" "0" "1" "1" "0"
 [73] "0" "-" "-" "0" "0" "0" "0" "0" "-" "-" "0" "1" "1" "0" "?" "-" "-" "-"
 [91] "0" "0" "0" "-" "-" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Lyrarapax_unguispinus
  [1] "1" "1" "0" "1" "0" "0" "0" "0" "?" "0" "1" "1" "0" "1" "?" "?" "?" "?"
 [19] "?" "?" "?" "1" "1" "1" "0" "1" "1" "1" "1" "0" "-" "0" "-" "0" "-" "1"
 [37] "1" "0" "-" "1" "0" "-" "1" "0" "0" "0" "0" "-" "-" "-" "-" "0" "-" "-"
 [55] "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "0" "0" "1" "0" "0" "0" "1" "0"
 [73] "0" "-" "-" "0" "0" "0" "0" "0" "-" "-" "0" "?" "1" "1" "1" "-" "-" "-"
 [91] "0" "1" "1" "0" "1" "?" "?" "1" "0" "0" "1" "1" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "1" "?" "?" "?"

$Schinderhannes
  [1] "1" "?" "?" "?" "?" "?" "?" "0" "?" "0" "1" "1" "0" "1" "?" "?" "?" "?"
 [19] "?" "?" "?" "1" "1" "1" "0" "1" "1" "1" "?" "?" "-" "0" "-" "0" "-" "1"
 [37] "1" "0" "-" "1" "1" "0" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
 [55] "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
 [73] "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "1" "?" "-" "-" "-"
 [91] "0" "0" "1" "0" "1" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Fuxianhuia
  [1] "1" "1" "0" "1" "0" "1" "-" "0" "-" "-" "2" "1" "0" "0" "-" "-" "?" "0"
 [19] "?" "?" "?" "1" "1" "1" "1" "1" "1" "0" "-" "1" "0" "-" "-" "-" "1" "1"
 [37] "1" "1" "1" "-" "-" "-" "-" "1" "1" "0" "-" "-" "-" "-" "-" "-" "-" "-"
 [55] "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "0" "-" "1" "1" "1" "-" "0" "0"
 [73] "-" "-" "-" "-" "-" "0" "0" "0" "-" "-" "0" "0" "-" "0" "0" "-" "-" "1"
 [91] "-" "0" "1" "0" "1" "?" "?" "1" "2" "1" "1" "1" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "1" "1" "0" "0" "-"

$Chengjiangocaris
  [1] "1" "1" "0" "1" "0" "1" "-" "0" "-" "-" "2" "1" "0" "0" "-" "-" "?" "0"
 [19] "?" "?" "?" "1" "1" "1" "1" "1" "1" "0" "-" "1" "0" "-" "-" "-" "1" "1"
 [37] "1" "1" "1" "-" "-" "-" "-" "1" "1" "0" "-" "-" "-" "-" "-" "-" "-" "-"
 [55] "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "0" "-" "1" "1" "1" "-" "0" "0"
 [73] "-" "-" "-" "-" "-" "0" "0" "0" "-" "-" "0" "0" "-" "0" "0" "-" "-" "1"
 [91] "-" "0" "1" "0" "1" "?" "1" "?" "?" "?" "?" "?" "0" "?" "1" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Leanchoilia
  [1] "1" "1" "1" "0" "-" "-" "-" "0" "-" "-" "2" "1" "0" "0" "-" "-" "?" "0"
 [19] "?" "?" "?" "1" "1" "1" "1" "1" "1" "0" "-" "1" "1" "-" "-" "-" "0" "1"
 [37] "1" "1" "1" "-" "-" "-" "-" "1" "1" "?" "-" "-" "-" "-" "-" "-" "-" "-"
 [55] "-" "-" "-" "-" "0" "-" "-" "-" "-" "-" "1" "-" "1" "1" "1" "-" "0" "1"
 [73] "-" "-" "-" "-" "-" "0" "1" "0" "c" "?" "0" "0" "-" "0" "0" "-" "-" "0"
 [91] "-" "0" "0" "-" "-" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Alalcomenaeus
  [1] "1" "1" "1" "0" "-" "-" "-" "0" "-" "-" "2" "1" "0" "0" "-" "-" "?" "0"
 [19] "?" "?" "?" "1" "1" "1" "1" "1" "?" "?" "-" "1" "1" "-" "-" "-" "0" "1"
 [37] "1" "1" "1" "-" "-" "-" "-" "1" "1" "?" "-" "-" "-" "-" "-" "-" "-" "-"
 [55] "-" "-" "-" "-" "0" "-" "-" "-" "-" "-" "1" "-" "1" "1" "1" "-" "0" "1"
 [73] "-" "-" "-" "-" "-" "0" "1" "0" "0" "-" "0" "0" "-" "0" "0" "-" "-" "0"
 [91] "-" "0" "0" "-" "-" "?" "1" "1" "2" "1" "1" "1" "0" "0" "0" "-" "-" "?"
[109] "?" "?" "?" "?" "?" "?" "?"

$Misszhouia_longicaudata
  [1] "1" "1" "1" "1" "0" "1" "-" "0" "-" "-" "2" "1" "0" "0" "-" "-" "?" "0"
 [19] "?" "?" "?" "1" "1" "1" "1" "1" "1" "0" "-" "1" "0" "-" "-" "-" "0" "1"
 [37] "1" "1" "1" "-" "-" "-" "-" "1" "1" "1" "-" "-" "-" "-" "-" "-" "-" "-"
 [55] "-" "-" "-" "-" "0" "-" "-" "-" "-" "-" "1" "-" "1" "2" "1" "-" "0" "1"
 [73] "-" "-" "-" "-" "-" "0" "1" "0" "0" "-" "0" "0" "-" "0" "0" "-" "-" "0"
 [91] "-" "0" "0" "-" "-" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "1" "?" "?" "?"

$Kuamaia_lata
  [1] "1" "1" "1" "1" "0" "1" "-" "0" "-" "-" "2" "1" "0" "0" "-" "-" "?" "0"
 [19] "?" "?" "?" "1" "1" "1" "1" "1" "1" "0" "-" "1" "0" "-" "-" "-" "0" "1"
 [37] "1" "1" "1" "-" "-" "-" "-" "1" "1" "1" "-" "-" "-" "-" "-" "-" "-" "-"
 [55] "-" "-" "-" "-" "0" "-" "-" "-" "-" "-" "1" "-" "1" "2" "1" "-" "0" "1"
 [73] "-" "-" "-" "-" "-" "0" "1" "0" "2" "1" "0" "0" "-" "0" "0" "-" "-" "0"
 [91] "-" "0" "0" "-" "-" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?"
[109] "?" "?" "?" "1" "?" "?" "?"

> Lobo.phy
$Tubiluchus_Priapulida
  [1] 1 1 7 7 7 7 1 1 1 1 1 7 1 2 1 2 2 2 2 1 1 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
 [38] 7 1 7 7 7 1 1 1 2 7 2 1 1 1 7 7 7 7 7 7 1 7 7 7 7 2 1 1 7 7 7 7 7 7 7 7 7
 [75] 7 7 1 7 1 7 7 1 1 7 1 1 7 7 7 7 1 1 7 7 1 1 1 7 7 1 7 7 2 2 2 7 7 1 1 1 2
[112] 2 2

$Cricocosmia
  [1]  1  1  7  7  7  7  1  1  1  1  1  7  1  2  1  2  2  2 13  1  1  7  7  7  7
 [26]  7  7  7  7  7  7  7  7  7  7  7  7  7  1  7  7  7  1  1  1  2  7  2  1  1
 [51]  2  2  1  1  7  2  1  1  2  7  1  1  2  1  1  7  7  7  7  7  7  7  7  7  7
 [76]  7  1  7  1  7  7  1  1  7  1  1  7  7  7  7  1  1  7  7  1 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13  1 13 13 13

$Aysheaia
  [1]  2  1  7  7  7  7  1  1  1  1  1  7  1  2  1 13  1 13 13 13  1  7  7  1  2
 [26]  1  7  1  1  7  1  7  1  7  1  1  7  7  2  1  7  2  1  1  1  2  2  2  1  1
 [51]  1  7  7  7  7  7  7  1  7  7  7  7  2  1  1  1  7  1  7  7  1  2  1  1  1
 [76]  1  1  2  1  5  1  1  1  7  1  1  7  7  7  1  1  2  2  7  2 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13  1 13 13 13

$Siberion
  [1]  2  1  7  7  7  7  1  1  1  1  1  7  1  2  1 13  1 13 13 13  1  7  7  1  2
 [26]  1  7  1  1  7  1  7  1  7  1  2  1  7 13 13 13 13  1  1  1  2  2 13  1  1
 [51]  1  7  7  7  7  7  7 13  7  7  7  7  2 13  1  1  7  1  7  7  1 13 13 13  1
 [76]  1 13 13 13 13 13 13  1  7  1  1  7  7  7 13  1 13 13 13 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Onychodictyon_ferox
  [1]  2  1  7  7  7  7  1  1  1  1  1  7  1 13 13 13  1 13 13 13  2  1  1  1  2
 [26]  1  7  1  1  7  1  7  1  7  1  1  7  7  2  2  2  1  1  1  1  2  2  2  2  1
 [51]  2  2  1  2  1  2  1 13  2  7  1  1  2  1  1  1  7  1  7  7  1  2  2  7  1
 [76]  1  1  2  1  2  2  1  1  7  1  1  7  7  7  1  1  2  2  7  2 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Onychodictyon_gracilis
  [1]  2  1  7  7  7  7  1 13 13  1  1  7  1 13 13 13  1 13 13 13 13 13 13  1 13
 [26] 13 13  1 13  7 13  7  1  7 13 13 13 13 13 13 13 13  1  1  1  2  2  1 13  1
 [51]  2  2  1 13 13  2 13 13  2  7  1  1  2  1 13  1  7  1  7  7  1 13 13 13  1
 [76]  1  1  2  1  2 13  1  1  7  1  1 13 13  7  2  1  2  2  7  1 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Diania
  [1]  2  1  7  7  7  7  1  1  1  1  1  7 13 13 13 13  1 13 13 13  1  7  7  1  1
 [26]  7  7  1  1  7  1  7  1  7  1  1  7  7  1  7  7  7  1  1  1  2  2  1  2  1
 [51]  2  2  1  1  7  1 13 13  1  7  1  1  2  1  1  1  7  1  7  7  1  2  1  1  1
 [76]  1  1 13 13  7  7  1  1  7  1  1  7  7  7  2  1  1  7  7 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Xenusion
  [1]  2  1  7  7  7  7  1 13  1  1 13 13 13 13 13 13 13 13 13 13  1  7  7  1  1
 [26]  7  7  1  1  7  1  7  1  7  1  1  7  7 13 13 13 13  1  1  1  2  2 13  2  1
 [51]  2  2  1  1  7  1 13 13  2  7  1  1  2 13  1  1  7  1  7  7  1  2 13 13 13
 [76] 13 13 13 13 13 13 13  1  7  1  1  7  7  7  2  1  1  7  7 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Paucipodia
  [1]  2  1  7  7  7  7  1  1  1  1  1  7 13 13 13 13  1  2 13 13  1  7  7  1  1
 [26]  7  7  1  1  7  1  7  1  7  1  1  7  7  1  7  7  7  1  1  1  2  2  1  1  1
 [51]  1  7  7  7  7  7  7 13  7  7  7  7  1  1  1  1  7  1  7  7  1  1  7  7  1
 [76]  1  1  2  1  2  1  1  1  7  1  1  7  7  7  2  1  1  7  7 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Microdictyon
  [1]  2  1  7  7  7  7  1  2  1  1  1  7 13 13 13 13  1 13 13 13  1  7  7  1  1
 [26]  7  7  1  1  7  1  7  1  7  1  1  7  7  1  7  7  7  1  1  1  2  2  2  2  1
 [51]  2  2  1  1  7  2  1 13  2  7  1  1  1  1  1  1  7  1  7  7  1  1  7  7  1
 [76]  1  1  2  1  2 13  1  1  7  1  1  7  7  7  2  1  1  7  7  1 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Cardiodictyon
  [1]  2  1  7  7  7  7  1  2  2  1 11 13 13 13 13 13  1 13 13 13  2  1 13  1 13
 [26] 13 13  1 13  7 13 13  1  7  1  1  7  7  1  7  7  7  1  1  1  2  2  2  2  1
 [51]  2  2  1  1  7  2  1 13  2  7  1  1  1  1  1  1  7  1  7  7  1  1  7  7  1
 [76]  1  1  2  1  2 13  1  1  7  1  1  7  7  7  2  1  1  7  7  1 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Hallucigenia_sparsa
  [1]  2  1  7  7  7  7  1  2  2  1  1  7  2  2  1  2  1  2  1  2  2  1  1  1  1
 [26]  7  7  1  1  7 11  7  1  7  1  1  7  7  1  7  7  7  1  1  1  1  7  7  7  7
 [51]  2  2  2  2  2  2  2  2  2  1  1  1  7  1  2  1  7  1  7  7  1  1  7  7  1
 [76]  1  1  2  1  2  1  1  1  7  1  1  2  1  7  1  1  1  7  7  1 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Hallucigenia_fortis
  [1]  2  1  7  7  7  7  1  2  2  1  1  7 13 13 13 13  1 13 13 13  2  1 13  1  1
 [26]  7  7  1  1  7 11  7  1  7  1  1  7  7  1  7  7  7  1  1  1  2  2  2  2 13
 [51]  2  2  2  2  2  2 13 13  2  1  1  1  1  1  2  1  7  1  7  7  1  1  7  7  1
 [76]  1  1  2  1  2 13  1  1  7  1  1  1  1  7 13  1  1  7  7  1 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Hallucigenia_hongmeia
  [1]  2 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13  1 13
 [26] 13 13  1 13  7 13 13  1  7 13 13 13 13 13 13 13 13  1  1  1  2  2 13  2 13
 [51]  2  2  2  2  2  2  1 13  2  1  2  1  1 13 13  1  7  1  7  7  1  1  7  7  1
 [76]  1  1  2  1  1  7  1  1  7  1  1 13 13  7  2  1  1  7  7 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Luolishania
  [1]  2  2  1  1  7  7  7 13  2  1  1  7 13 13 13 13  1 13 13 13  2  1  1  1  2
 [26]  1  7  1  1  7 11  7  1  7  1  1  7  7  1  7  7  7  1  1  1  2  2  2  2  1
 [51]  2  2  2  2  2  2 13 13  3  1  2  2  2  1  2  1  7  1  7  7  1  2  1  2  2
 [76]  1  1  2  1  1  7  1  1  7  1  1  3  2  7  2  1  1  7  7  1 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Collinsium
  [1]  2  2  1  1  7  7  7  2  1  1  1  7 13 13 13 13 13 13 13 13  1  7  7  1  2
 [26]  1  7  1  1  7 11  7  1  7  1  1  7  7  1  7  7  7  1  1  1  2  2  1  2  1
 [51]  2  2  2  2  2  2  1  2  5  1  2  2  2  1  2  1  7  1  7  7  1  2  1  2  1
 [76]  1  1  2  1  1  7  1  1  7  1  1  4  2  7  2  1  1  7  7  1 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Collins_monster_Burgess_Shale
  [1]  2 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13  1 13
 [26] 13 13  1  1  7 11  7  1  7 13 13 13 13 13 13 13 13  1  1  1  2  2 13  2  1
 [51]  2  2  2  2  2  2 13 13 13 13 13 13 13 13  2  1  7  1  7  7  1  2  1  2 13
 [76] 13 13 13 13 13 13 13  1  7  1  1  4  2  7 13  1 13 13 13 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Collins_monster_Emu_Bay
  [1]  2  2  1 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13  1 13
 [26] 13 13  1 13  7 11  7  1  7 13 13 13 13 13 13 13 13  1  1  1  2  2 13  2  1
 [51]  2  2  2  2  2  2 13 13  3  1  2 13 13 13  2  1  7  1  7  7  1  2  1  2  1
 [76]  1  1  2  1  1  7  1  1  7  1  1  3  2  7 13  1 13 13 13 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Acinocrinus
  [1]  2 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13  1 13
 [26] 13 13  1  1  7 11  7  1  7 13 13 13 13 13 13 13 13  1  1  1  2  2 13  2  1
 [51]  2  2  2  2  2  2 13 13  6  2  2 13 13  1  2  1  7  1  7  7  1  2  1  2 13
 [76] 13 13 13 13 13 13 13  1  7  1  1  3  2  7 13  1 13 13 13 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Orstenotubulus
  [1]  2 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13  1 13
 [26] 13 13  1 13  7 13 13 13  7 13 13 13 13 13 13 13 13  1  1  1  2  2 13  2  2
 [51]  2  2  2 13 13 13 13 13  2  1  2 13  2 13 13  1  7  1  7  7  1  1  7  7  2
 [76]  2 13 13 13 13 13 13  1  7  1  1 13 13  7 13  1 13 13 13 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Tritonychus
  [1]  2 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13  1 13
 [26] 13 13  1 13  7 13 13 13  7 13 13 13 13 13 13 13 13  1  1  1  2  2 13 13  2
 [51] 13 13 13 13 13 13 13 13 13 13 13 13  2 13 13  1  7  1  7  7  1  1  7  7  2
 [76]  2  1  2 13  3  1  1  1  7  1  1 13 13 13 13 13 13 13 13 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13  1  2 13 13

$Carbotubulus
  [1]  2 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13  1 13
 [26] 13 13  1 13  7 13 13 13  7 13 13 13 13 13 13 13 13  1  1  1  1  7  7  7  7
 [51] 13 13 13 13 13 13 13 13 13 13 13 13  7 13  2  1  7  1  7  7  1  1  7  7  1
 [76]  1 13 13 13 13 13 13  1  7  1  1 13 13  7  1  1 13 12  7 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13  1 13 13 13

$Antennacanthopodia
  [1]  2  1  7  7  7  7  1 13  1  1 13 13 13 13 13 13 13 13 13 13  2  1  1  1  2
 [26]  1  7  1  2  7  2  7  1  7  1  1  7  7  1  7  7  7  1  1  1  2 13 13 13 13
 [51]  1  7  7  7  7  7  7 13  7  7  7  7 13 13  1  1  7  1  7  7  1  1  7  7  2
 [76] 13  1  1  1  7  7  1  1  7  1  1  7  7  7  2  1  1  7  7 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Helenodora
  [1]  2  1  7  7  7  7  1 13  1  1 13 13 13 13 13 13 13 13 13 13 13 13 13  1  2
 [26]  1  7  1 13  7 13 13  2  7  1  1  7  7  1  7  7  7  1  1  1 13 13 13 13 13
 [51]  1  7  7  7  7  7  7 13  7  7  7  7  2  1 13  1  7  1  7  7  1  1  7  7  2
 [76] 13  1  2  1  2  1 13  1  7  1  1 13 13  7 13 13 13 13 13 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Euperipatoides_Onychophora
  [1] 2 1 7 7 7 7 1 1 1 1 2 2 2 1 7 2 1 1 7 7 2 1 1 1 2 1 7 1 2 7 3 1 2 7 1 1 7
 [38] 7 1 7 7 7 1 1 1 2 2 1 1 2 1 7 7 7 7 7 7 2 7 7 7 7 2 1 1 1 7 1 7 7 1 1 7 7
 [75] 2 2 1 2 1 2 1 2 1 7 1 1 7 7 7 2 1 1 7 7 1 1 2 2 3 1 2 2 2 2 2 1 2 1 2 1 2
[112] 2 2

$Plicatoperipatus_Onychophora
  [1] 2 1 7 7 7 7 1 1 1 1 2 2 2 1 7 2 1 1 7 7 2 1 1 1 2 1 7 1 2 7 3 2 2 7 1 1 7
 [38] 7 1 7 7 7 1 1 1 2 2 1 1 2 1 7 7 7 7 7 7 2 7 7 7 7 2 1 1 1 7 1 7 7 1 1 7 7
 [75] 2 2 1 2 1 2 1 2 1 7 1 1 7 7 7 2 1 1 7 7 1 1 2 2 3 1 2 2 2 2 2 1 2 1 2 1 2
[112] 2 2

$Ooperipatellus_Onychophora
  [1] 2 1 7 7 7 7 1 1 1 1 2 2 2 1 7 2 1 1 7 7 2 1 1 1 2 1 7 1 2 7 3 2 2 7 1 1 7
 [38] 7 1 7 7 7 1 1 1 2 2 1 1 2 1 7 7 7 7 7 7 2 7 7 7 7 2 1 1 1 7 1 7 7 1 1 7 7
 [75] 2 2 1 2 1 2 1 2 1 7 1 1 7 7 7 2 1 1 7 7 1 1 2 2 3 1 2 2 2 2 2 1 2 1 2 1 2
[112] 2 2

$Actinarctus_Heterotardigrada
  [1]  2  2  1  1  7  7  7  1  1  2  2  1  1  2  1  2  1  2  1  1  2  1  1  1  2
 [26]  2  1  1  1  7  1  7  1  7  2  1  7  7  1  7  7  7  1  1  1  1  7  7  7  7
 [51]  2  2  1  1  7  2  1  1 13 13  7  7  7  1  1  1  7  1  7  7  1  1  7  7  1
 [76]  1  2  2  1  4  2  1  1  7  1  1  7  7  7  1  1  2  2  7  2  2  2  1  1  2
[101]  1  2  2  2  1  2  2 13  7  2  1  1  7

$Halobiotus_Eutardigrada
  [1]  2  1  7  7  7  7  1  1  1  1  1  7  1  2  1  2  1  2  1  1  2  1  1  1  2
 [26]  2  1  1  1  7  1  7  1  7  3  1  7  7  1  7  7  7  1  1  1  1  7  7  7  7
 [51]  2  1  7  7  7  7  7  1 13 13  7  7  7  1  1  1  7  1  7  7  1  1  7  7  1
 [76]  1  2  2  2  2  2  1  1  7  1  1  7  7  7  1  1  2  2  7  2  2  2  1  1  2
[101]  1  2  2  2  1  2  2  2  7  2  1  1  7

$Siberian_Orsten_tardigrade
  [1]  2  1  7  7  7  7  1  1  1  1  1  7  1  2  1 13 13 13 13 13 13  9 13  1 13
 [26] 13 13  1 13  7 13 13 13  7 13 13 13 13 13 13 13 13  1  1  1  1  7  7  7  7
 [51] 13 13 13  7  7 13 13 13 13 13  7  7  7 13  1  1  7  1  7  7  1  1  7  7  1
 [76]  1  1  2  2  2  2  1  1  7  1  1  7  7  7  1  1  2  8  7 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Megadictyon
  [1]  2  1  7  7  7  7  1 13  1  1 13 13 13  2 13 13  1 13 13 13  1  7  7  1  2
 [26]  1  7  1  1  7  1  7  1  7  1  1  7  7  2  1  7  2  1  1  1  2  2 13  1 13
 [51]  1  7  7  7  7  7  7 13  7  7  7  7  1  2  1  1  7  1  7  7  1  2  2  7  1
 [76]  1  1 13 13 13 13  1  1  7  1  1  7  7  7 13  1 13 13 13 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Jianshanopodia
  [1]  2  1  7  7  7  7  1  1  1  1  1  7  1  2 13  2  1  2  2  1  1  7  7  1  2
 [26]  1  7  1  1  7  1  7  1  7  1 13 13 13  2  1  7 13  1  1  1  2  2 13  2  1
 [51]  1  7  7  7  7  7  7 13  7  7  7  7  1  2  1  1  7  1  7  7  1  2  2  7  1
 [76]  1  1 13 13 13 13  1  1  7  1  1  7  7  7  1  1  2  1  2 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Hadranax
  [1]  2 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13  1 13
 [26] 13 13  1 13  7 13 13 13  7 13 13 13 13 13 13 13 13  1  1  1  2  2 13  2  1
 [51]  2  2  1  1  7  1  7 13  4  7  7  1  2 13  1  1  7  1  7  7  1  1  7  7  2
 [76]  1 13 13 13 13 13  1  1  7  1  1  7  7  7 13  1 13 13 13 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Kerygmachela
  [1]  2  1  7  7  7  7  1  1  1  1  1  7  1  2  1 13  1 13 13 13 13 13 13  1  2
 [26]  1  7  1  1  7  1  7  1  7  1  2  1  7  2  1  7  2  1  1  1  2  2  1  2  1
 [51]  2  2  1  1  7  1  7 13  4  7 13  1  2  2  1  2  1  1  2  1  1  1  7  7  1
 [76]  1  1  1  1  7  7  1  1  1  1  1  7  7  7  1  1  2  1  1 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13  1 13 13 13

$Pambdelurion
  [1]  2  1  7  7  7  7  1  1  1  1  2  1  1  2  1 13  1 13 13 13  1  7  7  1  2
 [26]  1  7  1  1  7  1  7  1  7  2  2  1  7  2  1  7 13  1  1  1  2 13 13 13 13
 [51] 13 13 13 13 13 13 13 13  7  7 13  7 13  2  1  2  1  1  2  1  1  1  7  7  1
 [76]  1  1  1  1  7  7  1  1  1  1  1  7  7  7 13 13 13 13 13 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13  2  2  1  7

$Opabinia
  [1]  2  1  7  7  7  7  1  1  1  1  3  2  1 13 13 13  1 13 13 13  2  2  2  1  2
 [26]  1  7  1  1  7  1  7  1  7  2  2  2  1  2  1  7  2  2  1  1  1  7  7  7  7
 [51]  1  7  7  7  7  7  7  7  7  7  7  7  7  2  1  2  1  1  2  2  1  1  7  7  1
 [76]  1  1  1  1  7  7  1  1  1  1  1  7  7  7 13  2  2  1  2 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Anomalocaris_canadensis
  [1]  2  2  1  2  1  1  1  1 13  1  2  2  1  2  2  2  1 13 13 13  2  2  2  1  2
 [26]  2  2  2  1  7  1  7  1  7  2  2  1  7  2  2  1  2  1  1  1  1  7  7  7  7
 [51]  1  7  7  7  7  7  7  7  7  7  7  7  7  2  1  2  1  1  1  2  1  1  7  7  1
 [76]  1  1  1  1  7  7  1  2  2  1  2  7  7  7  1  2  2  1  2 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13  2 13 13 13

$Peytoia_nathorsti
  [1]  2  2  1  2  2  1  1  1 13  1  2  2  1  2  2 13  1 13 13 13  2  2  2  1  2
 [26]  2  2  2  1  7  1  7  1  7  2  2  1  7  2  1  7  2  1  1  1  1  7  7  7  7
 [51]  1  7  7  7  7  7  7  7  7  7  7  7  7  2  1  2  1  1  2  2  1  1  7  7  1
 [76]  1  1  1  1  7  7  1  2  2  1  2  7  7  7  1  1  1  7  7 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Hurdia_victoria
  [1]  2  2  1  2  2  1  2  1 13  1  2  2  1  2  2  2  1  2  2  1  2  2  2  1  2
 [26]  2  2  2  1  7  1  7  1  7  2 13 13 13  2  1  7  2 13  1  1  1  7  7  7  7
 [51]  1  7  7  7  7  7  7  7  7  7  7  7  7 13  1  2  1  1  2  2  1  1  7  7  1
 [76]  1  1  1  1  7  7  1  2  1  1  2  7  7  7  1  1  2  1  2 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Aegirocassis_benmoulae
  [1]  2  2  1  2  2  1  2  1 13  1 13  2  1 13 13 13 13 13 13 13 13 13 13  1  2
 [26]  2  2  2  1  7  1  7  1  7  2 13 13 13  2  1  7  2  1  1  1  1  7  7  7  7
 [51]  1  7  7  7  7  7  7  7  7  7  7  7  7 13  1  2  1  1  2  2  1  1  7  7  1
 [76]  1  1  1  1  7  7  1  2  2  1 13  7  7  7  1  1  1  7  7 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Lyrarapax_unguispinus
  [1]  2  2  1  2  1  1  1  1 13  1  2  2  1  2 13 13 13 13 13 13  2  2  2  1  2
 [26]  2  2  2  1  7  1  7  1  7  2  2  1  7  2  1  7  2  1  1  1  1  7  7  7  7
 [51]  1  7  7  7  7  7  7  7  7  7  7  7  7  1  1  2  1  1  1  2  1  1  7  7  1
 [76]  1  1  1  1  7  7  1 13  2  2  2  7  7  7  1  2  2  1  2 13 13  2  1  1  2
[101] 13 13 13 13 13 13 13 13 13  2 13 13 13

$Schinderhannes
  [1]  2 13 13 13 13 13 13  1 13  1  2  2  1  2 13 13 13 13 13 13  2  2  2  1  2
 [26]  2  2 13 13  7  1  7  1  7  2  2  1  7  2  2  1 13 13 13 13 13 13 13 13 13
 [51] 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13
 [76] 13 13 13 13 13 13 13 13 13  2 13  7  7  7  1  1  2  1  2 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Fuxianhuia
  [1]  2  2  1  2  1  2  7  1  7  7  3  2  1  1  7 13  1 13 13 13  2  2  2  2  2
 [26]  2  1  7  2  1  7  7  7  2  2  2  2  2  7  7  7  7  2  2  1  7  7  7  7  7
 [51]  7  7  7  7  7  7  7  7  7  7  7  7  7  1  7  2  2  2  7  1  1  7  7  7  7
 [76]  7  1  1  1  7  7  1  1  7  1  1  7  7  2  7  1  2  1  2 13 13  2  3  2  2
[101] 13 13 13 13 13 13 13 13  2  2  1  1  7

$Chengjiangocaris
  [1]  2  2  1  2  1  2  7  1  7  7  3  2  1  1  7 13  1 13 13 13  2  2  2  2  2
 [26]  2  1  7  2  1  7  7  7  2  2  2  2  2  7  7  7  7  2  2  1  7  7  7  7  7
 [51]  7  7  7  7  7  7  7  7  7  7  7  7  7  1  7  2  2  2  7  1  1  7  7  7  7
 [76]  7  1  1  1  7  7  1  1  7  1  1  7  7  2  7  1  2  1  2 13  2 13 13 13 13
[101]  1 13  2 13 13 13 13 13 13 13 13 13 13

$Leanchoilia
  [1]  2  2  2  1  7  7  7  1  7  7  3  2  1  1  7 13  1 13 13 13  2  2  2  2  2
 [26]  2  1  7  2  2  7  7  7  1  2  2  2  2  7  7  7  7  2  2 13  7  7  7  7  7
 [51]  7  7  7  7  7  7  7  1  7  7  7  7  7  2  7  2  2  2  7  1  2  7  7  7  7
 [76]  7  1  2  1 10 13  1  1  7  1  1  7  7  1  7  1  1  7  7 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13 13 13 13 13

$Alalcomenaeus
  [1]  2  2  2  1  7  7  7  1  7  7  3  2  1  1  7 13  1 13 13 13  2  2  2  2  2
 [26] 13 13  7  2  2  7  7  7  1  2  2  2  2  7  7  7  7  2  2 13  7  7  7  7  7
 [51]  7  7  7  7  7  7  7  1  7  7  7  7  7  2  7  2  2  2  7  1  2  7  7  7  7
 [76]  7  1  2  1  1  7  1  1  7  1  1  7  7  1  7  1  1  7  7 13  2  2  3  2  2
[101]  1  1  1  7  7 13 13 13 13 13 13 13 13

$Misszhouia_longicaudata
  [1]  2  2  2  2  1  2  7  1  7  7  3  2  1  1  7 13  1 13 13 13  2  2  2  2  2
 [26]  2  1  7  2  1  7  7  7  1  2  2  2  2  7  7  7  7  2  2  2  7  7  7  7  7
 [51]  7  7  7  7  7  7  7  1  7  7  7  7  7  2  7  2  3  2  7  1  2  7  7  7  7
 [76]  7  1  2  1  1  7  1  1  7  1  1  7  7  1  7  1  1  7  7 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13  2 13 13 13

$Kuamaia_lata
  [1]  2  2  2  2  1  2  7  1  7  7  3  2  1  1  7 13  1 13 13 13  2  2  2  2  2
 [26]  2  1  7  2  1  7  7  7  1  2  2  2  2  7  7  7  7  2  2  2  7  7  7  7  7
 [51]  7  7  7  7  7  7  7  1  7  7  7  7  7  2  7  2  3  2  7  1  2  7  7  7  7
 [76]  7  1  2  1  3  2  1  1  7  1  1  7  7  1  7  1  1  7  7 13 13 13 13 13 13
[101] 13 13 13 13 13 13 13 13 13  2 13 13 13

attr(,"class")
[1] "phyDat"
attr(,"weight")
  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[112] 1 1
attr(,"nr")
[1] 113
attr(,"nc")
[1] 7
attr(,"index")
  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  15  16  17
 [19]  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
 [37]  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
 [55]  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
 [73]  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
 [91]  90  91  92  93  94  95  96  97  98  99  97 100 101 102 103 104 105 106
[109] 107 108 109 110 111 112 113
attr(,"levels")
[1] "0" "1" "2" "3" "4" "5" "-"
attr(,"allLevels")
 [1] "0" "1" "2" "3" "4" "5" "-" "a" "b" "c" "d" "e" "?"
attr(,"type")
[1] "USER"
attr(,"contrast")
      0 1 2 3 4 5 -
 [1,] 1 0 0 0 0 0 0
 [2,] 0 1 0 0 0 0 0
 [3,] 0 0 1 0 0 0 0
 [4,] 0 0 0 1 0 0 0
 [5,] 0 0 0 0 1 0 0
 [6,] 0 0 0 0 0 1 0
 [7,] 0 0 0 0 0 0 1
 [8,] 0 1 1 0 0 0 0
 [9,] 1 0 0 0 0 0 1
[10,] 1 0 1 0 0 0 0
[11,] 1 1 0 0 0 0 0
[12,] 0 1 0 0 0 0 1
[13,] 1 1 1 1 1 1 1
> 
> 
> 
> cleanEx()
> nameEx("MRCA")
> ### * MRCA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MRCA
> ### Title: Most recent common ancestor
> ### Aliases: MRCA
> 
> ### ** Examples
> 
> tree <- BalancedTree(7)
> 
> # Verify that node numbering increases away from root
> plot(tree)
> nodelabels()
> 
> # ListAncestors expects a tree in Preorder
> tree <- Preorder(tree)
> edge <- tree$edge
> ancestors <- ListAncestors(edge[, 1], edge[, 2])
> MRCA(1, 4, ancestors)
[1] 9
> 
> # If a tree must be in postorder, use:
> tree <- Postorder(tree)
> edge <- tree$edge
> ancestors <- lapply(seq_len(max(edge)), ListAncestors,
+                     parent = edge[, 1], child = edge[, 2])
> 
> 
> 
> 
> cleanEx()
> nameEx("MSTEdges")
> ### * MSTEdges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MSTEdges
> ### Title: Minimum spanning tree
> ### Aliases: MSTEdges MSTLength
> 
> ### ** Examples
> 
> # Corners of an almost-regular octahedron
> points <- matrix(c(0, 0, 2, 2, 1.1, 1,
+                    0, 2, 0, 2, 1, 1.1,
+                    0, 0, 0, 0, 1, -1), 6)
> distances <- dist(points)
> mst <- MSTEdges(distances)
> MSTLength(distances, mst)
[1] 8.496869
> plot(points[, 1:2], ann = FALSE, asp = 1)
> MSTEdges(distances, TRUE, x = points[, 1], y = points[, 2], lwd = 2)
> 
> 
> 
> cleanEx()
> nameEx("MakeTreeBinary")
> ### * MakeTreeBinary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MakeTreeBinary
> ### Title: Generate binary tree by collapsing polytomies
> ### Aliases: MakeTreeBinary
> 
> ### ** Examples
> 
> MakeTreeBinary(CollapseNode(PectinateTree(7), c(9, 11, 13)))

Phylogenetic tree with 7 tips and 6 internal nodes.

Tip labels:
  t1, t2, t3, t4, t5, t6, ...

Rooted; no branch lengths.
> UnrootTree(MakeTreeBinary(StarTree(5)))

Phylogenetic tree with 5 tips and 3 internal nodes.

Tip labels:
  t1, t2, t3, t4, t5

Unrooted; no branch lengths.
> 
> 
> 
> cleanEx()
> nameEx("MatrixToPhyDat")
> ### * MatrixToPhyDat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MatrixToPhyDat
> ### Title: Convert between matrices and 'phyDat' objects
> ### Aliases: MatrixToPhyDat PhyDatToMatrix
> 
> ### ** Examples
> 
> tokens <- matrix(c(0, 0, "0", 0, 0,
+                    0, 0, "1", 0, 1,
+                    0, 0, "1", 0, 1,
+                    0, 0, "2", 0, 1,
+                    1, 1, "-", 1, 0,
+                    1, 1, "2", 1, "{01}"),
+                    nrow = 6, ncol = 5, byrow = TRUE,
+                    dimnames = list(
+                      paste0("Taxon_", LETTERS[1:6]),
+                      paste0("Char_", 1:5)))
>                    
> MatrixToPhyDat(tokens)
$Taxon_A
[1] 1 1 1

$Taxon_B
[1] 1 2 2

$Taxon_C
[1] 1 2 2

$Taxon_D
[1] 1 3 2

$Taxon_E
[1] 2 4 1

$Taxon_F
[1] 2 3 5

attr(,"weight")
[1] 3 1 1
attr(,"nr")
[1] 3
attr(,"nc")
[1] 4
attr(,"index")
[1] 1 1 2 1 3
attr(,"levels")
[1] "-" "0" "1" "2"
attr(,"allLevels")
[1] "0"    "1"    "2"    "-"    "{01}"
attr(,"type")
[1] "USER"
attr(,"contrast")
     - 0 1 2
[1,] 0 1 0 0
[2,] 0 0 1 0
[3,] 0 0 0 1
[4,] 1 0 0 0
[5,] 0 1 1 0
attr(,"class")
[1] "phyDat"
> data("Lobo", package = "TreeTools")
> head(PhyDatToMatrix(Lobo.phy)[, 91:93])
                       [,1] [,2] [,3]
Tubiluchus_Priapulida  "-"  "0"  "0" 
Cricocosmia            "-"  "0"  "0" 
Aysheaia               "0"  "0"  "1" 
Siberion               "?"  "0"  "?" 
Onychodictyon_ferox    "0"  "0"  "1" 
Onychodictyon_gracilis "1"  "0"  "1" 
> 
> 
> 
> cleanEx()
> nameEx("N1Spr")
> ### * N1Spr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: N1Spr
> ### Title: Number of trees one SPR step away
> ### Aliases: N1Spr IC1Spr
> 
> ### ** Examples
> 
> N1Spr(4:6)
[1]  2 12 30
> IC1Spr(5)
[1] 0.2064509
> 
> 
> 
> 
> cleanEx()
> nameEx("NDescendants")
> ### * NDescendants
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NDescendants
> ### Title: Count descendants for each node in a tree
> ### Aliases: NDescendants
> 
> ### ** Examples
> 
> tree <- CollapseNode(BalancedTree(8), 12:15)
> NDescendants(tree)
[1] 5 3 2
> plot(tree)
> nodelabels(NDescendants(tree))
> 
> 
> 
> 
> cleanEx()
> nameEx("NJTree")
> ### * NJTree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NJTree
> ### Title: Generate a neighbour joining tree
> ### Aliases: NJTree
> 
> ### ** Examples
> 
> data("Lobo")
> NJTree(Lobo.phy)

Phylogenetic tree with 48 tips and 47 internal nodes.

Tip labels:
  Tubiluchus_Priapulida, Cricocosmia, Aysheaia, Siberion, Onychodictyon_ferox, Onychodictyon_gracilis, ...

Rooted; no branch lengths.
> 
> 
> 
> 
> cleanEx()
> nameEx("NPartitionPairs")
> ### * NPartitionPairs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NPartitionPairs
> ### Title: Distributions of tips consistent with a partition pair
> ### Aliases: NPartitionPairs
> 
> ### ** Examples
> 
> NPartitionPairs(c(2, 1, 1, 3))
[1] 12
> 
> 
> 
> cleanEx()
> nameEx("NRooted")
> ### * NRooted
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NRooted
> ### Title: Number of trees
> ### Aliases: NRooted NUnrooted NRooted64 NUnrooted64 LnUnrooted
> ###   LnUnrooted.int Log2Unrooted Log2Unrooted.int LnRooted LnRooted.int
> ###   Log2Rooted Log2Rooted.int LnUnrootedSplits Log2UnrootedSplits
> ###   NUnrootedSplits LnUnrootedMult Log2UnrootedMult NUnrootedMult
> 
> ### ** Examples
> 
> NRooted(10)
[1] 34459425
> NUnrooted(10)
[1] 2027025
> LnRooted(10)
[1] 17.35529
> LnUnrooted(10)
[1] 14.52208
> Log2Unrooted(10)
[1] 20.95093
> # Number of trees consistent with a character whose states are
> # 00000 11111 222
> NUnrootedMult(c(5,5,3))
[1] 694575
> 
> NUnrooted64(18)
integer64
[1] 191898783962510625
> LnUnrootedSplits(c(2,4))
[1] 2.70805
> LnUnrootedSplits(3, 3)
[1] 2.197225
> Log2UnrootedSplits(c(2,4))
[1] 3.906891
> Log2UnrootedSplits(3, 3)
[1] 3.169925
> NUnrootedSplits(c(2,4))
[1] 15
> NUnrootedSplits(3, 3)
[1] 9
> 
> 
> 
> cleanEx()
> nameEx("NSplits")
> ### * NSplits
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NSplits
> ### Title: Number of distinct splits
> ### Aliases: NSplits NPartitions NSplits.phylo NSplits.list
> ###   NSplits.multiPhylo NSplits.Splits NSplits.numeric NSplits.NULL
> ###   NSplits.ClusterTable NSplits.character
> 
> ### ** Examples
> 
> NSplits(8L)
[1] 5
> NSplits(PectinateTree(8))
[1] 5
> NSplits(as.Splits(BalancedTree(8)))
[1] 5
> 
> 
> 
> cleanEx()
> nameEx("NewickTree")
> ### * NewickTree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NewickTree
> ### Title: Write Newick Tree
> ### Aliases: NewickTree
> 
> ### ** Examples
> 
> NewickTree(BalancedTree(LETTERS[4:9]))
[1] "(((D,E),F),((G,H),I));"
> 
> 
> 
> 
> cleanEx()
> nameEx("Neworder")
> ### * Neworder
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Neworder
> ### Title: Reorder edges of a phylogenetic tree
> ### Aliases: Neworder NeworderPruningwise NeworderPhylo
> ### Keywords: internal
> 
> ### ** Examples
> 
> nTip <- 8L
> tree <- BalancedTree(nTip)
> edge <- tree[["edge"]]
> pruningwise <- NeworderPruningwise(nTip, tree$Nnode, edge[, 1], edge[, 2],
+                                    dim(edge)[1])
> cladewise <- NeworderPhylo(nTip, edge[, 1], edge[, 2], dim(edge)[1], 1L)
> postorder <- NeworderPhylo(nTip, edge[, 1], edge[, 2], dim(edge)[1], 2L)
> 
> tree[["edge"]] <- tree[["edge"]][pruningwise, ]
> 
> 
> 
> 
> cleanEx()
> nameEx("NodeDepth")
> ### * NodeDepth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NodeDepth
> ### Title: Distance of each node from tree exterior
> ### Aliases: NodeDepth
> 
> ### ** Examples
> 
> tree <- CollapseNode(BalancedTree(10), c(12:13, 19))
> plot(tree)
> nodelabels(NodeDepth(tree, includeTips = FALSE))
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("NodeOrder")
> ### * NodeOrder
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NodeOrder
> ### Title: Order of each node in a tree
> ### Aliases: NodeOrder
> 
> ### ** Examples
> 
> tree <- CollapseNode(BalancedTree(8), 12:15)
> NodeOrder(tree)
 [1] 1 1 1 1 1 1 1 1 5 4 3
> plot(tree)
> nodelabels(NodeOrder(tree, internalOnly = TRUE))
> 
> 
> 
> 
> cleanEx()
> nameEx("NonDuplicateRoot")
> ### * NonDuplicateRoot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NonDuplicateRoot
> ### Title: Non-duplicate root
> ### Aliases: NonDuplicateRoot
> ### Keywords: internal
> 
> ### ** Examples
> 
> tree <- Preorder(BalancedTree(8))
> edge <- tree$edge
> parent <- edge[, 1]
> child <- edge[, 2]
> 
> which(!NonDuplicateRoot(parent, child))
[1] 1
> 
> 
> 
> 
> cleanEx()
> nameEx("PairwiseDistances")
> ### * PairwiseDistances
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PairwiseDistances
> ### Title: Distances between each pair of trees
> ### Aliases: PairwiseDistances
> 
> ### ** Examples
> 
> trees <- list(BalancedTree(8), PectinateTree(8), StarTree(8))
> TCIDiff <- function(tree1, tree2) {
+   TotalCopheneticIndex(tree1) - TotalCopheneticIndex(tree2)
+ }
> PairwiseDistances(trees, TCIDiff, 1)
    1   2   3
1     -40  16
2 -40      56
3  16  56    
> TCIRange <- function(tree1, tree2) {
+   range(TotalCopheneticIndex(tree1), TotalCopheneticIndex(tree2))
+ }
> PairwiseDistances(trees, TCIRange, 2)
[[1]]
   1  2  3
1    16  0
2 16     0
3  0  0   

[[2]]
   1  2  3
1    56 16
2 56    56
3 16 56   

> 
> 
> 
> cleanEx()
> nameEx("PathLengths")
> ### * PathLengths
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PathLengths
> ### Title: Calculate length of paths between each pair of vertices within
> ###   tree
> ### Aliases: PathLengths
> 
> ### ** Examples
> 
> tree <- rtree(6)
> plot(tree)
> add.scale.bar()
> nodelabels()
> tiplabels()
> PathLengths(tree)
   start end    length
1      7   1 0.2059746
2      7   2 2.0175247
3      8   2 1.8409680
4      9   2 1.1539451
5     10   2 0.7698414
6      7   3 2.4630011
7      8   3 2.2864443
8      9   3 1.5994215
9     10   3 1.2153178
10    11   3 0.7176185
11     7   4 2.7372887
12     8   4 2.5607319
13     9   4 1.8737091
14    10   4 1.4896053
15    11   4 0.9919061
16     7   5 1.2436148
17     8   5 1.0670580
18     9   5 0.3800352
19     7   6 0.9540020
20     8   6 0.7774452
21     7   8 0.1765568
22     7   9 0.8635796
23     8   9 0.6870228
24     7  10 1.2476833
25     8  10 1.0711266
26     9  10 0.3841037
27     7  11 1.7453826
28     8  11 1.5688258
29     9  11 0.8818030
30    10  11 0.4976992
> 
> 
> 
> cleanEx()
> nameEx("PhyToString")
> ### * PhyToString
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: StringToPhyDat
> ### Title: Convert between strings and 'phyDat' objects
> ### Aliases: StringToPhyDat StringToPhydat PhyToString PhyDatToString
> ###   PhydatToString
> 
> ### ** Examples
> 
> StringToPhyDat("-?01231230?-", c("Lion", "Gazelle"), byTaxon = TRUE)
$Lion
[1] 1 3 5 2 4 6

$Gazelle
[1] 2 4 6 5 3 1

attr(,"weight")
[1] 1 1 1 1 1 1
attr(,"nr")
[1] 6
attr(,"nc")
[1] 5
attr(,"index")
[1] 1 2 3 4 5 6
attr(,"levels")
[1] "-" "0" "1" "2" "3"
attr(,"levels")attr(,".match.hash")
<hash table>
attr(,"allLevels")
[1] "-" "1" "?" "2" "0" "3"
attr(,"type")
[1] "USER"
attr(,"contrast")
     - 0 1 2 3
[1,] 1 0 0 0 0
[2,] 0 0 1 0 0
[3,] 1 1 1 1 1
[4,] 0 0 0 1 0
[5,] 0 1 0 0 0
[6,] 0 0 0 0 1
attr(,"class")
[1] "phyDat"
> # encodes the following matrix:
> # Lion     -?0123
> # Gazelle  1230?-
> 
> fileName <- paste0(system.file(package = "TreeTools"),
+                    "/extdata/input/dataset.nex")
> phyDat <- ReadAsPhyDat(fileName)
> PhyToString(phyDat, concatenate = FALSE)
[1] "0000000" "0000000" "1111?00" "111??11" "1111?11"
> 
> 
> 
> 
> cleanEx()
> nameEx("ReadCharacters")
> ### * ReadCharacters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ReadCharacters
> ### Title: Read phylogenetic characters from file
> ### Aliases: ReadCharacters ReadTntCharacters ReadNotes ReadAsPhyDat
> ###   ReadTntAsPhyDat PhyDat
> 
> ### ** Examples
> 
> fileName <- paste0(system.file(package = "TreeTools"),
+                    "/extdata/input/dataset.nex")
> ReadCharacters(fileName)
        Character one Character two lots-of-punctuation, and "so on"!
taxon_a "0"           "0"           "0"                              
taxon_b "0"           "0"           "0"                              
taxon_c "1"           "1"           "1"                              
taxon_d "1"           "1"           "1"                              
taxon_e "1"           "1"           "1"                              
        Character n Character 5 Character 6 final character
taxon_a "0"         "0"         "0"         "0"            
taxon_b "0"         "0"         "0"         "0"            
taxon_c "1"         "?"         "0"         "0"            
taxon_d "?"         "?"         "1"         "1"            
taxon_e "1"         "?"         "1"         "1"            
attr(,"state.labels")
attr(,"state.labels")[[1]]
[1] "absent"  "present"

attr(,"state.labels")[[2]]
[1] "absent"  "present"

attr(,"state.labels")[[3]]
[1] "here"       "there"      "everywhere"

attr(,"state.labels")[[4]]
[1] "a long description" "present"           

attr(,"state.labels")[[5]]
[1] "simple"                "more complex"          "with (parentheses)"   
[4] "more complex, 6 still"

attr(,"state.labels")[[6]]
[1] "this one has"   "multiple lines"

attr(,"state.labels")[[7]]
[1] "absent"  "present"

> 
> fileName <- paste0(system.file(package = "TreeTools"),
+                    "/extdata/tests/continuous.nex")
> 
> continuous <- ReadCharacters(fileName, encoding = "UTF8")
> 
> # To convert from strings to numbers:
> at <- attributes(continuous)
> continuous <- suppressWarnings(as.numeric(continuous))
> attributes(continuous) <- at
> continuous
           [,1]  [,2]  [,3]  [,4]  [,5]  [,6]
A_taxon   1.111 1.000 1.330 1.444 1.555 1.666
B_alienus 2.111 2.222 2.333    NA 2.550 2.666
C_andinus 3.111 3.222 3.333 3.444 3.555 3.666
> 
> 
> 
> cleanEx()
> nameEx("ReadTntTree")
> ### * ReadTntTree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ReadTntTree
> ### Title: Parse TNT Tree
> ### Aliases: ReadTntTree TntText2Tree TNTText2Tree
> 
> ### ** Examples
> 
> # In the examples below, TNT has read a matrix from
> # "c:/TreeTools/input/dataset.nex"
> # The results of an analysis were written to
> # "c:/TreeTools/output/results1.tnt"
> #
> # results1.tnt will contain a hard-coded reference to
> # "c:/TreeTools/input/dataset.nex".
> 
> # On the original machine (but not elsewhere), it would be possible to read
> # this hard-coded reference from results.tnt:
> # ReadTntTree("output/results1.tnt")
> 
> # These datasets are provided with the "TreeTools" package, which will
> # probably not be located at c:/TreeTools on your machine:
> 
> oldWD <- getwd() # Remember the current working directory
> setwd(system.file(package = "TreeTools"))
> 
> # If taxon names were saved within the file (using `taxname=` in TNT),
> # then our job is easy:
> ReadTntTree("extdata/output/named.tre")

Phylogenetic tree with 5 tips and 4 internal nodes.

Tip labels:
  taxon_a, taxon_b, taxon_c, taxon_d, taxon_e

Rooted; no branch lengths.
> 
> # But if taxa were compressed to numbers (using `taxname-`), we need to
> # look up the original matrix in order to dereference the tip names.
> #
> # We need to extract the relevant file path from the end of the
> # hard-coded path in the original file.
> #
> # We are interested in the last two elements of
> # c:/TreeTools/input/dataset.nex
> #                2      1
> #
> # "." means "relative to the current directory"
> ReadTntTree("extdata/output/numbered.tre", "./extdata", 2)
2 phylogenetic trees
> 
> # If working in a lower subdirectory
> setwd("./extdata/otherfolder")
> 
> # then it will be necessary to navigate up the directory path with "..":
> ReadTntTree("../output/numbered.tre", "..", 2)
2 phylogenetic trees
> 
> 
> setwd(oldWD) # Restore original working directory
> 
> TNTText2Tree("(A (B (C (D E ))));")

Phylogenetic tree with 5 tips and 4 internal nodes.

Tip labels:
  A, B, C, D, E

Rooted; no branch lengths.
> 
> 
> 
> 
> cleanEx()
> nameEx("Renumber")
> ### * Renumber
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Renumber
> ### Title: Renumber a tree's nodes and tips
> ### Aliases: Renumber
> 
> ### ** Examples
> 
> tree <- RandomTree(letters[1:10])
> Renumber(tree)

Phylogenetic tree with 10 tips and 8 internal nodes.

Tip labels:
  c, e, d, b, i, g, ...

Unrooted; no branch lengths.
> 
> 
> 
> 
> cleanEx()
> nameEx("RenumberTips")
> ### * RenumberTips
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RenumberTips
> ### Title: Renumber a tree's tips
> ### Aliases: RenumberTips RenumberTips.phylo RenumberTips.multiPhylo
> ###   RenumberTips.list RenumberTips.NULL
> 
> ### ** Examples
> 
> data("Lobo") # Loads the phyDat object Lobo.phy
> tree <- RandomTree(Lobo.phy)
> tree <- RenumberTips(tree, names(Lobo.phy))
> 
> 
> 
> 
> cleanEx()
> nameEx("RightmostCharacter")
> ### * RightmostCharacter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RightmostCharacter
> ### Title: Rightmost character of string
> ### Aliases: RightmostCharacter
> 
> ### ** Examples
> 
> RightmostCharacter("Hello, World!")
[1] "!"
> 
> 
> 
> 
> cleanEx()
> nameEx("RoguePlot")
> ### * RoguePlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RoguePlot
> ### Title: Visualize position of rogue taxa
> ### Aliases: RoguePlot
> 
> ### ** Examples
> 
> trees <- list(read.tree(text = "(a, (b, (c, (rogue, (d, (e, f))))));"),
+               read.tree(text = "(a, (b, (c, (rogue, (d, (e, f))))));"),
+               read.tree(text = "(a, (b, (c, (rogue, (d, (e, f))))));"),
+               read.tree(text = "(a, (b, (c, (rogue, (d, (e, f))))));"),
+               read.tree(text = "(rogue, (a, (b, (c, (d, (e, f))))));"),
+               read.tree(text = "((rogue, a), (b, (c, (d, (e, f)))));"),
+               read.tree(text = "(a, (b, ((c, d), (rogue, (e, f)))));"),
+               read.tree(text = "(a, (b, ((c, (rogue, d)), (e, f))));"),
+               read.tree(text = "(a, (b, (c, (d, (rogue, (e, f))))));"))
> RoguePlot(trees, "rogue", legend = "topleft", legend.inset = 0.02)
> 
> 
> 
> cleanEx()
> nameEx("RootNode")
> ### * RootNode
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RootNode
> ### Title: Which node is a tree's root?
> ### Aliases: RootNode
> 
> ### ** Examples
> 
> RootNode(BalancedTree(8))
[1] 9
> RootNode(UnrootTree(BalancedTree(8)))
[1] 9
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("RootTree")
> ### * RootTree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RootTree
> ### Title: Root or unroot a phylogenetic tree
> ### Aliases: RootTree RootOnNode UnrootTree
> 
> ### ** Examples
> 
> tree <- PectinateTree(8)
> plot(tree)
> ape::nodelabels()
> 
> plot(RootTree(tree, c("t6", "t7")))
> 
> plot(RootOnNode(tree, 12))
> plot(RootOnNode(tree, 2))
> 
> 
> 
> 
> cleanEx()
> nameEx("SampleOne")
> ### * SampleOne
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SampleOne
> ### Title: Quickly sample
> ### Aliases: SampleOne
> ### Keywords: internal
> 
> ### ** Examples
> 
> SampleOne(9:10)
[1] 9
> SampleOne(letters[1:4])
[1] "d"
> 
> 
> 
> 
> cleanEx()
> nameEx("SortTree")
> ### * SortTree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SortTree
> ### Title: Sort tree
> ### Aliases: SortTree SortTree.phylo SortTree.list SortTree.multiPhylo
> 
> ### ** Examples
> 
> messyTree <- as.phylo(10, 6)
> plot(messyTree)
> 
> sorted <- SortTree(messyTree)
> plot(sorted)
> ape::nodelabels()
> ape::edgelabels()
> ape::tiplabels(adj = c(2, 1/3))
> 
> plot(SortTree(messyTree, how = "tip"))
> 
> 
> 
> cleanEx()
> nameEx("SplitFrequency")
> ### * SplitFrequency
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SplitFrequency
> ### Title: Frequency of splits
> ### Aliases: SplitFrequency SplitNumber ForestSplits TreeSplits
> 
> ### ** Examples
> 
> # An example forest of 100 trees, some identical
> forest <- as.phylo(c(1, rep(10, 79), rep(100, 15), rep(1000, 5)), nTip = 9)
> 
> # Generate an 80% consensus tree
> cons <- ape::consensus(forest, p = 0.8)
> plot(cons)
> 
> # Calculate split frequencies
> splitFreqs <- SplitFrequency(cons, forest)
> 
> # Optionally, colour edges by corresponding frequency.
> # Note that not all edges are associated with a unique split
> # (and two root edges may be associated with one split - not handled here)
> edgeSupport <- rep(1, nrow(cons$edge)) # Initialize trivial splits to 1
> childNode <- cons$edge[, 2]
> edgeSupport[match(names(splitFreqs), childNode)] <- splitFreqs / 100
> 
> plot(cons, edge.col = SupportColour(edgeSupport), edge.width = 3)
> 
> # Annotate nodes by frequency 
> LabelSplits(cons, splitFreqs, unit = "%",
+             col = SupportColor(splitFreqs / 100),
+             frame = "none", pos = 3L)
> 
> 
> 
> 
> cleanEx()
> nameEx("SplitInformation")
> ### * SplitInformation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SplitInformation
> ### Title: Phylogenetic information content of splitting leaves into two
> ###   partitions
> ### Aliases: SplitInformation MultiSplitInformation
> 
> ### ** Examples
> 
> # Eight leaves can be split evenly:
> SplitInformation(4, 4)
[1] 5.529821
> 
> # or unevenly, which is less informative:
> SplitInformation(2, 6)
[1] 3.459432
> 
> # A single split that evenly subdivides 50 leaves contains more information
> # that seven maximally uneven splits on the same leaves:
> SplitInformation(25, 25)
[1] 47.50376
> 7 * SplitInformation(2, 48)
[1] 45.98899
> # Three ways to split eight leaves into multiple partitions:
> MultiSplitInformation(c(2, 2, 4))
[1] 5.97728
> MultiSplitInformation(c(2, 3, 3))
[1] 6.714246
> MultiSplitInformation(rep(2, 4))
[1] 6.714246
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("SplitMatchProbability")
> ### * SplitMatchProbability
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SplitMatchProbability
> ### Title: Probability of matching this well
> ### Aliases: SplitMatchProbability LnSplitMatchProbability
> 
> ### ** Examples
> 
> split1 <- as.Splits(c(rep(TRUE, 4), rep(FALSE, 4)))
> split2 <- as.Splits(c(rep(TRUE, 3), rep(FALSE, 5)))
> SplitMatchProbability(split1, split2)
[1] 0.1428571
> LnSplitMatchProbability(split1, split2)
[1] -1.94591
> 
> 
> 
> cleanEx()
> nameEx("Splits")
> ### * Splits
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Splits
> ### Title: Convert object to 'Splits'
> ### Aliases: Splits as.Splits as.Splits.phylo as.Splits.multiPhylo
> ###   as.Splits.Splits as.Splits.list as.Splits.matrix as.Splits.logical
> ###   as.Splits.character as.logical.Splits
> 
> ### ** Examples
> 
> splits <- as.Splits(BalancedTree(letters[1:6]))
> summary(splits)
3 bipartition splits dividing 6 tips, a .. f
     123456
 8   ***...
 9   **....
 11  ...**.

 Tip 1: a	 Tip 2: b	 Tip 3: c	 Tip 4: d	 Tip 5: e	
 Tip 6: f	> TipsInSplits(splits)
 8  9 11 
 3  2  2 
> summary(!splits)
3 bipartition splits dividing 6 tips, a .. f
     123456
 8   ...***
 9   ..****
 11  ***..*

 Tip 1: a	 Tip 2: b	 Tip 3: c	 Tip 4: d	 Tip 5: e	
 Tip 6: f	> TipsInSplits(!splits)
 8  9 11 
 3  4  4 
> 
> length(splits + !splits)
[1] 6
> length(unique(splits + !splits))
[1] 3
> 
> summary(c(splits[[2:3]], !splits[[1:2]]))
4 bipartition splits dividing 6 tips, a .. f
     123456
 9   **....
 11  ...**.
 8   ...***
 9   ..****

 Tip 1: a	 Tip 2: b	 Tip 3: c	 Tip 4: d	 Tip 5: e	
 Tip 6: f	> 
> moreSplits <- as.Splits(PectinateTree(letters[6:1]), tipLabel = splits)
> print(moreSplits, details = TRUE)
3 bipartition splits dividing 6 tips, a .. f
     123456
 9   ****..
 10  ***...
 11  **....> match(splits, moreSplits)
[1]  2  3 NA
> moreSplits %in% splits
    9    10    11 
FALSE  TRUE  TRUE 
> 
> as.Splits("....**", letters[1:6])
1 bipartition split dividing 6 tips, a .. f> 
> 
> 
> 
> cleanEx()
> nameEx("SplitsInBinaryTree")
> ### * SplitsInBinaryTree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SplitsInBinaryTree
> ### Title: Maximum splits in an _n_-leaf tree
> ### Aliases: SplitsInBinaryTree SplitsInBinaryTree.list
> ###   SplitsInBinaryTree.multiPhylo SplitsInBinaryTree.numeric
> ###   SplitsInBinaryTree.NULL SplitsInBinaryTree.default
> ###   SplitsInBinaryTree.Splits SplitsInBinaryTree.phylo
> 
> ### ** Examples
> 
> tree <- BalancedTree(8)
> SplitsInBinaryTree(tree)
[1] 5
> SplitsInBinaryTree(as.Splits(tree))
[1] 5
> SplitsInBinaryTree(8)
[1] 5
> SplitsInBinaryTree(list(tree, tree))
[1] 5 5
> 
> 
> 
> cleanEx()
> nameEx("Stemwardness")
> ### * Stemwardness
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Stemwardness
> ### Title: "Stemwardness" of a leaf
> ### Aliases: Stemwardness SisterSize SisterSize.numeric
> ###   SisterSize.character RootNodeDistance RootNodeDistance.numeric
> ###   RootNodeDistance.character RootNodeDist
> 
> ### ** Examples
> 
> bal8 <- BalancedTree(8)
> pec8 <- PectinateTree(8)
> 
> SisterSize(bal8, 3)
[1] 1
> SisterSize(pec8, "t3")
[1] 5
> SisterSize(RootTree(pec8, "t3"), "t3")
[1] 7
> 
> RootNodeDist(bal8, 3)
[1] 2
> RootNodeDist(pec8, "t3")
[1] 2
> RootNodeDist(RootTree(pec8, "t3"), "t3")
[1] 0
> 
> 
> 
> cleanEx()
> nameEx("Subsplit")
> ### * Subsplit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Subsplit
> ### Title: Subset of a split on fewer leaves
> ### Aliases: Subsplit
> 
> ### ** Examples
> 
> splits <- as.Splits(PectinateTree(letters[1:9]))
> splits
6 bipartition splits dividing 9 tips, a .. i> efgh <- Subsplit(splits, tips = letters[5:8], keepAll = TRUE)
> summary(efgh)
4 bipartition splits (3 trivial) dividing 4 tips, e .. h
     1234
 12  ****
 15  .***
 16  ..**
 17  ...*

 Tip 1: e	 Tip 2: f	 Tip 3: g	 Tip 4: h	> 
> TrivialSplits(efgh)
   12    15    16    17 
 TRUE  TRUE FALSE  TRUE 
> 
> summary(Subsplit(splits, tips = letters[5:8], keepAll = FALSE))
1 bipartition split dividing 4 tips, e .. h
     1234
 16  ..**

 Tip 1: e	 Tip 2: f	 Tip 3: g	 Tip 4: h	> 
> 
> 
> cleanEx()
> nameEx("Subtree")
> ### * Subtree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Subtree
> ### Title: Extract a subtree
> ### Aliases: Subtree
> 
> ### ** Examples
> 
> tree <- Preorder(BalancedTree(8))
> plot(tree)
> ape::nodelabels()
> ape::nodelabels(13, 13, bg="yellow")
> 
> plot(Subtree(tree, 13))
> 
> 
> 
> 
> cleanEx()
> nameEx("SupportColour")
> ### * SupportColour
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SupportColour
> ### Title: Colour for node support value
> ### Aliases: SupportColour SupportColor
> 
> ### ** Examples
> 
> SupportColour((-1):4 / 4, show1 = FALSE)
[1] "red"       "#D33F6A"   "#E495A5"   "#E2E2E2"   "#9DA8E2"   "#ffffff00"
> 
> # An example forest of 100 trees, some identical
> forest <- as.phylo(c(1, rep(10, 79), rep(100, 15), rep(1000, 5)), nTip = 9)
> 
> # Generate an 80% consensus tree
> cons <- ape::consensus(forest, p = 0.8)
> plot(cons)
> 
> # Calculate split frequencies
> splitFreqs <- SplitFrequency(cons, forest)
> 
> # Optionally, colour edges by corresponding frequency.
> # Note that not all edges are associated with a unique split
> # (and two root edges may be associated with one split - not handled here)
> edgeSupport <- rep(1, nrow(cons$edge)) # Initialize trivial splits to 1
> childNode <- cons$edge[, 2]
> edgeSupport[match(names(splitFreqs), childNode)] <- splitFreqs / 100
> 
> plot(cons, edge.col = SupportColour(edgeSupport), edge.width = 3)
> 
> # Annotate nodes by frequency 
> LabelSplits(cons, splitFreqs, unit = "%",
+             col = SupportColor(splitFreqs / 100),
+             frame = "none", pos = 3L)
> 
> 
> 
> 
> cleanEx()
> nameEx("TipLabels")
> ### * TipLabels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TipLabels
> ### Title: Extract tip labels
> ### Aliases: TipLabels TipLabels.matrix TipLabels.phylo TipLabels.default
> ###   TipLabels.phyDat TipLabels.MixedBase TipLabels.TreeNumber
> ###   TipLabels.Splits TipLabels.list AllTipLabels AllTipLabels.list
> ###   AllTipLabels.multiPhylo AllTipLabels.phylo AllTipLabels.Splits
> ###   AllTipLabels.TreeNumber AllTipLabels.matrix TipLabels.multiPhylo
> ###   TipLabels.character TipLabels.numeric
> 
> ### ** Examples
> 
> TipLabels(BalancedTree(letters[5:1]))
[1] "e" "d" "c" "b" "a"
> TipLabels(5)
[1] "t1" "t2" "t3" "t4" "t5"
> 
> data("Lobo")
> head(TipLabels(Lobo.phy))
[1] "Tubiluchus_Priapulida"  "Cricocosmia"            "Aysheaia"              
[4] "Siberion"               "Onychodictyon_ferox"    "Onychodictyon_gracilis"
> 
> AllTipLabels(c(BalancedTree(4), PectinateTree(8)))
[1] "t1" "t2" "t3" "t4" "t5" "t6" "t7" "t8"
> 
> 
> 
> 
> cleanEx()
> nameEx("TipsInSplits")
> ### * TipsInSplits
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TipsInSplits
> ### Title: Tips contained within splits
> ### Aliases: TipsInSplits TipsInSplits.Splits TipsInSplits.phylo
> ###   SplitImbalance SplitImbalance.Splits SplitImbalance.phylo
> 
> ### ** Examples
> 
> tree <- PectinateTree(8)
> splits <- as.Splits(tree)
> TipsInSplits(splits)
11 12 13 14 15 
 6  5  4  3  2 
> 
> plot(tree)
> LabelSplits(tree, as.character(splits), frame = "none", pos = 3L, cex = 0.7)
> LabelSplits(tree, TipsInSplits(splits), unit = " tips", frame = "none",
+             pos = 1L)
> 
> 
> 
> 
> cleanEx()
> nameEx("TotalCopheneticIndex")
> ### * TotalCopheneticIndex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TotalCopheneticIndex
> ### Title: Total Cophenetic Index
> ### Aliases: TotalCopheneticIndex TCIContext TCIContext.numeric
> 
> ### ** Examples
> 
> # Balanced trees have the minimum index for a binary tree;
> # Pectinate trees the maximum:
> TCIContext(8)
  maximum minimum uniform.expected yule.expected yule.variance
1      56      16          38.8345      28.51429      90.52281
> TotalCopheneticIndex(PectinateTree(8))
[1] 56
> TotalCopheneticIndex(BalancedTree(8))
[1] 16
> TotalCopheneticIndex(StarTree(8))
[1] 0
> 
> 
> # Examples from Mir et al. (2013):
> tree12 <- ape::read.tree(text="(1, (2, (3, (4, 5))));")  #Fig. 4, tree 12
> TotalCopheneticIndex(tree12) # 10
[1] 10
> tree8  <- ape::read.tree(text="((1, 2, 3, 4), 5);")      #Fig. 4, tree 8
> TotalCopheneticIndex(tree8)  # 6
[1] 6
> TCIContext(tree8)
  maximum minimum uniform.expected yule.expected yule.variance
1      10       5         8.285714      7.166667      5.138889
> TCIContext(5L) # Context for a tree with 5 leaves.
  maximum minimum uniform.expected yule.expected yule.variance
1      10       5         8.285714      7.166667      5.138889
> 
> 
> 
> 
> cleanEx()
> nameEx("TreeIsRooted")
> ### * TreeIsRooted
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TreeIsRooted
> ### Title: Is tree rooted?
> ### Aliases: TreeIsRooted
> 
> ### ** Examples
> 
> TreeIsRooted(BalancedTree(6))
[1] TRUE
> TreeIsRooted(UnrootTree(BalancedTree(6)))
[1] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("TreeNumber")
> ### * TreeNumber
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TreeNumber
> ### Title: Unique integer indices for bifurcating tree topologies
> ### Aliases: TreeNumber as.TreeNumber as.TreeNumber.phylo
> ###   as.TreeNumber.multiPhylo as.TreeNumber.character
> ###   as.TreeNumber.TreeNumber as.TreeNumber.MixedBase
> ###   as.MixedBase.TreeNumber as.MixedBase.integer64 as.MixedBase.numeric
> ###   as.phylo.numeric as.phylo.TreeNumber as.MixedBase
> ###   as.MixedBase.MixedBase as.MixedBase.phylo as.MixedBase.multiPhylo
> ###   as.phylo.MixedBase
> 
> ### ** Examples
> 
> tree <- as.phylo(10, nTip = 6)
> plot(tree)
> as.TreeNumber(tree)
Phylogenetic tree number 10 of 105 
 6 tips: t1 t2 t3 t4 t5 t6> 
> # Larger trees:
> as.TreeNumber(BalancedTree(19))
Phylogenetic tree number 3259279213732796827 of 6332659870762850625 
 19 tips: t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19> 
> # If > 9 digits, represent the tree number as a string.
> treeNumber <- as.TreeNumber("1234567890123", nTip = 14)
> tree <- as.phylo(treeNumber)
> as.phylo(0:2, nTip = 6, tipLabels = letters[1:6])
3 phylogenetic trees
> 
> 
> 
> 
> cleanEx()
> nameEx("TreeShape")
> ### * TreeShape
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unrootedKeys
> ### Title: Integer representing shape of a tree
> ### Aliases: unrootedKeys TreeShape RootedTreeShape RootedTreeWithShape
> ###   UnrootedTreeWithShape UnrootedTreeWithKey UnrootedTreeShape
> ###   UnrootedTreeKey .UnrootedKeys UnrootedKeys NUnrootedShapes
> ###   NRootedShapes
> ### Keywords: datasets internal
> 
> ### ** Examples
> 
> RootedTreeShape(PectinateTree(8))
integer64
[1] 0
> plot(RootedTreeWithShape(0, nTip = 8L))
> 
> NRootedShapes(8L)
integer64
[1] 23
> # Shapes are numbered from 0 to NRootedShapes(n) - 1.  The maximum shape is:
> RootedTreeShape(BalancedTree(8))
integer64
[1] 22
> 
> # Unique shapes of unrooted trees:
> NUnrootedShapes(8L)
integer64
[1] 4
> 
> # Keys of these trees:
> UnrootedKeys(8L)
[1] 0 1 2 4
> 
> # A tree may be represented by multiple keys.
> # For a one-to-one correspondence, use a number instead:
> unrootedShapes8 <- as.integer(NUnrootedShapes(8L))
> allShapes <- lapply(seq_len(unrootedShapes8) - 1L,
+                     UnrootedTreeWithShape, 8L)
> plot(allShapes[[1]])
> sapply(allShapes, UnrootedTreeShape)
[1] 0 1 2 3
> sapply(allShapes, UnrootedTreeKey, asInteger = TRUE) # Key >= number
[1] 0 1 2 4
> 
> # If numbers larger than 2>31 are required, sapply needs a little help
> # with 64-bit integers:
> structure(sapply(allShapes, UnrootedTreeKey), class = "integer64")
integer64
[1] 0 1 2 4
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("TreesMatchingSplit")
> ### * TreesMatchingSplit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TreesMatchingSplit
> ### Title: Number of trees matching a bipartition split
> ### Aliases: TreesMatchingSplit LnTreesMatchingSplit Log2TreesMatchingSplit
> 
> ### ** Examples
> 
> TreesMatchingSplit(5, 6)
[1] 99225
> LnTreesMatchingSplit(5, 6)
[1] 11.50515
> Log2TreesMatchingSplit(5, 6)
[1] 16.59842
> 
> 
> 
> 
> cleanEx()
> nameEx("TreesMatchingTree")
> ### * TreesMatchingTree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TreesMatchingTree
> ### Title: Number of trees containing a tree
> ### Aliases: TreesMatchingTree LnTreesMatchingTree Log2TreesMatchingTree
> 
> ### ** Examples
> 
> partiallyResolvedTree <- CollapseNode(BalancedTree(8), 12:15)
> TreesMatchingTree(partiallyResolvedTree)
[1] 45
> LnTreesMatchingTree(partiallyResolvedTree)
[1] 3.806662
> 
> # Number of rooted trees:
> rootedTree <- AddTip(partiallyResolvedTree, where = 0)
> TreesMatchingTree(partiallyResolvedTree)
[1] 45
> 
> 
> 
> cleanEx()
> nameEx("TrivialSplits")
> ### * TrivialSplits
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TrivialSplits
> ### Title: Identify and remove trivial splits
> ### Aliases: TrivialSplits WithoutTrivialSplits
> 
> ### ** Examples
> 
> splits <- as.Splits(PectinateTree(letters[1:9]))
> efgh <- Subsplit(splits, tips = letters[5:8], keepAll = TRUE)
> summary(efgh)
4 bipartition splits (3 trivial) dividing 4 tips, e .. h
     1234
 12  ****
 15  .***
 16  ..**
 17  ...*

 Tip 1: e	 Tip 2: f	 Tip 3: g	 Tip 4: h	> 
> TrivialSplits(efgh)
   12    15    16    17 
 TRUE  TRUE FALSE  TRUE 
> summary(WithoutTrivialSplits(efgh))
1 bipartition split dividing 4 tips, e .. h
     1234
 16  ..**

 Tip 1: e	 Tip 2: f	 Tip 3: g	 Tip 4: h	> 
> 
> 
> cleanEx()
> nameEx("TrivialTree")
> ### * TrivialTree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TrivialTree
> ### Title: Generate trivial trees
> ### Aliases: TrivialTree SingleTaxonTree ZeroTaxonTree
> ### Keywords: tree
> 
> ### ** Examples
> 
> SingleTaxonTree("Homo_sapiens")

Phylogenetic tree with 1 tips and 1 internal nodes.

Tip labels:
  Homo_sapiens

Rooted; no branch lengths.
> plot(SingleTaxonTree("root") + BalancedTree(4))
> 
> ZeroTaxonTree()

Phylogenetic tree with 0 tips and 0 internal nodes.

Tip labels:
  

Rooted; no branch lengths.
> 
> 
> 
> cleanEx()
> nameEx("Unquote")
> ### * Unquote
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Unquote
> ### Title: Remove quotation marks from a string
> ### Aliases: Unquote
> 
> ### ** Examples
> 
> Unquote("'Hello World'")
[1] "Hello World"
> 
> 
> 
> cleanEx()
> nameEx("UnrootedTreesMatchingSplit")
> ### * UnrootedTreesMatchingSplit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: UnrootedTreesMatchingSplit
> ### Title: Number of trees consistent with split
> ### Aliases: UnrootedTreesMatchingSplit LnUnrootedTreesMatchingSplit
> ###   Log2UnrootedTreesMatchingSplit
> 
> ### ** Examples
> 
> UnrootedTreesMatchingSplit(c(3, 5))
[1] 315
> UnrootedTreesMatchingSplit(3, 2, 1, 2)
[1] 297
> 
> 
> 
> cleanEx()
> nameEx("UnshiftTree")
> ### * UnshiftTree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: UnshiftTree
> ### Title: Add tree to start of list
> ### Aliases: UnshiftTree
> 
> ### ** Examples
> 
> forest <- as.phylo(0:5, 6)
> tree <- BalancedTree(6)
> 
> UnshiftTree(tree, forest)
7 phylogenetic trees
> UnshiftTree(tree, tree)
2 phylogenetic trees
> 
> 
> 
> cleanEx()
> nameEx("WriteTntCharacters")
> ### * WriteTntCharacters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: WriteTntCharacters
> ### Title: Write morphological character matrix to TNT file
> ### Aliases: WriteTntCharacters WriteTntCharacters.phyDat
> ###   WriteTntCharacters.matrix
> 
> ### ** Examples
> 
> data("Lobo", package = "TreeTools")
> 
> WriteTntCharacters(Lobo.phy)
[1] "\nxread 'Dataset written by `TreeTools::WriteTntCharacters()`'\n115 48\nTubiluchus_Priapulida 00----00000-0100111100-----------------0---0001-1000------0----100-----------0-0--00-00----00--000--00--111--000111\nCricocosmia 00----00000-0100111?00-----------------0---0001-1001100-1001-00100-----------0-0--00-00----00--0???????????????0???\nAysheaia 10----00000-0100?0???0--010-00-0-0-00--10-1000111000------0----1000-0--0100000104000-00---0011-1???????????????0???\nSiberion 10----00000-0100?0???0--010-00-0-0-010-????00011?000------?----1?00-0--0???00??????0-00---?0???????????????????????\nOnychodictyon_ferox 10----00000-0????0???100010-00-0-0-00--1110000111101101010?1-001000-0--011-000101100-00---0011-1???????????????????\nOnychodictyon_gracilis 10----0??00-0????0??????0???0?-?-0-????????000110?0110??1??1-0010?0-0--0???000101?00-00??-1011-0???????????????????\nDiania 10----00000-?????0???0--00--00-0-0-00--0---000110101100-0??0-001000-0--0100000??--00-00---100--????????????????????\nXenusion 10----0?00???????????0--00--00-0-0-00--????00011?101100-0??1-001?00-0--01??????????0-00---100--????????????????????\nPaucipodia 10----00000-?????01??0--00--00-0-0-00--0---000110000------?----0000-0--00--000101000-00---100--????????????????????\nMicrodictyon 10----01000-?????0???0--00--00-0-0-00--0---000111101100-10?1-000000-0--00--000101?00-00---100--0???????????????????\nCardiodictyon 10----0110[01]??????0???10?0???0?-??0-00--0---000111101100-10?1-000000-0--00--000101?00-00---100--0???????????????????\nHallucigenia_sparsa 10----01100-11001010110000--00-[01]-0-00--0---0000----111111111000-010-0--00--000101000-0010-000--0???????????????????\nHallucigenia_fortis 10----01100-?????0???10?00--00-[01]-0-00--0---0001111?111111??10000010-0--00--000101?00-0000-?00--0???????????????????\nHallucigenia_hongmeia 1???????????????????????0???0?-??0-????????00011?1?1111110?10100??0-0--00--000100-00-00??-100--????????????????????\nLuolishania 1100---?100-?????0???100010-00-[01]-0-00--0---00011110111111??20111010-0--0101100100-00-0021-100--0???????????????????\nCollinsium 1100---1000-?????????0--010-00-[01]-0-00--0---000110101111110140111010-0--0101000100-00-0031-100--0???????????????????\nCollins_monster_Burgess_Shale 1???????????????????????0???00-[01]-0-????????00011?10111111????????10-0--0101????????0-0031-?0???????????????????????\nCollins_monster_Emu_Bay 110?????????????????????0???0?-[01]-0-????????00011?10111111??201???10-0--0101000100-00-0021-?0???????????????????????\nAcinocrinus 1???????????????????????0???00-[01]-0-????????00011?10111111??511??010-0--0101????????0-0021-?0???????????????????????\nOrstenotubulus 1???????????????????????0???0?-???-????????00011?11111?????101?1??0-0--00--11??????0-00??-?0???????????????????????\nTritonychus 1???????????????????????0???0?-???-????????00011??1????????????1??0-0--00--1101?2000-00????????????????????????01??\nCarbotubulus 1???????????????????????0???0?-???-????????0000----????????????-?10-0--00--00??????0-00??-00?[1-]-????????????????0???\nAntennacanthopodia 10----0?00???????????100010-01-1-0-00--0---0001????0------?----??00-0--00--1?000--00-00---100--????????????????????\nHelenodora 10----0?00??????????????010-0?-??1-00--0---000?????0------?----10?0-0--00--1?01010?0-00??-?????????????????????????\nEuperipatoides_Onychophora 10----00001110--100--100010-01-201-00--0---000110010------1----1000-0--00--110101010-00---100--00112101111101010111\nPlicatoperipatus_Onychophora 10----00001110--100--100010-01-211-00--0---000110010------1----1000-0--00--110101010-00---100--00112101111101010111\nOoperipatellus_Onychophora 10----00001110--100--100010-01-211-00--0---000110010------1----1000-0--00--110101010-00---100--00112101111101010111\nActinarctus_Heterotardigrada 1100---00110010010100100011000-0-0-10--0---0000----1100-100??---000-0--00--001103100-00---0011-11100110111011?-100-\nHalobiotus_Eutardigrada 10----00000-010010100100011000-0-0-20--0---0000----10-----0??---000-0--00--001111100-00---0011-111001101110111-100-\nSiberian_Orsten_tardigrade 10----00000-0100??????[0-]?0???0?-???-????????0000----???--?????---?00-0--00--000111100-00---001[12]-????????????????????\nMegadictyon 10----0?00???1???0???0--010-00-0-0-00--10-100011?0?0------?----0100-0--011-000????00-00---?0???????????????????????\nJianshanopodia 10----00000-01??101100--010-00-0-0-0???10-?00011?100------?----0100-0--011-000????00-00---00101????????????????????\nHadranax 1???????????????????????0???0?-???-????????00011?101100-0-?3--01?00-0--00--10?????00-00---?0???????????????????????\nKerygmachela 10----00000-0100?0??????010-00-0-0-010-10-1000110101100-0-?3-?01101001000--00000--00000---00100????????????????0???\nPambdelurion 10----0000100100?0???0--010-00-0-0-110-10-?0001????????????--?-?101001000--00000--00000---?????????????????????110-\nOpabinia 10----0000210????0???111010-00-0-0-111010-11000----0------------101001100--00000--00000---?1101????????????????????\nAnomalocaris_canadensis 11010000?011011110???111011110-0-0-110-11010000----0------------101000100--00000--01101---01101????????????????1???\nPeytoia_nathorsti 11011000?0110111?0???111011110-0-0-110-10-10000----0------------101001100--00000--01101---000--????????????????????\nHurdia_victoria 11011010?011011110110111011110-0-0-1???10-1?000----0------------?01001100--00000--01001---00101????????????????????\nAegirocassis_benmoulae 11011010?0?10???????????011110-0-0-1???10-10000----0------------?01001100--00000--0110?---000--????????????????????\nLyrarapax_unguispinus 11010000?01101???????111011110-0-0-110-10-10000----0------------001000100--00000--0?111---01101??10011?????????1???\nSchinderhannes 1??????0?01101???????1110111??-0-0-110-110???????????????????????????????????????????1?---00101????????????????????\nFuxianhuia 110101-0--2100--?0???1111110-10---11111----110------------------0-111-00-----000--00-00--1-0101??12111????????1100-\nChengjiangocaris 110101-0--2100--?0???1111110-10---11111----110------------------0-111-00-----000--00-00--1-0101?1?????0?1??????????\nLeanchoilia 1110---0--2100--?0???1111110-11---01111----11?------------0-----1-111-01-----010[02]?00-00--0-00--????????????????????\nAlalcomenaeus 1110---0--2100--?0???11111??-11---01111----11?------------0-----1-111-01-----0100-00-00--0-00--?112111000--????????\nMisszhouia_longicaudata 111101-0--2100--?0???1111110-10---01111----111------------0-----1-121-01-----0100-00-00--0-00--????????????????1???\nKuamaia_lata 111101-0--2100--?0???1111110-10---01111----111------------0-----1-121-01-----0102100-00--0-00--????????????????1???\n;\n"
> 
> # Read with extended implied weighting
> WriteTntCharacters(Lobo.phy, pre = "piwe=10;", post = "xpiwe=;")
[1] "piwe=10;\nxread 'Dataset written by `TreeTools::WriteTntCharacters()`'\n115 48\nTubiluchus_Priapulida 00----00000-0100111100-----------------0---0001-1000------0----100-----------0-0--00-00----00--000--00--111--000111\nCricocosmia 00----00000-0100111?00-----------------0---0001-1001100-1001-00100-----------0-0--00-00----00--0???????????????0???\nAysheaia 10----00000-0100?0???0--010-00-0-0-00--10-1000111000------0----1000-0--0100000104000-00---0011-1???????????????0???\nSiberion 10----00000-0100?0???0--010-00-0-0-010-????00011?000------?----1?00-0--0???00??????0-00---?0???????????????????????\nOnychodictyon_ferox 10----00000-0????0???100010-00-0-0-00--1110000111101101010?1-001000-0--011-000101100-00---0011-1???????????????????\nOnychodictyon_gracilis 10----0??00-0????0??????0???0?-?-0-????????000110?0110??1??1-0010?0-0--0???000101?00-00??-1011-0???????????????????\nDiania 10----00000-?????0???0--00--00-0-0-00--0---000110101100-0??0-001000-0--0100000??--00-00---100--????????????????????\nXenusion 10----0?00???????????0--00--00-0-0-00--????00011?101100-0??1-001?00-0--01??????????0-00---100--????????????????????\nPaucipodia 10----00000-?????01??0--00--00-0-0-00--0---000110000------?----0000-0--00--000101000-00---100--????????????????????\nMicrodictyon 10----01000-?????0???0--00--00-0-0-00--0---000111101100-10?1-000000-0--00--000101?00-00---100--0???????????????????\nCardiodictyon 10----0110[01]??????0???10?0???0?-??0-00--0---000111101100-10?1-000000-0--00--000101?00-00---100--0???????????????????\nHallucigenia_sparsa 10----01100-11001010110000--00-[01]-0-00--0---0000----111111111000-010-0--00--000101000-0010-000--0???????????????????\nHallucigenia_fortis 10----01100-?????0???10?00--00-[01]-0-00--0---0001111?111111??10000010-0--00--000101?00-0000-?00--0???????????????????\nHallucigenia_hongmeia 1???????????????????????0???0?-??0-????????00011?1?1111110?10100??0-0--00--000100-00-00??-100--????????????????????\nLuolishania 1100---?100-?????0???100010-00-[01]-0-00--0---00011110111111??20111010-0--0101100100-00-0021-100--0???????????????????\nCollinsium 1100---1000-?????????0--010-00-[01]-0-00--0---000110101111110140111010-0--0101000100-00-0031-100--0???????????????????\nCollins_monster_Burgess_Shale 1???????????????????????0???00-[01]-0-????????00011?10111111????????10-0--0101????????0-0031-?0???????????????????????\nCollins_monster_Emu_Bay 110?????????????????????0???0?-[01]-0-????????00011?10111111??201???10-0--0101000100-00-0021-?0???????????????????????\nAcinocrinus 1???????????????????????0???00-[01]-0-????????00011?10111111??511??010-0--0101????????0-0021-?0???????????????????????\nOrstenotubulus 1???????????????????????0???0?-???-????????00011?11111?????101?1??0-0--00--11??????0-00??-?0???????????????????????\nTritonychus 1???????????????????????0???0?-???-????????00011??1????????????1??0-0--00--1101?2000-00????????????????????????01??\nCarbotubulus 1???????????????????????0???0?-???-????????0000----????????????-?10-0--00--00??????0-00??-00?[1-]-????????????????0???\nAntennacanthopodia 10----0?00???????????100010-01-1-0-00--0---0001????0------?----??00-0--00--1?000--00-00---100--????????????????????\nHelenodora 10----0?00??????????????010-0?-??1-00--0---000?????0------?----10?0-0--00--1?01010?0-00??-?????????????????????????\nEuperipatoides_Onychophora 10----00001110--100--100010-01-201-00--0---000110010------1----1000-0--00--110101010-00---100--00112101111101010111\nPlicatoperipatus_Onychophora 10----00001110--100--100010-01-211-00--0---000110010------1----1000-0--00--110101010-00---100--00112101111101010111\nOoperipatellus_Onychophora 10----00001110--100--100010-01-211-00--0---000110010------1----1000-0--00--110101010-00---100--00112101111101010111\nActinarctus_Heterotardigrada 1100---00110010010100100011000-0-0-10--0---0000----1100-100??---000-0--00--001103100-00---0011-11100110111011?-100-\nHalobiotus_Eutardigrada 10----00000-010010100100011000-0-0-20--0---0000----10-----0??---000-0--00--001111100-00---0011-111001101110111-100-\nSiberian_Orsten_tardigrade 10----00000-0100??????[0-]?0???0?-???-????????0000----???--?????---?00-0--00--000111100-00---001[12]-????????????????????\nMegadictyon 10----0?00???1???0???0--010-00-0-0-00--10-100011?0?0------?----0100-0--011-000????00-00---?0???????????????????????\nJianshanopodia 10----00000-01??101100--010-00-0-0-0???10-?00011?100------?----0100-0--011-000????00-00---00101????????????????????\nHadranax 1???????????????????????0???0?-???-????????00011?101100-0-?3--01?00-0--00--10?????00-00---?0???????????????????????\nKerygmachela 10----00000-0100?0??????010-00-0-0-010-10-1000110101100-0-?3-?01101001000--00000--00000---00100????????????????0???\nPambdelurion 10----0000100100?0???0--010-00-0-0-110-10-?0001????????????--?-?101001000--00000--00000---?????????????????????110-\nOpabinia 10----0000210????0???111010-00-0-0-111010-11000----0------------101001100--00000--00000---?1101????????????????????\nAnomalocaris_canadensis 11010000?011011110???111011110-0-0-110-11010000----0------------101000100--00000--01101---01101????????????????1???\nPeytoia_nathorsti 11011000?0110111?0???111011110-0-0-110-10-10000----0------------101001100--00000--01101---000--????????????????????\nHurdia_victoria 11011010?011011110110111011110-0-0-1???10-1?000----0------------?01001100--00000--01001---00101????????????????????\nAegirocassis_benmoulae 11011010?0?10???????????011110-0-0-1???10-10000----0------------?01001100--00000--0110?---000--????????????????????\nLyrarapax_unguispinus 11010000?01101???????111011110-0-0-110-10-10000----0------------001000100--00000--0?111---01101??10011?????????1???\nSchinderhannes 1??????0?01101???????1110111??-0-0-110-110???????????????????????????????????????????1?---00101????????????????????\nFuxianhuia 110101-0--2100--?0???1111110-10---11111----110------------------0-111-00-----000--00-00--1-0101??12111????????1100-\nChengjiangocaris 110101-0--2100--?0???1111110-10---11111----110------------------0-111-00-----000--00-00--1-0101?1?????0?1??????????\nLeanchoilia 1110---0--2100--?0???1111110-11---01111----11?------------0-----1-111-01-----010[02]?00-00--0-00--????????????????????\nAlalcomenaeus 1110---0--2100--?0???11111??-11---01111----11?------------0-----1-111-01-----0100-00-00--0-00--?112111000--????????\nMisszhouia_longicaudata 111101-0--2100--?0???1111110-10---01111----111------------0-----1-121-01-----0100-00-00--0-00--????????????????1???\nKuamaia_lata 111101-0--2100--?0???1111110-10---01111----111------------0-----1-121-01-----0102100-00--0-00--????????????????1???\n;\nxpiwe=;"
> 
> # Write to a file with:
> # WriteTntCharacters(Lobo.phy, "example_file.tnt")
> 
> 
> 
> cleanEx()
> nameEx("as.Newick")
> ### * as.Newick
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.Newick
> ### Title: Write a phylogenetic tree in Newick format
> ### Aliases: as.Newick as.Newick.phylo as.Newick.list as.Newick.multiPhylo
> 
> ### ** Examples
> 
> trees <- list(BalancedTree(1:8), PectinateTree(8:1))
> trees <- lapply(trees, RenumberTips, 1:8)
> as.Newick(trees)
[1] "(((0,1),(2,3)),((4,5),(6,7)));" "(((((((0,1),2),3),4),5),6),7);"
> 
> 
> 
> 
> cleanEx()
> nameEx("as.multiPhylo")
> ### * as.multiPhylo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.multiPhylo
> ### Title: Convert object to 'multiPhylo' class
> ### Aliases: as.multiPhylo as.multiPhylo.phylo as.multiPhylo.list
> ###   as.multiPhylo.phyDat as.multiPhylo.Splits
> 
> ### ** Examples
> 
> as.multiPhylo(BalancedTree(8))
1 phylogenetic tree
> as.multiPhylo(list(BalancedTree(8), PectinateTree(8)))
2 phylogenetic trees
> data("Lobo")
> as.multiPhylo(Lobo.phy)
115 phylogenetic trees
> 
> 
> 
> cleanEx()
> nameEx("brewer")
> ### * brewer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: brewer
> ### Title: Brewer palettes
> ### Aliases: brewer
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data("brewer", package="TreeTools")
> plot(0, type="n", xlim=c(1, 12), ylim=c(12, 1),
+      xlab = "Colour", ylab="Palette")
> for (i in seq_along(brewer)) text(seq_len(i), i, col=brewer[[i]])
> 
> 
> 
> 
> cleanEx()
> nameEx("match.Splits")
> ### * match.Splits
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: match.Splits
> ### Title: Split matching
> ### Aliases: match.Splits match,Splits,Splits-method in.Splits match
> ###   %in%,Splits,Splits-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> splits1 <- as.Splits(BalancedTree(7))
> splits2 <- as.Splits(PectinateTree(7))
> 
> match(splits1, splits2)
[1]  3  1 NA NA
> 
> 
> 
> cleanEx()
> nameEx("sapply64")
> ### * sapply64
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sapply64
> ### Title: Apply a function that returns 64-bit integers over a list or
> ###   vector
> ### Aliases: sapply64 vapply64 replicate64
> 
> ### ** Examples
> 
> sapply64(as.phylo(1:6, 6), as.TreeNumber)
integer64
[1] 1 2 3 4 5 6
> vapply64(as.phylo(1:6, 6), as.TreeNumber, 1)
integer64
[1] 1 2 3 4 5 6
> set.seed(0)
> replicate64(6, as.TreeNumber(RandomTree(6)))
integer64
[1] 91  45  102 24  92  48 
> 
> 
> 
> cleanEx()
> nameEx("sort.multiPhylo")
> ### * sort.multiPhylo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sort.multiPhylo
> ### Title: Sort a list of phylogenetic trees
> ### Aliases: sort.multiPhylo ==.phylo <.phylo >.phylo ==.MixedBase
> ###   <.MixedBase >.MixedBase
> 
> ### ** Examples
> 
> sort(as.phylo(5:0, 7))
6 phylogenetic trees
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  7.102 0.754 8.215 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')

Package seqHMM version 2.0.0
Package built using 88872/R 4.6.0; x86_64-pc-linux-gnu; 2025-09-27 07:06:49 UTC; unix   
Checked with rchk version 35618ebbccf3cd0b45a3530e6303970a22a9056b LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function EM(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %204 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %208 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %212 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function EM_mnhmm::mstep_error(int, double, double, double, double)
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %25 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %29 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %33 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %37 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %41 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function EM_mnhmm::run()
  [UP] ignoring variable <unnamed var:   %364 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %368 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %372 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %376 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %380 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %384 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %388 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %392 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function EM_nhmm::mstep_error(int, double, double, double, double)
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %25 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %29 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %33 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %37 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %41 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function EM_nhmm::run()
  [UP] ignoring variable <unnamed var:   %212 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %216 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %220 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %224 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %228 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %232 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function EMx(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %352 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %356 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %360 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %364 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Armor<SEXPREC*>::init(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:47

Function Rcpp::Armor<SEXPREC*>::~Armor()
  [PB] has negative depth Rcpp/include/Rcpp/protection/Armor.h:41
  [UP] attempt to unprotect more items (1) than protected (0), results will be incomplete Rcpp/include/Rcpp/protection/Armor.h:41
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:42

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function Rcpp::internal::convert_using_rfunction(SEXPREC*, char const*)
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_EM
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_EMx
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_EM_LBFGS_fanhmm
  [UP] ignoring variable <unnamed var:   %105 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_EM_LBFGS_mfanhmm
  [UP] ignoring variable <unnamed var:   %114 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_EM_LBFGS_mnhmm
  [UP] ignoring variable <unnamed var:   %108 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_EM_LBFGS_nhmm
  [UP] ignoring variable <unnamed var:   %99 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_backward_fanhmm
  [UP] ignoring variable <unnamed var:   %63 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_backward_mfanhmm
  [UP] ignoring variable <unnamed var:   %72 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_backward_mnhmm
  [UP] ignoring variable <unnamed var:   %66 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_backward_nhmm
  [UP] ignoring variable <unnamed var:   %57 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_forward_fanhmm
  [UP] ignoring variable <unnamed var:   %63 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_forward_mfanhmm
  [UP] ignoring variable <unnamed var:   %72 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_forward_mnhmm
  [UP] ignoring variable <unnamed var:   %66 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_forward_nhmm
  [UP] ignoring variable <unnamed var:   %57 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_log_objective_fanhmm
  [UP] ignoring variable <unnamed var:   %63 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_log_objective_mfanhmm
  [UP] ignoring variable <unnamed var:   %72 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_log_objective_mnhmm
  [UP] ignoring variable <unnamed var:   %66 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_log_objective_nhmm
  [UP] ignoring variable <unnamed var:   %57 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_loglik_fanhmm
  [UP] ignoring variable <unnamed var:   %63 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_loglik_mfanhmm
  [UP] ignoring variable <unnamed var:   %72 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_loglik_mnhmm
  [UP] ignoring variable <unnamed var:   %66 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_loglik_nhmm
  [UP] ignoring variable <unnamed var:   %57 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_predict_fanhmm
  [UP] ignoring variable <unnamed var:   %69 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_predict_mfanhmm
  [UP] ignoring variable <unnamed var:   %78 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_predict_mnhmm
  [UP] ignoring variable <unnamed var:   %66 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_predict_nhmm
  [UP] ignoring variable <unnamed var:   %57 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_simulate_fanhmm
  [UP] ignoring variable <unnamed var:   %69 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_simulate_mfanhmm
  [UP] ignoring variable <unnamed var:   %78 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_simulate_mnhmm
  [UP] ignoring variable <unnamed var:   %66 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_simulate_nhmm
  [UP] ignoring variable <unnamed var:   %57 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_viterbi_fanhmm
  [UP] ignoring variable <unnamed var:   %63 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_viterbi_mfanhmm
  [UP] ignoring variable <unnamed var:   %72 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_viterbi_mnhmm
  [UP] ignoring variable <unnamed var:   %66 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_Rcpp_viterbi_nhmm
  [UP] ignoring variable <unnamed var:   %57 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_cost_matrix
  [UP] ignoring variable <unnamed var:   %27 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_cost_matrix_clusters
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_create_Q
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_eta_to_gamma_cube
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_eta_to_gamma_cube_2d_field
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_eta_to_gamma_cube_field
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_eta_to_gamma_mat
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_eta_to_gamma_mat_field
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_fast_quantiles
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_get_A_all
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_get_B1
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_get_B_all
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_get_omega_all
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_get_pi_all
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_joint_probability
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_logLikHMM
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_logLikMixHMM
  [UP] ignoring variable <unnamed var:   %33 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_logSumExp
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_EM
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_EMx
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_forwardbackward
  [UP] ignoring variable <unnamed var:   %27 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_forwardbackwardx
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_logLikHMM
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_logLikMixHMM
  [UP] ignoring variable <unnamed var:   %33 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_objective
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_objectivex
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_objective
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_objectivex
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_softmax
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_varcoef
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_viterbi
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_viterbix
  [UP] ignoring variable <unnamed var:   %30 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function fanhmm::predict(arma::field<arma::Mat<double> >&&, arma::field<arma::Mat<double> >&&)
  [UP] ignoring variable <unnamed var:   %325 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %329 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function fanhmm::simulate(arma::field<arma::Mat<double> >&&, arma::field<arma::Mat<double> >&&)
  [UP] ignoring variable <unnamed var:   %215 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %219 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_EM(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %242 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %247 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %252 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_EMx(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %376 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %380 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %385 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %390 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_forwardbackward(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, bool, unsigned int)
  [UP] ignoring variable <unnamed var:   %32 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %38 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %42 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_forwardbackwardx(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, bool, unsigned int)
  [UP] ignoring variable <unnamed var:   %100 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %104 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %94 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_objective(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<unsigned int> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Col<unsigned int>&, unsigned int)
  [UP] ignoring variable <unnamed var:   %359 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_objectivex(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<unsigned int> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, unsigned int)
  [UP] ignoring variable <unnamed var:   %456 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %583 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function mfanhmm::predict(arma::field<arma::Mat<double> >&&, arma::field<arma::Mat<double> >&&)
  [UP] ignoring variable <unnamed var:   %364 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %368 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function mfanhmm::simulate(arma::field<arma::Mat<double> >&&, arma::field<arma::Mat<double> >&&)
  [UP] ignoring variable <unnamed var:   %219 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %223 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function mnhmm::log_objective(arma::Mat<double> const&, arma::field<arma::Mat<double> > const&, arma::Mat<double> const&)
  [UP] ignoring variable <unnamed var:   %196 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %200 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %204 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %208 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %236 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %240 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %244 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %248 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function mnhmm::predict()
  [UP] ignoring variable <unnamed var:   %171 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %175 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function mnhmm::simulate()
  [UP] ignoring variable <unnamed var:   %113 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %117 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function mnhmm::viterbi()
  [UP] ignoring variable <unnamed var:   %44 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %48 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function nhmm::log_objective(arma::Mat<double> const&, arma::field<arma::Mat<double> > const&)
  [UP] ignoring variable <unnamed var:   %123 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %127 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %131 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %154 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %158 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %162 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function nhmm::predict()
  [UP] ignoring variable <unnamed var:   %143 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %147 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function nhmm::simulate()
  [UP] ignoring variable <unnamed var:   %103 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %99 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function nhmm::viterbi()
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function objective(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int>&, arma::Mat<unsigned int> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Col<unsigned int> const&, unsigned int)
  [UP] ignoring variable <unnamed var:   %298 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function objectivex(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<unsigned int> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int>&, unsigned int)
  [UP] ignoring variable <unnamed var:   %407 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %521 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function viterbi(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&)
  [UP] ignoring variable <unnamed var:   %122 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %126 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function viterbix(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&)
  [UP] ignoring variable <unnamed var:   %178 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %182 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

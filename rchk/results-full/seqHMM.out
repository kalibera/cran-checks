Package seqHMM version 1.2.6
Package built using 86189/R 4.4.0; x86_64-pc-linux-gnu; 2024-03-26 02:21:04 UTC; unix   
Checked with rchk version fdc068715daa3a256062cc20e0d4a5157dacc9a4 LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function EM(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %203 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %207 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %211 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function EMx(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %351 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %355 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %359 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %363 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function _seqHMM_EM
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_EMx
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_estimate_coefs
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_forwardbackward
  [UP] ignoring variable <unnamed var:   %27 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_forwardbackwardx
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_logLikHMM
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_logLikMixHMM
  [UP] ignoring variable <unnamed var:   %33 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_logSumExp
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_EM
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_EMx
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_forwardbackward
  [UP] ignoring variable <unnamed var:   %27 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_forwardbackwardx
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_logLikHMM
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_logLikMixHMM
  [UP] ignoring variable <unnamed var:   %33 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_objective
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_objectivex
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_objective
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_objectivex
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_varcoef
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_viterbi
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_viterbix
  [UP] ignoring variable <unnamed var:   %30 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function estimate_coefs(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double>, arma::Mat<double> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %161 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function forwardbackward(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, bool, unsigned int)
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %25 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %31 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %35 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %39 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function forwardbackwardx(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int>, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, bool, unsigned int)
  [UP] ignoring variable <unnamed var:   %100 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %82 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %86 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %92 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %96 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_EM(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %244 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %249 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %254 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_EMx(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %378 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %382 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %387 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %392 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_forwardbackward(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, bool, unsigned int)
  [UP] ignoring variable <unnamed var:   %32 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %38 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %42 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_forwardbackwardx(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, bool, unsigned int)
  [UP] ignoring variable <unnamed var:   %100 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %104 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %94 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_objective(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<unsigned int> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Col<unsigned int>&, unsigned int)
  [UP] ignoring variable <unnamed var:   %359 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_objectivex(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<unsigned int> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, unsigned int)
  [UP] ignoring variable <unnamed var:   %456 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %583 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function objective(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int>&, arma::Mat<unsigned int> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Col<unsigned int> const&, unsigned int)
  [UP] ignoring variable <unnamed var:   %297 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function objectivex(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<unsigned int> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int>&, unsigned int)
  [UP] ignoring variable <unnamed var:   %405 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %520 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function viterbi(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&)
  [UP] ignoring variable <unnamed var:   %122 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %126 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function viterbix(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&)
  [UP] ignoring variable <unnamed var:   %178 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %182 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Package seqHMM version 1.2.0
Package built using 81070/R 4.2.0; x86_64-pc-linux-gnu; 2021-10-18 12:50:58 UTC; unix   
Checked with rchk version 35d5d01a98903a5f3e9ec166dcdb2f790ecb784f LLVM version 11.0.0
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function EM(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %197 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %201 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %205 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function EMx(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %350 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %354 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %358 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %362 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function _seqHMM_EM
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_EMx
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_estimate_coefs
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_forwardbackward
  [UP] ignoring variable <unnamed var:   %27 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_forwardbackwardx
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_logLikHMM
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_logLikMixHMM
  [UP] ignoring variable <unnamed var:   %33 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_logSumExp
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_EM
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_EMx
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_forwardbackward
  [UP] ignoring variable <unnamed var:   %27 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_forwardbackwardx
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_logLikHMM
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_logLikMixHMM
  [UP] ignoring variable <unnamed var:   %33 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_objective
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_log_objectivex
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_objective
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_objectivex
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_varcoef
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_viterbi
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _seqHMM_viterbix
  [UP] ignoring variable <unnamed var:   %30 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function estimate_coefs(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double>, arma::Mat<double> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %166 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function forwardbackward(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, bool, unsigned int)
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %25 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %31 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %35 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %39 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function forwardbackwardx(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int>, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, bool, unsigned int)
  [UP] ignoring variable <unnamed var:   %105 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %87 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %91 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %101 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %97 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_EM(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %244 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %249 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %254 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_EMx(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, int, double, int, unsigned int)
  [UP] ignoring variable <unnamed var:   %383 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %387 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %392 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %397 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_forwardbackward(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, bool, unsigned int)
  [UP] ignoring variable <unnamed var:   %32 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %38 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %42 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_forwardbackwardx(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, bool, unsigned int)
  [UP] ignoring variable <unnamed var:   %105 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %109 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %99 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_objective(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<unsigned int> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Col<unsigned int>&, unsigned int)
  [UP] ignoring variable <unnamed var:   %374 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function log_objectivex(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<unsigned int> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&, unsigned int)
  [UP] ignoring variable <unnamed var:   %476 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %603 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function objective(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int>&, arma::Mat<unsigned int> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Col<unsigned int> const&, unsigned int)
  [UP] ignoring variable <unnamed var:   %312 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function objectivex(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<unsigned int> const&, arma::Cube<unsigned int> const&, arma::Col<unsigned int> const&, arma::Col<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int>&, unsigned int)
  [UP] ignoring variable <unnamed var:   %425 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %540 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function viterbi(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&)
  [UP] ignoring variable <unnamed var:   %126 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %122 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function viterbix(arma::Mat<double> const&, arma::Cube<double> const&, arma::Col<double> const&, arma::Cube<unsigned int> const&, arma::Mat<double> const&, arma::Mat<double> const&, arma::Col<unsigned int> const&)
  [UP] ignoring variable <unnamed var:   %183 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %187 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

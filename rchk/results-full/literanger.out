Package literanger version 0.1.1
Package built using 87687/R 4.5.0; x86_64-pc-linux-gnu; 2025-02-05 23:02:31 UTC; unix   
Checked with rchk version 35618ebbccf3cd0b45a3530e6303970a22a9056b LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function cpp11::attribute_proxy<cpp11::sexp>::operator SEXPREC*() const
  [UP] ignoring variable <unnamed var:   %4 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function cpp11::attribute_proxy<cpp11::writable::r_vector<SEXPREC*> >::operator SEXPREC*() const
  [UP] ignoring variable <unnamed var:   %4 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function cpp11::writable::r_vector<SEXPREC*>::push_back(cpp11::named_arg const&)
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function std::__1::__wrap_iter<std::__1::shared_ptr<std::__1::vector<double, std::__1::allocator<double> > >*> std::__1::transform<cpp11::r_vector<SEXPREC*>::const_iterator, std::__1::__wrap_iter<std::__1::shared_ptr<std::__1::vector<double, std::__1::allocator<double> > >*>, literanger::as_nested_ptr<double, cpp11::r_vector<double>, cpp11::r_vector<SEXPREC*>, std::__1::shared_ptr>(cpp11::r_vector<SEXPREC*>)::{lambda(SEXPREC* const&)#1}>(cpp11::r_vector<SEXPREC*>::const_iterator, cpp11::r_vector<SEXPREC*>::const_iterator, std::__1::__wrap_iter<std::__1::shared_ptr<std::__1::vector<double, std::__1::allocator<double> > >*>, literanger::as_nested_ptr<double, cpp11::r_vector<double>, cpp11::r_vector<SEXPREC*>, std::__1::shared_ptr>(cpp11::r_vector<SEXPREC*>)::{lambda(SEXPREC* const&)#1})
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

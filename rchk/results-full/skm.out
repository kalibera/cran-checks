Package skm version 0.1.5.4
Package built using 86189/R 4.4.0; x86_64-pc-linux-gnu; 2024-03-25 23:41:57 UTC; unix   
Checked with rchk version fdc068715daa3a256062cc20e0d4a5157dacc9a4 LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function Rcpp::CppFunction_WithFormals2<skmSolution, arma::Mat<double> const&, arma::Col<unsigned int> const&>::operator()(SEXPREC**)
  [UP] unprotected variable <unnamed var:   %3 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::ConstReferenceInputParameter<arma::Col<unsigned int> >::~ConstReferenceInputParameter() Rcpp/include/Rcpp/module/Module_generated_CppFunction.h:257
  [UP] unprotected variable <unnamed var:   %3 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::ConstReferenceInputParameter<arma::Mat<double> >::~ConstReferenceInputParameter() Rcpp/include/Rcpp/module/Module_generated_CppFunction.h:257

Function Rcpp::CppFunction_WithFormals4<skmSolution, arma::Mat<double> const&, arma::Col<unsigned int>, arma::Col<unsigned int> const&, unsigned int>::operator()(SEXPREC**)
  [UP] unprotected variable <unnamed var:   %3 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::ConstReferenceInputParameter<arma::Col<unsigned int> >::~ConstReferenceInputParameter() Rcpp/include/Rcpp/module/Module_generated_CppFunction.h:459
  [UP] unprotected variable <unnamed var:   %3 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::ConstReferenceInputParameter<arma::Mat<double> >::~ConstReferenceInputParameter() Rcpp/include/Rcpp/module/Module_generated_CppFunction.h:459

Function Rcpp::CppFunction_WithFormals4<skmSolution, arma::Mat<double> const&, unsigned int, arma::Col<unsigned int> const&, unsigned int>::operator()(SEXPREC**)
  [UP] unprotected variable <unnamed var:   %3 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::ConstReferenceInputParameter<arma::Col<unsigned int> >::~ConstReferenceInputParameter() Rcpp/include/Rcpp/module/Module_generated_CppFunction.h:459
  [UP] unprotected variable <unnamed var:   %3 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::ConstReferenceInputParameter<arma::Mat<double> >::~ConstReferenceInputParameter() Rcpp/include/Rcpp/module/Module_generated_CppFunction.h:459

Function Rcpp::CppFunction_WithFormals5<skmSolution, arma::Mat<double> const&, unsigned int, arma::Col<unsigned int>, arma::Col<unsigned int> const&, unsigned int>::operator()(SEXPREC**)
  [UP] unprotected variable <unnamed var:   %3 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::ConstReferenceInputParameter<arma::Col<unsigned int> >::~ConstReferenceInputParameter() Rcpp/include/Rcpp/module/Module_generated_CppFunction.h:566
  [UP] unprotected variable <unnamed var:   %3 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::ConstReferenceInputParameter<arma::Mat<double> >::~ConstReferenceInputParameter() Rcpp/include/Rcpp/module/Module_generated_CppFunction.h:566

Function Rcpp::Environment_Impl<Rcpp::PreserveStorage>::Rcpp_namespace()
  [UP] calling allocating function Rcpp::Environment_Impl<Rcpp::PreserveStorage>::Environment_Impl(SEXPREC*) with argument allocated using Rcpp::internal::get_Rcpp_namespace() Rcpp/include/Rcpp/Environment.h:361

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function Rcpp::class_<skmSolution>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function skm_col_max_idx
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function skm_col_max_val
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function skm_col_min_idx
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function skm_col_min_val
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function skm_col_rgn_val
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function skm_distRpl_wlatlng_cpp
  [UP] ignoring variable <unnamed var:   %27 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function skm_distSgl_wlatlng_cpp
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function skm_dist_wlatlng_km_cpp
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function skm_dist_wlatlng_mi_cpp
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function skm_skmRpl_mlp_cpp
  [UP] ignoring variable <unnamed var:   %27 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function skm_skm_gdp_cpp
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function skm_skm_mlp_cpp
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function skm_skm_mls_cpp
  [UP] ignoring variable <unnamed var:   %27 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function skm_stratified_sampling
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

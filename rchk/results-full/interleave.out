Package interleave version 0.1.2
Package built using 86189/R 4.4.0; x86_64-pc-linux-gnu; 2024-03-25 23:20:33 UTC; unix   
Checked with rchk version fdc068715daa3a256062cc20e0d4a5157dacc9a4 LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function Rcpp::Armor<SEXPREC*>::init(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:47

Function Rcpp::Armor<SEXPREC*>::~Armor()
  [PB] has negative depth Rcpp/include/Rcpp/protection/Armor.h:41
  [UP] attempt to unprotect more items (1) than protected (0), results will be incomplete Rcpp/include/Rcpp/protection/Armor.h:41
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:42

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function Rcpp::internal::convert_using_rfunction(SEXPREC*, char const*)
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function SEXPREC* earcut::earcut<unsigned int, std::__1::vector<std::__1::vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > > > > >(std::__1::vector<std::__1::vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > > > > const&)
  [UP] ignoring variable <unnamed var:   %11 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _interleave_rcpp_earcut
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _interleave_rcpp_interleave
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _interleave_rcpp_interleave_line
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _interleave_rcpp_interleave_point
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _interleave_rcpp_interleave_triangle
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _interleave_test_interleave
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _interleave_test_interleave_primitive
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _interleave_test_interleave_triangle
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _interleave_test_list_element_count
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _interleave_test_list_rows
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _interleave_test_subset_vector
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _interleave_test_unlist_list
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function geometries::coordinates::geometry_dimension(SEXPREC*&, long&, long&, long&, long&, long&, unsigned int&, long, long)
  [UP] ignoring variable tmp_geom as it has address taken, results will be incomplete 

Function geometries::coordinates::geometry_dimensions(Rcpp::Vector<19, Rcpp::PreserveStorage>&)
  [UP] ignoring variable geom as it has address taken, results will be incomplete 

Function interleave::interleave(SEXPREC*&)
  [UP] ignoring variable obj as it has address taken, results will be incomplete 

Function interleave::primitives::interleave_primitive(SEXPREC*&, int)
  [UP] ignoring variable <unnamed var:   %33 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function interleave::primitives::interleave_triangle(SEXPREC*&, Rcpp::Vector<19, Rcpp::PreserveStorage>)
  [UP] ignoring variable p as it has address taken, results will be incomplete 
  [UP] ignoring variable ring as it has address taken, results will be incomplete 

Function interleave::utils::list_element_count(SEXPREC*, long&, int&)
  [UP] ignoring variable obj as it has address taken, results will be incomplete 
  [UP] ignoring variable inner_obj as it has address taken, results will be incomplete 

Function interleave::utils::list_rows(SEXPREC*, long&)
  [UP] ignoring variable inner_obj as it has address taken, results will be incomplete 
  [UP] ignoring variable obj as it has address taken, results will be incomplete 

Function interleave::utils::unlist_list(SEXPREC*)
  [UP] ignoring variable obj as it has address taken, results will be incomplete 

Function test_interleave(SEXPREC*)
  [UP] ignoring variable obj as it has address taken, results will be incomplete 

Function test_interleave_primitive(SEXPREC*, int)
  [UP] ignoring variable obj as it has address taken, results will be incomplete 

Function test_interleave_triangle(SEXPREC*, Rcpp::Vector<19, Rcpp::PreserveStorage>)
  [UP] ignoring variable obj as it has address taken, results will be incomplete 

Function test_subset_vector(SEXPREC*, Rcpp::Vector<13, Rcpp::PreserveStorage>)
  [UP] ignoring variable v as it has address taken, results will be incomplete 

Function void interleave::utils::unlist_list<10>(SEXPREC*, Rcpp::Vector<19, Rcpp::PreserveStorage> const&, Rcpp::Vector<10, Rcpp::PreserveStorage>&, int&)
  [UP] ignoring variable obj as it has address taken, results will be incomplete 

Function void interleave::utils::unlist_list<13>(SEXPREC*, Rcpp::Vector<19, Rcpp::PreserveStorage> const&, Rcpp::Vector<13, Rcpp::PreserveStorage>&, int&)
  [UP] ignoring variable obj as it has address taken, results will be incomplete 

Function void interleave::utils::unlist_list<14>(SEXPREC*, Rcpp::Vector<19, Rcpp::PreserveStorage> const&, Rcpp::Vector<14, Rcpp::PreserveStorage>&, int&)
  [UP] ignoring variable obj as it has address taken, results will be incomplete 

Function void interleave::utils::unlist_list<16>(SEXPREC*, Rcpp::Vector<19, Rcpp::PreserveStorage> const&, Rcpp::Vector<16, Rcpp::PreserveStorage>&, int&)
  [UP] ignoring variable obj as it has address taken, results will be incomplete 

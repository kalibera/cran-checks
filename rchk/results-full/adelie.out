Package adelie version 1.0.2
Package built using 87687/R 4.5.0; x86_64-pc-linux-gnu; 2025-02-06 00:26:56 UTC; unix   
Checked with rchk version 35618ebbccf3cd0b45a3530e6303970a22a9056b LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function Rcpp::Armor<SEXPREC*>::init(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:47

Function Rcpp::Armor<SEXPREC*>::~Armor()
  [PB] has negative depth Rcpp/include/Rcpp/protection/Armor.h:41
  [UP] attempt to unprotect more items (1) than protected (0), results will be incomplete Rcpp/include/Rcpp/protection/Armor.h:41
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:42

Function Rcpp::Environment_Impl<Rcpp::PreserveStorage>::Rcpp_namespace()
  [UP] calling allocating function Rcpp::Environment_Impl<Rcpp::PreserveStorage>::Environment_Impl(SEXPREC*) with argument allocated using Rcpp::internal::get_Rcpp_namespace() Rcpp/include/Rcpp/Environment.h:348

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function Rcpp::S4_Impl<Rcpp::PreserveStorage>::S4_Impl(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
  [UP] calling allocating function R_do_new_object with argument allocated using R_do_MAKE_CLASS Rcpp/include/Rcpp/S4.h:58

Function Rcpp::class_<RConstraintBase64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RGlmBase64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RGlmBinomialLogit64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RGlmBinomialProbit64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RGlmCox64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RGlmGaussian64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RGlmMultiBase64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RGlmMultiGaussian64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RGlmMultiS464>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RGlmMultinomial64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RGlmPoisson64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RGlmS464>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RIOSNPPhasedAncestry>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RIOSNPUnphased>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixCovBase64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixCovBlockDiag64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixCovDense64F>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixCovLazyCov64F>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixCovS464>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixCovSparse64F>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixNaiveBase64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixNaiveCConcatenate64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixNaiveCSubset64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixNaiveDense64F>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixNaiveInteractionDense64F>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixNaiveKroneckerEye64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixNaiveKroneckerEyeDense64F>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixNaiveOneHotDense64F>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixNaiveRConcatenate64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixNaiveRSubset64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixNaiveS464>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixNaiveSNPPhasedAncestry64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixNaiveSNPUnphased64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixNaiveSparse64F>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RMatrixNaiveStandardize64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RStateBase64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RStateGaussianCov64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RStateGaussianNaive64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RStateGlmNaive64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RStateMultiGaussianNaive64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<RStateMultiGlmNaive64>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<adelie_core::Configs>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<adelie_core::io::IOSNPBase<std::__1::shared_ptr<char> > >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<adelie_core::io::IOSNPPhasedAncestry<std::__1::shared_ptr<char> > >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<adelie_core::io::IOSNPUnphased<std::__1::shared_ptr<char> > >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<adelie_core::state::StateBase<adelie_core::constraint::ConstraintBase<double>, double, int, int, int> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<adelie_core::state::StateGaussianCov<adelie_core::constraint::ConstraintBase<double>, adelie_core::matrix::MatrixCovBase<double, int>, double, int, int, int> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<adelie_core::state::StateGaussianNaive<adelie_core::constraint::ConstraintBase<double>, adelie_core::matrix::MatrixNaiveBase<double, int>, double, int, int, int> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<adelie_core::state::StateGlmNaive<adelie_core::constraint::ConstraintBase<double>, adelie_core::matrix::MatrixNaiveBase<double, int>, double, int, int, int> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<adelie_core::state::StateMultiGaussianNaive<adelie_core::constraint::ConstraintBase<double>, adelie_core::matrix::MatrixNaiveBase<double, int>, double, int, int, int> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<adelie_core::state::StateMultiGlmNaive<adelie_core::constraint::ConstraintBase<double>, adelie_core::matrix::MatrixNaiveBase<double, int>, double, int, int, int> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::internal::convert_using_rfunction(SEXPREC*, char const*)
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function adelie_core::glm::GlmMultiS4<double>::gradient(Eigen::Ref<Eigen::Array<double, -1, -1, 1, -1, -1> const, 0, Eigen::OuterStride<-1> > const&, Eigen::Ref<Eigen::Array<double, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1> >)
  [UP] calling allocating function Eigen::Map<Eigen::Array<double, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> > Rcpp::as<Eigen::Map<Eigen::Array<double, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> > >(SEXPREC*) with argument allocated using adelie_core::glm::GlmMultiS4<double>::gradient(Eigen::Ref<Eigen::Array<double, -1, -1, 1, -1, -1> const, 0, Eigen::OuterStride<-1> > const&, Eigen::Ref<Eigen::Array<double, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1> >)::{lambda()#1}::operator()() const adelie/src/./rcpp_glm.h:103

Function adelie_core::glm::GlmMultiS4<double>::hessian(Eigen::Ref<Eigen::Array<double, -1, -1, 1, -1, -1> const, 0, Eigen::OuterStride<-1> > const&, Eigen::Ref<Eigen::Array<double, -1, -1, 1, -1, -1> const, 0, Eigen::OuterStride<-1> > const&, Eigen::Ref<Eigen::Array<double, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1> >)
  [UP] calling allocating function Eigen::Map<Eigen::Array<double, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> > Rcpp::as<Eigen::Map<Eigen::Array<double, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> > >(SEXPREC*) with argument allocated using adelie_core::glm::GlmMultiS4<double>::hessian(Eigen::Ref<Eigen::Array<double, -1, -1, 1, -1, -1> const, 0, Eigen::OuterStride<-1> > const&, Eigen::Ref<Eigen::Array<double, -1, -1, 1, -1, -1> const, 0, Eigen::OuterStride<-1> > const&, Eigen::Ref<Eigen::Array<double, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1> >)::{lambda()#1}::operator()() const adelie/src/./rcpp_glm.h:116

Function adelie_core::glm::GlmS4<double>::gradient(Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1>, 0, Eigen::InnerStride<1> >)
  [UP] calling allocating function Eigen::Map<Eigen::Array<double, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > Rcpp::as<Eigen::Map<Eigen::Array<double, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > >(SEXPREC*) with argument allocated using adelie_core::glm::GlmS4<double>::gradient(Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1>, 0, Eigen::InnerStride<1> >)::{lambda()#1}::operator()() const adelie/src/./rcpp_glm.h:42

Function adelie_core::glm::GlmS4<double>::hessian(Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1>, 0, Eigen::InnerStride<1> >)
  [UP] calling allocating function Eigen::Map<Eigen::Array<double, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > Rcpp::as<Eigen::Map<Eigen::Array<double, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > >(SEXPREC*) with argument allocated using adelie_core::glm::GlmS4<double>::hessian(Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1>, 0, Eigen::InnerStride<1> >)::{lambda()#1}::operator()() const adelie/src/./rcpp_glm.h:55

Function adelie_core::matrix::MatrixCovS4<double, int>::bmul(Eigen::Ref<Eigen::Array<int, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<int, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1>, 0, Eigen::InnerStride<1> >)
  [UP] calling allocating function Eigen::Map<Eigen::Array<double, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > Rcpp::as<Eigen::Map<Eigen::Array<double, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > >(SEXPREC*) with argument allocated using adelie_core::matrix::MatrixCovS4<double, int>::bmul(Eigen::Ref<Eigen::Array<int, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<int, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1>, 0, Eigen::InnerStride<1> >)::{lambda()#1}::operator()() const adelie/src/./rcpp_matrix.h:54

Function adelie_core::matrix::MatrixCovS4<double, int>::mul(Eigen::Ref<Eigen::Array<int, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1>, 0, Eigen::InnerStride<1> >)
  [UP] calling allocating function Eigen::Map<Eigen::Array<double, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > Rcpp::as<Eigen::Map<Eigen::Array<double, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > >(SEXPREC*) with argument allocated using adelie_core::matrix::MatrixCovS4<double, int>::mul(Eigen::Ref<Eigen::Array<int, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1>, 0, Eigen::InnerStride<1> >)::{lambda()#1}::operator()() const adelie/src/./rcpp_matrix.h:67

Function adelie_core::matrix::MatrixCovS4<double, int>::to_dense(int, int, Eigen::Ref<Eigen::Matrix<double, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >)
  [UP] calling allocating function Eigen::Map<Eigen::Matrix<double, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> > Rcpp::as<Eigen::Map<Eigen::Matrix<double, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> > >(SEXPREC*) with argument allocated using adelie_core::matrix::MatrixCovS4<double, int>::to_dense(int, int, Eigen::Ref<Eigen::Matrix<double, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >)::{lambda()#1}::operator()() const adelie/src/./rcpp_matrix.h:77

Function adelie_core::matrix::MatrixNaiveS4<double, int>::bmul(int, int, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1>, 0, Eigen::InnerStride<1> >)
  [UP] calling allocating function Eigen::Map<Eigen::Array<double, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > Rcpp::as<Eigen::Map<Eigen::Array<double, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > >(SEXPREC*) with argument allocated using adelie_core::matrix::MatrixNaiveS4<double, int>::bmul(int, int, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1>, 0, Eigen::InnerStride<1> >)::{lambda()#1}::operator()() const adelie/src/./rcpp_matrix.h:139

Function adelie_core::matrix::MatrixNaiveS4<double, int>::btmul(int, int, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1>, 0, Eigen::InnerStride<1> >)
  [UP] calling allocating function Eigen::Map<Eigen::Array<double, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > Rcpp::as<Eigen::Map<Eigen::Array<double, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > >(SEXPREC*) with argument allocated using adelie_core::matrix::MatrixNaiveS4<double, int>::btmul(int, int, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1>, 0, Eigen::InnerStride<1> >)::{lambda()#1}::operator()() const adelie/src/./rcpp_matrix.h:151

Function adelie_core::matrix::MatrixNaiveS4<double, int>::cov(int, int, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Matrix<double, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::Ref<Eigen::Matrix<double, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >)
  [UP] calling allocating function Eigen::Map<Eigen::Matrix<double, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> > Rcpp::as<Eigen::Map<Eigen::Matrix<double, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> > >(SEXPREC*) with argument allocated using adelie_core::matrix::MatrixNaiveS4<double, int>::cov(int, int, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Matrix<double, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::Ref<Eigen::Matrix<double, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >)::{lambda()#1}::operator()() const adelie/src/./rcpp_matrix.h:177

Function adelie_core::matrix::MatrixNaiveS4<double, int>::ctmul(int, double, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1>, 0, Eigen::InnerStride<1> >)
  [UP] calling allocating function Eigen::Map<Eigen::Array<double, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > Rcpp::as<Eigen::Map<Eigen::Array<double, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > >(SEXPREC*) with argument allocated using adelie_core::matrix::MatrixNaiveS4<double, int>::ctmul(int, double, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1>, 0, Eigen::InnerStride<1> >)::{lambda()#1}::operator()() const adelie/src/./rcpp_matrix.h:125

Function adelie_core::matrix::MatrixNaiveS4<double, int>::mul(Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1>, 0, Eigen::InnerStride<1> >)
  [UP] calling allocating function Eigen::Map<Eigen::Array<double, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > Rcpp::as<Eigen::Map<Eigen::Array<double, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > >(SEXPREC*) with argument allocated using adelie_core::matrix::MatrixNaiveS4<double, int>::mul(Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1> const, 0, Eigen::InnerStride<1> > const&, Eigen::Ref<Eigen::Array<double, 1, -1, 1, 1, -1>, 0, Eigen::InnerStride<1> >)::{lambda()#1}::operator()() const adelie/src/./rcpp_matrix.h:164

Package gaston version 1.6
Package built using 88872/R 4.6.0; x86_64-pc-linux-gnu; 2025-09-27 04:38:12 UTC; unix   
Checked with rchk version 35618ebbccf3cd0b45a3530e6303970a22a9056b LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function Rcpp::Armor<SEXPREC*>::init(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:47

Function Rcpp::Armor<SEXPREC*>::~Armor()
  [PB] has negative depth Rcpp/include/Rcpp/protection/Armor.h:41
  [UP] attempt to unprotect more items (1) than protected (0), results will be incomplete Rcpp/include/Rcpp/protection/Armor.h:41
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:42

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back_name__impl(SEXPREC* const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::traits::integral_constant<bool, true>)
  [UP] unprotected variable names while calling allocating function Rf_allocVector Rcpp/include/Rcpp/vector/Vector.h:680

Function Rcpp::internal::convert_using_rfunction(SEXPREC*, char const*)
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::set(SEXPREC*)
  [UP] ignoring variable rhs as it has address taken, results will be incomplete 

Function gg_AIREML1
  [UP] ignoring variable <unnamed var:   %54 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_AIREML1_contrast
  [UP] ignoring variable <unnamed var:   %54 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_AIREML1_logit
  [UP] ignoring variable <unnamed var:   %51 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_AIREML1_logit_nofix
  [UP] ignoring variable <unnamed var:   %42 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_AIREML1_nofix
  [UP] ignoring variable <unnamed var:   %51 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_AIREMLn
  [UP] ignoring variable <unnamed var:   %54 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_AIREMLn_contrast
  [UP] ignoring variable <unnamed var:   %54 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_AIREMLn_logit
  [UP] ignoring variable <unnamed var:   %51 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_AIREMLn_logit_nofix
  [UP] ignoring variable <unnamed var:   %42 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_AIREMLn_nofix
  [UP] ignoring variable <unnamed var:   %51 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_GWAS_lm_quanti
  [UP] ignoring variable <unnamed var:   %27 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_GWAS_lmm_lrt
  [PB] has possible protection stack imbalance gaston/src/gwas_lmm_diago_lrt.cpp:125

Function gg_GWAS_lmm_score
  [PB] has possible protection stack imbalance gaston/src/gwas_lmm_score.cpp:120

Function gg_GWAS_lmm_score_f
  [UP] ignoring variable <unnamed var:   %27 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_GWAS_lmm_wald
  [PB] has possible protection stack imbalance gaston/src/gwas_lmm_diago_wald.cpp:136

Function gg_GWAS_logit_wald_f
  [UP] ignoring variable <unnamed var:   %30 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_GWAS_logitmm_wald_f
  [UP] ignoring variable <unnamed var:   %33 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_Kinship
  [PB] has possible protection stack imbalance gaston/src/m4_kinship.cpp:181

Function gg_Kinship_pw
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_Kinship_w
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_LD
  [PB] has possible protection stack imbalance gaston/src/m4_ld.cpp:387

Function gg_LD_chunk
  [PB] has possible protection stack imbalance gaston/src/m4_ld.cpp:407

Function gg_LD_chunk_p
  [PB] has possible protection stack imbalance gaston/src/m4_ldp.cpp:306

Function gg_LD_p
  [PB] has possible protection stack imbalance gaston/src/m4_ldp.cpp:287

Function gg_SNPmatch
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_alleles_duplicated
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_alleles_recoding
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_as_matrix4
  [PB] has possible protection stack imbalance gaston/src/m4_conversion.cpp:131

Function gg_bind_inds2
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_bind_snps
  [PB] has possible protection stack imbalance gaston/src/m4_bind_snps.cpp:42

Function gg_diago_full_likelihood1
  [PB] has possible protection stack imbalance gaston/src/lmm_diago_full_likelihood.cpp:158

Function gg_diago_full_likelihood1_nocovar
  [PB] has possible protection stack imbalance gaston/src/lmm_diago_full_likelihood.cpp:119

Function gg_diago_full_likelihood2
  [PB] has possible protection stack imbalance gaston/src/lmm_diago_full_likelihood.cpp:178

Function gg_diago_full_likelihood2_nocovar
  [PB] has possible protection stack imbalance gaston/src/lmm_diago_full_likelihood.cpp:138

Function gg_diago_likelihood1
  [PB] has possible protection stack imbalance gaston/src/lmm_diago_likelihood.cpp:158

Function gg_diago_likelihood1_nocovar
  [PB] has possible protection stack imbalance gaston/src/lmm_diago_likelihood.cpp:119

Function gg_diago_likelihood2
  [PB] has possible protection stack imbalance gaston/src/lmm_diago_likelihood.cpp:178

Function gg_diago_likelihood2_nocovar
  [PB] has possible protection stack imbalance gaston/src/lmm_diago_likelihood.cpp:138

Function gg_duplicated_remove
  [UP] ignoring variable <unnamed var:   %30 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_extract_inds_bool
  [PB] has possible protection stack imbalance gaston/src/m4_extractind.cpp:57

Function gg_extract_inds_indices
  [PB] has possible protection stack imbalance gaston/src/m4_extractind.cpp:72

Function gg_extract_snps_bool
  [PB] has possible protection stack imbalance gaston/src/m4_extractsnp.cpp:52

Function gg_extract_snps_indices
  [PB] has possible protection stack imbalance gaston/src/m4_extractsnp.cpp:67

Function gg_fit_diago
  [PB] has possible protection stack imbalance gaston/src/lmm_diago_fit.cpp:161

Function gg_fit_diago_nocovar
  [PB] has possible protection stack imbalance gaston/src/lmm_diago_fit.cpp:183

Function gg_geno_stats
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_geno_stats_inds
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_geno_stats_snps
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_hwe
  [PB] has possible protection stack imbalance gaston/src/hwe.cpp:148

Function gg_hwe_chi
  [PB] has possible protection stack imbalance gaston/src/hwe_chi.cpp:40

Function gg_ld_thin_left
  [UP] ignoring variable <unnamed var:   %39 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_ld_thin_random
  [UP] ignoring variable <unnamed var:   %39 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_ld_thin_right
  [UP] ignoring variable <unnamed var:   %39 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_logistic
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_logp_thinning
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_m4_as012
  [PB] has possible protection stack imbalance gaston/src/m4_conversion.cpp:160

Function gg_m4_as_scaled_matrix_mu_sigma
  [PB] has possible protection stack imbalance gaston/src/m4_conversion.cpp:193

Function gg_m4_as_scaled_matrix_p
  [PB] has possible protection stack imbalance gaston/src/m4_conversion.cpp:176

Function gg_m4_loading_to_pc_ms
  [PB] has possible protection stack imbalance gaston/src/m4_prod2_ms.cpp:105

Function gg_m4_loading_to_pc_p
  [PB] has possible protection stack imbalance gaston/src/m4_prod2_p.cpp:103

Function gg_m4_pc_to_loading_ms
  [PB] has possible protection stack imbalance gaston/src/m4_prod_ms.cpp:88

Function gg_m4_pc_to_loading_p
  [PB] has possible protection stack imbalance gaston/src/m4_prod_p.cpp:85

Function gg_manhattan_thinning
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_new_matrix4
  [PB] has possible protection stack imbalance gaston/src/m4_conversion.cpp:117

Function gg_ninds
  [PB] has possible protection stack imbalance gaston/src/m4_dims.cpp:49

Function gg_nsnps
  [PB] has possible protection stack imbalance gaston/src/m4_dims.cpp:35

Function gg_pre_likelihood
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_pre_likelihood_nofix
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_random_ortho
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_raw_as_matrix4
  [PB] has possible protection stack imbalance gaston/src/m4_conversion.cpp:145

Function gg_re_likelihood
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_re_likelihood_nofix
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_read_bed_file
  [PB] has possible protection stack imbalance gaston/src/m4_bed.cpp:149

Function gg_read_vcf2
  [PB] has possible protection stack imbalance gaston/src/m4_read_vcf_2.cpp:333

Function gg_read_vcf_filtered
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_which_duplicated_chr_pos
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_which_duplicated_chr_pos_alleles
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_which_duplicated_id
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_which_duplicated_id_chr_pos
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function gg_which_duplicated_id_chr_pos_alleles
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function ld_clump
  [UP] ignoring variable <unnamed var:   %33 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<Rcpp::Vector<19, Rcpp::PreserveStorage> >(Rcpp::Vector<19, Rcpp::PreserveStorage> const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<SEXPREC*>(SEXPREC* const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
  [UP] ignoring variable <unnamed var:   %7 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

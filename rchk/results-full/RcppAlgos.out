Package RcppAlgos version 2.5.3
Package built using 82503/R 4.3.0; x86_64-pc-linux-gnu; 2022-06-21 07:07:07 UTC; unix   
Checked with rchk version 29e18222e1cfa67ba8e63bd3b22a25f78593c554 LLVM version 14.0.0
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function CnstrntsSpecial::nextComb()
  [UP] calling allocating function ComboRes::nextNumCombs(SEXPREC*)(?,V) with argument allocated using Rf_ScalarInteger RcppAlgos/src/CnstrntsSpecialClass.cpp:32

Function CombinatoricsApply(SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*)
  [UP] ignoring variable Rm as it has address taken, results will be incomplete 

Function CombinatoricsCount(SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*)
  [UP] ignoring variable Rm as it has address taken, results will be incomplete 

Function CombinatoricsStndrd(SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*)
  [UP] ignoring variable Rm as it has address taken, results will be incomplete 

Function FinalTouch(SEXPREC*, bool, int, int, int, int, bool, std::__1::vector<double, std::__1::allocator<double> > const&, __mpz_struct (*) [1], bool, bool)
  [PB] has possible protection stack imbalance RcppAlgos/src/ComboGroups.cpp:61

Function GlueComboCart(std::__1::vector<int, std::__1::allocator<int> > const&, std::__1::vector<int, std::__1::allocator<int> > const&, std::__1::vector<int, std::__1::allocator<int> > const&, std::__1::vector<std::__1::vector<int, std::__1::allocator<int> >, std::__1::allocator<std::__1::vector<int, std::__1::allocator<int> > > > const&, std::__1::vector<int, std::__1::allocator<int> > const&, std::__1::vector<int, std::__1::allocator<int> > const&, SEXPREC*, int*, int*, double*, SEXPREC*, int, int, bool)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete RcppAlgos/src/CartesianContainer.cpp:344
  [UP] allocating function void GetPureOutput<double>(double*, SEXPREC*, SEXPREC*, std::__1::vector<int, std::__1::allocator<int> > const&, std::__1::vector<int, std::__1::allocator<int> > const&, std::__1::vector<int, std::__1::allocator<int> > const&, double const*, int, int) may destroy its unprotected argument (res <arg 2>), which is later used. RcppAlgos/src/CartesianContainer.cpp:372
  [UP] calling allocating function void GetPureOutput<double>(double*, SEXPREC*, SEXPREC*, std::__1::vector<int, std::__1::allocator<int> > const&, std::__1::vector<int, std::__1::allocator<int> > const&, std::__1::vector<int, std::__1::allocator<int> > const&, double const*, int, int) with a fresh pointer (res <arg 2>) RcppAlgos/src/CartesianContainer.cpp:372

Function GlueDbl(long, double, bool, bool, int, int)
  [PB] has negative depth RcppAlgos/src/DivNumSieve.cpp:253
  [UP] attempt to unprotect more items (2) than protected (1), results will be incomplete RcppAlgos/src/DivNumSieve.cpp:253
  [PB] has negative depth RcppAlgos/src/DivNumSieve.cpp:269
  [UP] attempt to unprotect more items (2) than protected (1), results will be incomplete RcppAlgos/src/DivNumSieve.cpp:269
  [PB] has possible protection stack imbalance RcppAlgos/src/DivNumSieve.cpp:272

Function GlueDblMotley(long, double, bool, bool, int, int)
  [PB] has negative depth RcppAlgos/src/MotleyPrimes.cpp:140
  [UP] attempt to unprotect more items (2) than protected (1), results will be incomplete RcppAlgos/src/MotleyPrimes.cpp:140
  [PB] has negative depth RcppAlgos/src/MotleyPrimes.cpp:163
  [UP] attempt to unprotect more items (2) than protected (1), results will be incomplete RcppAlgos/src/MotleyPrimes.cpp:163
  [PB] has possible protection stack imbalance RcppAlgos/src/MotleyPrimes.cpp:166

Function GlueInt(int, int, bool, bool, int, int)
  [PB] has negative depth RcppAlgos/src/DivNumSieve.cpp:206
  [UP] attempt to unprotect more items (2) than protected (1), results will be incomplete RcppAlgos/src/DivNumSieve.cpp:206
  [PB] has negative depth RcppAlgos/src/DivNumSieve.cpp:222
  [UP] attempt to unprotect more items (2) than protected (1), results will be incomplete RcppAlgos/src/DivNumSieve.cpp:222
  [PB] has possible protection stack imbalance RcppAlgos/src/DivNumSieve.cpp:225

Function GlueIntMotley(int, int, bool, bool, int, int)
  [PB] has negative depth RcppAlgos/src/MotleyPrimes.cpp:92
  [UP] attempt to unprotect more items (2) than protected (1), results will be incomplete RcppAlgos/src/MotleyPrimes.cpp:92
  [PB] has negative depth RcppAlgos/src/MotleyPrimes.cpp:114
  [UP] attempt to unprotect more items (2) than protected (1), results will be incomplete RcppAlgos/src/MotleyPrimes.cpp:114
  [PB] has possible protection stack imbalance RcppAlgos/src/MotleyPrimes.cpp:117

Function PolGlueDbl(std::__1::vector<double, std::__1::allocator<double> >&, double, bool, bool, bool, int, int)
  [PB] has negative depth RcppAlgos/src/PollardRho.cpp:228
  [UP] attempt to unprotect more items (2) than protected (1), results will be incomplete RcppAlgos/src/PollardRho.cpp:228
  [PB] has negative depth RcppAlgos/src/PollardRho.cpp:290
  [UP] attempt to unprotect more items (2) than protected (1), results will be incomplete RcppAlgos/src/PollardRho.cpp:290
  [PB] has negative depth RcppAlgos/src/PollardRho.cpp:306
  [UP] attempt to unprotect more items (2) than protected (1), results will be incomplete RcppAlgos/src/PollardRho.cpp:306
  [PB] has possible protection stack imbalance RcppAlgos/src/PollardRho.cpp:309

Function PolGlueInt(std::__1::vector<double, std::__1::allocator<double> >&, int, bool, bool, bool, int, int)
  [PB] has negative depth RcppAlgos/src/PollardRho.cpp:106
  [UP] attempt to unprotect more items (2) than protected (1), results will be incomplete RcppAlgos/src/PollardRho.cpp:106
  [PB] has negative depth RcppAlgos/src/PollardRho.cpp:167
  [UP] attempt to unprotect more items (2) than protected (1), results will be incomplete RcppAlgos/src/PollardRho.cpp:167
  [PB] has negative depth RcppAlgos/src/PollardRho.cpp:183
  [UP] attempt to unprotect more items (2) than protected (1), results will be incomplete RcppAlgos/src/PollardRho.cpp:183
  [PB] has possible protection stack imbalance RcppAlgos/src/PollardRho.cpp:186

Function SampleCombPerm(SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*)
  [UP] ignoring variable Rm as it has address taken, results will be incomplete 

Function SetDblNames(SEXPREC*, std::__1::vector<double, std::__1::allocator<double> > const&)
  [PB] has possible protection stack imbalance RcppAlgos/src/SetUpUtils.cpp:779

Function SetDblNames(SEXPREC*, unsigned long, double, double)
  [PB] has possible protection stack imbalance RcppAlgos/src/SetUpUtils.cpp:766

Function SetIntNames(SEXPREC*, unsigned long, int, int)
  [PB] has possible protection stack imbalance RcppAlgos/src/SetUpUtils.cpp:752

Function SetSampleNames(SEXPREC*, bool, int, std::__1::vector<double, std::__1::allocator<double> > const&, __mpz_struct (*) [1], SEXPREC*, int)
  [PB] has an unsupported form of unprotect (not constant, not variable), results will be incomplete RcppAlgos/src/SetUpUtils.cpp:696
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete RcppAlgos/src/SetUpUtils.cpp:696
  [PB] has possible protection stack imbalance RcppAlgos/src/SetUpUtils.cpp:701

Function _RcppAlgos_BackGlue
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_CheckConstrndCpp
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_CheckReturn
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_CombClassNew
  [UP] ignoring variable <unnamed var:   %32 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_CombinatoricsApply
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_CombinatoricsCnstrt
  [UP] ignoring variable <unnamed var:   %34 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_CombinatoricsCount
  [UP] ignoring variable <unnamed var:   %14 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_CombinatoricsStndrd
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_ComboGridCpp
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_ComboGroupsCountCpp
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_ComboGroupsCpp
  [UP] ignoring variable <unnamed var:   %34 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_CurrCombGlue
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_DivNumSieveCpp
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_FrontGlue
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_GetClassVals
  [UP] ignoring variable <unnamed var:   %22 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_MotleyContainer
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_NextCombGlue
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_NextGatherGlue
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_NextNumCombGlue
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_PartitionsCount
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_PollardRhoContainer
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_PrevCombGlue
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_PrevGatherGlue
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_PrevNumCombGlue
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_PrimeCountCpp
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_PrimeSieveCpp
  [UP] ignoring variable <unnamed var:   %14 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_RandomAccessGlue
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_SampleCombPerm
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_SamplePartitions
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_SourceVectorGlue
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_StartOverGlue
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_SummaryGlue
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppAlgos_cpp11GetNumThreads
  [UP] ignoring variable <unnamed var:   %4 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

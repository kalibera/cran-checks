Package QuickJSR version 1.8.1
Package built using 88872/R 4.6.0; x86_64-pc-linux-gnu; 2025-09-27 03:52:45 UTC; unix   
Checked with rchk version 35618ebbccf3cd0b45a3530e6303970a22a9056b LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function cpp11::environment::proxy& cpp11::environment::proxy::operator=<SEXPREC*>(SEXPREC*)
  [UP] ignoring variable value as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function cpp11::package::operator[](char const*)
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function from_json_
  [UP] ignoring variable json_ as it has address taken, results will be incomplete 

Function qjs_assign_
  [UP] ignoring variable js_obj_name_ as it has address taken, results will be incomplete 
  [UP] ignoring variable value_ as it has address taken, results will be incomplete 

Function qjs_call_
  [UP] ignoring variable fun_name_ as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function qjs_eval_
  [UP] ignoring variable eval_string_ as it has address taken, results will be incomplete 

Function qjs_get_
  [UP] ignoring variable js_obj_name as it has address taken, results will be incomplete 

Function qjs_source_
  [UP] ignoring variable input_ as it has address taken, results will be incomplete 

Function qjs_validate_
  [UP] ignoring variable code_string_ as it has address taken, results will be incomplete 

Function quickjsr::JSValue_to_SEXP_list(JSContext*, JSValue const&)
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function quickjsr::JSValue_to_SEXP_scalar(JSContext*, JSValue const&)
  [UP] ignoring variable <unnamed var:   %19 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function quickjsr::JSValue_to_SEXP_vector(JSContext*, JSValue const&)
  [UP] ignoring variable <unnamed var:   %51 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %73 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %81 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function quickjsr::SEXP_to_JSValue(JSContext*, SEXPREC* const&, bool, bool, long)
  [UP] ignoring variable levels as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %22 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %25 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function quickjsr::SEXP_to_JSValue_df(JSContext*, SEXPREC* const&, bool, bool)
  [UP] ignoring variable col_names as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable col as it has address taken, results will be incomplete 
  [UP] ignoring variable df_names as it has address taken, results will be incomplete 
  [UP] ignoring variable row_names as it has address taken, results will be incomplete 

Function quickjsr::SEXP_to_JSValue_object(JSContext*, SEXPREC* const&, bool, bool)
  [UP] ignoring variable names as it has address taken, results will be incomplete 

Function quickjsr::js_fun_static(JSContext*, JSValue, int, JSValue*, int, JSValue*)
  [UP] ignoring variable x as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %19 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %30 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function quickjsr::js_r_package(JSContext*, JSValue, int, JSValue*)
  [UP] ignoring variable pkg_ns as it has address taken, results will be incomplete 

Function quickjsr::js_renv_get_property(JSContext*, JSValue, unsigned int, JSValue)
  [UP] ignoring variable fun as it has address taken, results will be incomplete 

Function to_json_
  [UP] ignoring variable arg_ as it has address taken, results will be incomplete 

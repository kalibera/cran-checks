Package QuickJSR version 1.4.0
Package built using 87358/R 4.5.0; x86_64-pc-linux-gnu; 2024-11-21 14:57:16 UTC; unix   
Checked with rchk version 35618ebbccf3cd0b45a3530e6303970a22a9056b LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function cpp11::attribute_proxy<cpp11::writable::r_vector<SEXPREC*> >::operator SEXPREC*() const
  [UP] ignoring variable <unnamed var:   %4 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function cpp11::attribute_proxy<cpp11::writable::r_vector<cpp11::r_string> >::operator SEXPREC*() const
  [UP] ignoring variable <unnamed var:   %4 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function cpp11::attribute_proxy<cpp11::writable::r_vector<double> >::operator SEXPREC*() const
  [UP] ignoring variable <unnamed var:   %4 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function cpp11::environment::proxy& cpp11::environment::proxy::operator=<SEXPREC*>(SEXPREC*)
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable value as it has address taken, results will be incomplete 

Function cpp11::package::operator[](char const*)
  [UP] ignoring variable <unnamed var:   %7 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function cpp11::writable::r_vector<SEXPREC*>::operator SEXPREC*() const
  [UP] calling allocating function cpp11::writable::truncate(SEXPREC*, long, long) with a fresh pointer (nms <arg 1>) QuickJSR/src/../inst/include/cpp11/r_vector.hpp:923

Function cpp11::writable::r_vector<cpp11::r_string>::operator SEXPREC*() const
  [UP] calling allocating function cpp11::writable::truncate(SEXPREC*, long, long) with a fresh pointer (nms <arg 1>) QuickJSR/src/../inst/include/cpp11/r_vector.hpp:923

Function cpp11::writable::r_vector<double>::operator SEXPREC*() const
  [UP] calling allocating function cpp11::writable::truncate(SEXPREC*, long, long) with a fresh pointer (nms <arg 1>) QuickJSR/src/../inst/include/cpp11/r_vector.hpp:923

Function cpp11::writable::truncate(SEXPREC*, long, long)
  [UP] ignoring variable x as it has address taken, results will be incomplete 

Function from_json_
  [UP] unprotected variable <unnamed var:   %2 = alloca %struct.SEXPREC*, align 8> while calling allocating function quickjsr::JS_ValContainer::~JS_ValContainer() QuickJSR/src/quickjsr.cpp:111

Function qjs_assign_
  [UP] unprotected variable <unnamed var:   %4 = alloca %struct.SEXPREC*, align 8> while calling allocating function quickjsr::JS_ValContainer::~JS_ValContainer() QuickJSR/src/quickjsr.cpp:84

Function qjs_call_
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] unprotected variable <unnamed var:   %4 = alloca %struct.SEXPREC*, align 8> while calling allocating function quickjsr::JS_ValContainer::~JS_ValContainer() QuickJSR/src/quickjsr.cpp:64

Function qjs_eval_
  [UP] unprotected variable <unnamed var:   %2 = alloca %struct.SEXPREC*, align 8> while calling allocating function quickjsr::JS_ValContainer::~JS_ValContainer() QuickJSR/src/quickjsr.cpp:93

Function qjs_get_
  [UP] unprotected variable <unnamed var:   %3 = alloca %struct.SEXPREC*, align 8> while calling allocating function quickjsr::JS_ValContainer::~JS_ValContainer() QuickJSR/src/quickjsr.cpp:73

Function qjs_source_
  [UP] ignoring variable input_ as it has address taken, results will be incomplete 

Function qjs_validate_
  [UP] unprotected variable <unnamed var:   %3 = alloca %struct.SEXPREC*, align 8> while calling allocating function quickjsr::JS_ValContainer::~JS_ValContainer() QuickJSR/src/quickjsr.cpp:42

Function quickjsr::JSValue_to_SEXP_list(JSContext*, JSValue const&)
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function quickjsr::JSValue_to_SEXP_scalar(JSContext*, JSValue const&)
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function quickjsr::JSValue_to_SEXP_vector(JSContext*, JSValue const&)
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %36 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %44 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function quickjsr::SEXP_to_JSValue(JSContext*, SEXPREC* const&, bool, bool, long)
  [UP] ignoring variable levels as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %22 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %25 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function quickjsr::SEXP_to_JSValue_df(JSContext*, SEXPREC* const&, bool, bool)
  [UP] ignoring variable col_names as it has address taken, results will be incomplete 
  [UP] ignoring variable row_names as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable col as it has address taken, results will be incomplete 
  [UP] ignoring variable df_names as it has address taken, results will be incomplete 

Function quickjsr::SEXP_to_JSValue_object(JSContext*, SEXPREC* const&, bool, bool)
  [UP] ignoring variable names as it has address taken, results will be incomplete 

Function quickjsr::js_fun_static(JSContext*, JSValue, int, JSValue*, int, JSValue*)
  [UP] ignoring variable <unnamed var:   %19 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %30 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable x as it has address taken, results will be incomplete 

Function quickjsr::js_r_package(JSContext*, JSValue, int, JSValue*)
  [UP] ignoring variable pkg_ns as it has address taken, results will be incomplete 

Function quickjsr::js_renv_get_property(JSContext*, JSValue, unsigned int, JSValue)
  [UP] ignoring variable fun as it has address taken, results will be incomplete 

Function to_json_
  [UP] unprotected variable <unnamed var:   %3 = alloca %struct.SEXPREC*, align 8> while calling allocating function quickjsr::JS_ValContainer::~JS_ValContainer() QuickJSR/src/quickjsr.cpp:101

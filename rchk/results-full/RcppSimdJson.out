Package RcppSimdJson version 0.1.7
Package built using 82503/R 4.3.0; x86_64-pc-linux-gnu; 2022-06-21 07:10:13 UTC; unix   
Checked with rchk version 29e18222e1cfa67ba8e63bd3b22a25f78593c554 LLVM version 14.0.0
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function Rcpp::Armor<SEXPREC*>::init(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:47

Function Rcpp::Armor<SEXPREC*>::~Armor()
  [PB] has negative depth Rcpp/include/Rcpp/protection/Armor.h:41
  [UP] attempt to unprotect more items (1) than protected (0), results will be incomplete Rcpp/include/Rcpp/protection/Armor.h:41
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:42

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, long, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)0, (rcppsimdjson::utils::Int64_R_Type)1>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)0, (rcppsimdjson::utils::Int64_R_Type)1> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, long, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)1, (rcppsimdjson::utils::Int64_R_Type)1>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)1, (rcppsimdjson::utils::Int64_R_Type)1> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, long, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)2, (rcppsimdjson::utils::Int64_R_Type)1>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)2, (rcppsimdjson::utils::Int64_R_Type)1> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)0, (rcppsimdjson::utils::Int64_R_Type)0>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)0, (rcppsimdjson::utils::Int64_R_Type)0> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)0, (rcppsimdjson::utils::Int64_R_Type)1>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)0, (rcppsimdjson::utils::Int64_R_Type)1> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)0, (rcppsimdjson::utils::Int64_R_Type)2>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)0, (rcppsimdjson::utils::Int64_R_Type)2> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)0, (rcppsimdjson::utils::Int64_R_Type)3>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)0, (rcppsimdjson::utils::Int64_R_Type)3> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)1, (rcppsimdjson::utils::Int64_R_Type)0>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)1, (rcppsimdjson::utils::Int64_R_Type)0> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)1, (rcppsimdjson::utils::Int64_R_Type)1>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)1, (rcppsimdjson::utils::Int64_R_Type)1> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)1, (rcppsimdjson::utils::Int64_R_Type)2>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)1, (rcppsimdjson::utils::Int64_R_Type)2> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)1, (rcppsimdjson::utils::Int64_R_Type)3>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)1, (rcppsimdjson::utils::Int64_R_Type)3> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)2, (rcppsimdjson::utils::Int64_R_Type)0>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)2, (rcppsimdjson::utils::Int64_R_Type)0> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)2, (rcppsimdjson::utils::Int64_R_Type)1>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)2, (rcppsimdjson::utils::Int64_R_Type)1> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)2, (rcppsimdjson::utils::Int64_R_Type)2>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)2, (rcppsimdjson::utils::Int64_R_Type)2> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)2, (rcppsimdjson::utils::Int64_R_Type)3>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)2, (rcppsimdjson::utils::Int64_R_Type)3> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, unsigned long, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)0, (rcppsimdjson::utils::Int64_R_Type)0>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)0, (rcppsimdjson::utils::Int64_R_Type)0> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, unsigned long, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)0, (rcppsimdjson::utils::Int64_R_Type)1>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)0, (rcppsimdjson::utils::Int64_R_Type)1> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, unsigned long, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)0, (rcppsimdjson::utils::Int64_R_Type)2>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)0, (rcppsimdjson::utils::Int64_R_Type)2> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, unsigned long, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)0, (rcppsimdjson::utils::Int64_R_Type)3>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)0, (rcppsimdjson::utils::Int64_R_Type)3> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, unsigned long, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)1, (rcppsimdjson::utils::Int64_R_Type)0>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)1, (rcppsimdjson::utils::Int64_R_Type)0> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, unsigned long, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)1, (rcppsimdjson::utils::Int64_R_Type)1>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)1, (rcppsimdjson::utils::Int64_R_Type)1> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, unsigned long, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)1, (rcppsimdjson::utils::Int64_R_Type)2>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)1, (rcppsimdjson::utils::Int64_R_Type)2> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, unsigned long, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)1, (rcppsimdjson::utils::Int64_R_Type)3>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)1, (rcppsimdjson::utils::Int64_R_Type)3> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, unsigned long, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)2, (rcppsimdjson::utils::Int64_R_Type)0>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)2, (rcppsimdjson::utils::Int64_R_Type)0> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, unsigned long, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)2, (rcppsimdjson::utils::Int64_R_Type)1>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)2, (rcppsimdjson::utils::Int64_R_Type)1> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, unsigned long, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)2, (rcppsimdjson::utils::Int64_R_Type)2>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)2, (rcppsimdjson::utils::Int64_R_Type)2> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<16, Rcpp::PreserveStorage> rcppsimdjson::deserialize::build_col<16, unsigned long, (rcppsimdjson::rcpp_T)2, (rcppsimdjson::deserialize::Type_Policy)2, (rcppsimdjson::utils::Int64_R_Type)3>(simdjson::dom::array, std::__1::basic_string_view<char, std::__1::char_traits<char> >, rcppsimdjson::deserialize::Type_Doctor<(rcppsimdjson::deserialize::Type_Policy)2, (rcppsimdjson::utils::Int64_R_Type)3> const&)
  [UP] ignoring variable <unnamed var:   %49 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::internal::convert_using_rfunction(SEXPREC*, char const*)
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppSimdJson_check_int64
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppSimdJson_cppVersion
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppSimdJson_deserialize
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %46 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppSimdJson_diagnose_input
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppSimdJson_dispatch_fminify
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppSimdJson_dispatch_is_valid_json
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppSimdJson_dispatch_is_valid_utf8
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppSimdJson_exceptions_enabled
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppSimdJson_is_valid_json_arg
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppSimdJson_is_valid_query_arg
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppSimdJson_load
  [UP] ignoring variable <unnamed var:   %46 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %45 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppSimdJson_unsupportedArchitecture
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _RcppSimdJson_validateJSON
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function check_int64()
  [UP] ignoring variable <unnamed var:   %103 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %107 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %111 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %119 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %123 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %127 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %135 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %139 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %143 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %31 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %39 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %43 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %47 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %55 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %59 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %63 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %71 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %75 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %79 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %87 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %91 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %95 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %27 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function dispatch_fminify(SEXPREC*)
  [UP] ignoring variable <unnamed var:   %14 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function dispatch_is_valid_json(SEXPREC*)
  [UP] ignoring variable <unnamed var:   %14 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function dispatch_is_valid_utf8(SEXPREC*)
  [UP] ignoring variable <unnamed var:   %14 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<16, Rcpp::PreserveStorage>::fill__dispatch<SEXPREC*>(Rcpp::traits::integral_constant<bool, true>, SEXPREC* const&)
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

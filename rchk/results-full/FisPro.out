Package FisPro version 1.1.4
Package built using 88872/R 4.6.0; x86_64-pc-linux-gnu; 2025-09-27 04:36:59 UTC; unix   
Checked with rchk version 35618ebbccf3cd0b45a3530e6303970a22a9056b LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function Rcpp::Armor<SEXPREC*>::init(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:47

Function Rcpp::Armor<SEXPREC*>::~Armor()
  [PB] has negative depth Rcpp/include/Rcpp/protection/Armor.h:41
  [UP] attempt to unprotect more items (1) than protected (0), results will be incomplete Rcpp/include/Rcpp/protection/Armor.h:41
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:42

Function Rcpp::Environment_Impl<Rcpp::PreserveStorage>::Rcpp_namespace()
  [UP] calling allocating function Rcpp::Environment_Impl<Rcpp::PreserveStorage>::Environment_Impl(SEXPREC*) with argument allocated using Rcpp::internal::get_Rcpp_namespace() Rcpp/include/Rcpp/Environment.h:348

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function Rcpp::class_<deprecated_fis_wrapper>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<deprecated_mf_trapezoidal_inf_wrapper>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<deprecated_mf_trapezoidal_sup_wrapper>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<deprecated_mf_trapezoidal_wrapper>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<deprecated_mf_triangular_wrapper>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<deprecated_mf_wrapper>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<fis_wrapper>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<fisin_wrapper>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<fisout_crisp_wrapper>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<fisout_fuzzy_wrapper>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<fisout_wrapper>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<mf_trapezoidal_inf_wrapper>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<mf_trapezoidal_sup_wrapper>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<mf_trapezoidal_wrapper>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<mf_triangular_wrapper>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<mf_wrapper>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<rule_wrapper>::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::internal::convert_using_rfunction(SEXPREC*, char const*)
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<true, fis_wrapper, SEXPREC*, Rcpp::DataFrame_Impl<Rcpp::PreserveStorage> >::operator()(fis_wrapper*, SEXPREC**)::{lambda(Rcpp::DataFrame_Impl<Rcpp::PreserveStorage>)#1}, SEXPREC*, Rcpp::DataFrame_Impl<Rcpp::PreserveStorage>, 0, (void*)0>(Rcpp::CppMethodImplN<true, fis_wrapper, SEXPREC*, Rcpp::DataFrame_Impl<Rcpp::PreserveStorage> >::operator()(fis_wrapper*, SEXPREC**)::{lambda(Rcpp::DataFrame_Impl<Rcpp::PreserveStorage>)#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*, Rcpp::DataFrame_Impl<Rcpp::PreserveStorage> >, Rcpp::traits::index_sequence<0>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<true, fis_wrapper, SEXPREC*, Rcpp::Matrix<14, Rcpp::PreserveStorage> >::operator()(fis_wrapper*, SEXPREC**)::{lambda(Rcpp::Matrix<14, Rcpp::PreserveStorage>)#1}, SEXPREC*, Rcpp::Matrix<14, Rcpp::PreserveStorage>, 0, (void*)0>(Rcpp::CppMethodImplN<true, fis_wrapper, SEXPREC*, Rcpp::Matrix<14, Rcpp::PreserveStorage> >::operator()(fis_wrapper*, SEXPREC**)::{lambda(Rcpp::Matrix<14, Rcpp::PreserveStorage>)#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*, Rcpp::Matrix<14, Rcpp::PreserveStorage> >, Rcpp::traits::index_sequence<0>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<true, fis_wrapper, SEXPREC*, int>::operator()(fis_wrapper*, SEXPREC**)::{lambda(int)#1}, SEXPREC*, int, 0, (void*)0>(Rcpp::CppMethodImplN<true, fis_wrapper, SEXPREC*, int>::operator()(fis_wrapper*, SEXPREC**)::{lambda(int)#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*, int>, Rcpp::traits::index_sequence<0>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<true, fisin_wrapper, SEXPREC*, int>::operator()(fisin_wrapper*, SEXPREC**)::{lambda(int)#1}, SEXPREC*, int, 0, (void*)0>(Rcpp::CppMethodImplN<true, fisin_wrapper, SEXPREC*, int>::operator()(fisin_wrapper*, SEXPREC**)::{lambda(int)#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*, int>, Rcpp::traits::index_sequence<0>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<true, fisout_fuzzy_wrapper, SEXPREC*, int>::operator()(fisout_fuzzy_wrapper*, SEXPREC**)::{lambda(int)#1}, SEXPREC*, int, 0, (void*)0>(Rcpp::CppMethodImplN<true, fisout_fuzzy_wrapper, SEXPREC*, int>::operator()(fisout_fuzzy_wrapper*, SEXPREC**)::{lambda(int)#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*, int>, Rcpp::traits::index_sequence<0>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

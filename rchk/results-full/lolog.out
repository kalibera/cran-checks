Package lolog version 1.3
Package built using 80940/R 4.2.0; x86_64-pc-linux-gnu; 2021-09-20 14:13:39 UTC; unix   
Checked with rchk version 35d5d01a98903a5f3e9ec166dcdb2f790ecb784f LLVM version 11.0.0
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function Rcpp::Armor<SEXPREC*>::init(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:47

Function Rcpp::Armor<SEXPREC*>::~Armor()
  [PB] has negative depth Rcpp/include/Rcpp/protection/Armor.h:41
  [UP] attempt to unprotect more items (1) than protected (0), results will be incomplete Rcpp/include/Rcpp/protection/Armor.h:41
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:42

Function Rcpp::Environment_Impl<Rcpp::PreserveStorage>::get(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
  [UP] calling allocating function Rcpp::internal::Rcpp_eval_impl(SEXPREC*, SEXPREC*) with a fresh pointer (res <arg 1>) Rcpp/include/Rcpp/Environment.h:112

Function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<Rcpp::RObject_Impl<Rcpp::PreserveStorage> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::RObject_Impl<Rcpp::PreserveStorage> const&)
  [UP] ignoring variable <unnamed var:   %7 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<Rcpp::Symbol_Impl<Rcpp::NoProtectStorage>, Rcpp::XPtr<lolog::BinaryNet<lolog::Directed>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<lolog::BinaryNet<lolog::Directed> >(lolog::BinaryNet<lolog::Directed>*)), false> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::Symbol_Impl<Rcpp::NoProtectStorage> const&, Rcpp::XPtr<lolog::BinaryNet<lolog::Directed>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<lolog::BinaryNet<lolog::Directed> >(lolog::BinaryNet<lolog::Directed>*)), false> const&)
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<Rcpp::Symbol_Impl<Rcpp::NoProtectStorage>, Rcpp::XPtr<lolog::BinaryNet<lolog::Undirected>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<lolog::BinaryNet<lolog::Undirected> >(lolog::BinaryNet<lolog::Undirected>*)), false> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::Symbol_Impl<Rcpp::NoProtectStorage> const&, Rcpp::XPtr<lolog::BinaryNet<lolog::Undirected>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<lolog::BinaryNet<lolog::Undirected> >(lolog::BinaryNet<lolog::Undirected>*)), false> const&)
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<Rcpp::Symbol_Impl<Rcpp::NoProtectStorage>, Rcpp::XPtr<lolog::Model<lolog::Directed>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<lolog::Model<lolog::Directed> >(lolog::Model<lolog::Directed>*)), false> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::Symbol_Impl<Rcpp::NoProtectStorage> const&, Rcpp::XPtr<lolog::Model<lolog::Directed>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<lolog::Model<lolog::Directed> >(lolog::Model<lolog::Directed>*)), false> const&)
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<Rcpp::Symbol_Impl<Rcpp::NoProtectStorage>, Rcpp::XPtr<lolog::Model<lolog::Undirected>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<lolog::Model<lolog::Undirected> >(lolog::Model<lolog::Undirected>*)), false> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::Symbol_Impl<Rcpp::NoProtectStorage> const&, Rcpp::XPtr<lolog::Model<lolog::Undirected>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<lolog::Model<lolog::Undirected> >(lolog::Model<lolog::Undirected>*)), false> const&)
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<Rcpp::Vector<19, Rcpp::PreserveStorage> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::Vector<19, Rcpp::PreserveStorage> const&)
  [UP] ignoring variable <unnamed var:   %7 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<SEXPREC*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, SEXPREC* const&)
  [UP] ignoring variable <unnamed var:   %7 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<char [7]>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, char const (&) [7])
  [UP] ignoring variable <unnamed var:   %7 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function Rcpp::Reference_Impl<Rcpp::PreserveStorage>::Reference_Impl(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
  [UP] calling allocating function Rcpp::Rcpp_fast_eval(SEXPREC*, SEXPREC*) with argument allocated using Rcpp::internal::get_Rcpp_namespace() Rcpp/include/Rcpp/Reference.h:63

Function Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back_name__impl(SEXPREC* const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::traits::integral_constant<bool, true>)
  [UP] unprotected variable names while calling allocating function Rf_allocVector Rcpp/include/Rcpp/vector/Vector.h:683

Function Rcpp::class_<lolog::BinaryNet<lolog::Directed> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<lolog::BinaryNet<lolog::Undirected> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<lolog::LatentOrderLikelihood<lolog::Directed> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<lolog::LatentOrderLikelihood<lolog::Undirected> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<lolog::Model<lolog::Directed> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<lolog::Model<lolog::Undirected> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::internal::convert_using_rfunction(SEXPREC*, char const*)
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::set(SEXPREC*)
  [UP] ignoring variable rhs as it has address taken, results will be incomplete 

Function lolog::BinaryNet<lolog::Directed>::BinaryNet(SEXPREC*)
  [UP] ignoring variable sexp as it has address taken, results will be incomplete 

Function lolog::BinaryNet<lolog::Directed>::getVariableNamesR1(bool)
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function lolog::BinaryNet<lolog::Undirected>::BinaryNet(SEXPREC*)
  [UP] ignoring variable sexp as it has address taken, results will be incomplete 

Function lolog::BinaryNet<lolog::Undirected>::getVariableNamesR1(bool)
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function lolog::Directed::addDiscreteVariableR(SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)
  [UP] ignoring variable robj as it has address taken, results will be incomplete 

Function lolog::EdgeCovSparse<lolog::Directed>::convertMatrix(SEXPREC*)
  [UP] ignoring variable x as it has address taken, results will be incomplete 

Function lolog::EdgeCovSparse<lolog::Undirected>::convertMatrix(SEXPREC*)
  [UP] ignoring variable x as it has address taken, results will be incomplete 

Function lolog::Model<lolog::Directed>::Model(SEXPREC*)
  [UP] ignoring variable sexp as it has address taken, results will be incomplete 

Function lolog::Model<lolog::Directed>::statisticsR()
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function lolog::Model<lolog::Directed>::thetasR()
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function lolog::Model<lolog::Undirected>::Model(SEXPREC*)
  [UP] ignoring variable sexp as it has address taken, results will be incomplete 

Function lolog::Model<lolog::Undirected>::statisticsR()
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function lolog::Model<lolog::Undirected>::thetasR()
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<Rcpp::Vector<13, Rcpp::PreserveStorage> >(Rcpp::Vector<13, Rcpp::PreserveStorage> const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<Rcpp::Vector<19, Rcpp::PreserveStorage> >(Rcpp::Vector<19, Rcpp::PreserveStorage> const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<SEXPREC*>(SEXPREC* const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<SEXPREC*>(SEXPREC* const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
  [UP] ignoring variable <unnamed var:   %7 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<bool>(bool const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<char [3]>(char const (&) [3])
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<char [4]>(char const (&) [4])
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<char [5]>(char const (&) [5])
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<char [7]>(char const (&) [7])
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<char [8]>(char const (&) [8])
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<double>(double const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<int>(int const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<std::__1::vector<int, std::__1::allocator<int> > >(std::__1::vector<int, std::__1::allocator<int> > const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void lolog::tests::changeStatTest<lolog::Directed>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)
  [UP] ignoring variable <unnamed var:   %25 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void lolog::tests::changeStatTest<lolog::Undirected>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)
  [UP] ignoring variable <unnamed var:   %25 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void lolog::tests::lt<lolog::Directed>()
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void lolog::tests::lt<lolog::Undirected>()
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Package OpenMx version 2.22.7
Package built using 88232/R 4.6.0; x86_64-pc-linux-gnu; 2025-05-26 10:01:55 UTC; unix   
Checked with rchk version 35618ebbccf3cd0b45a3530e6303970a22a9056b LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function BA81Expect::populateAttr(SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/omxExpectationBA81.cpp:416

Function ComputeBootstrap::computeImpl(FitContext*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:4356

Function ComputeBootstrap::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:4231

Function ComputeCI::computeImpl(FitContext*)
  [PB] has possible protection stack imbalance OpenMx/src/ComputeGD.cpp:1391

Function ComputeCI::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/ComputeGD.cpp:566

Function ComputeCI::reportResults(FitContext*, MxRList*, MxRList*)
  [PB] has possible protection stack imbalance OpenMx/src/ComputeGD.cpp:1442

Function ComputeCheckpoint::reportResults(FitContext*, MxRList*, MxRList*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:5787

Function ComputeEM::MengRubinFamily(FitContext*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:3392

Function ComputeEM::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:2908

Function ComputeEM::reportResults(FitContext*, MxRList*, MxRList*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:3447

Function ComputeGenSA::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/ComputeGD.cpp:1799

Function ComputeLoop::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:2666

Function ComputeNR::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/ComputeNR.cpp:396

Function ComputePenaltySearch::computeImpl(FitContext*)
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function ComputeReportDeriv::reportResults(FitContext*, MxRList*, MxRList*)
  [UP] unprotected variable Rihessian while calling allocating function FitContext::copyDenseIHess(double*) OpenMx/src/Compute.cpp:4140
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:4144

Function ComputeReportExpectation::reportResults(FitContext*, MxRList*, MxRList*)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [PB] has too high protection stack depth results will be incomplete
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:4165

Function ComputeStandardError::reportResults(FitContext*, MxRList*, MxRList*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:3932

Function ComputeTryCatch::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:2494

Function ComputeTryH::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/ComputeGD.cpp:1500

Function MLFitState::populateAttr(SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/omxMLFitFunction.cpp:379

Function MxRList::add(char const*, SEXPREC*)
  [UP] ignoring variable rkey as it has address taken, results will be incomplete 
  [PB] has possible protection stack imbalance OpenMx/src/./omxDefines.h:514

Function MxRList::asR()
  [PB] has possible protection stack imbalance OpenMx/src/glue.cpp:345

Function ProtectAutoBalanceDoodad::~ProtectAutoBalanceDoodad()
  [PB] has an unsupported form of unprotect (not constant, not variable), results will be incomplete OpenMx/src/./omxDefines.h:573
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete OpenMx/src/./omxDefines.h:573

Function ProtectedSEXP::ProtectedSEXP(SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/./omxDefines.h:544

Function ProtectedSEXP::~ProtectedSEXP()
  [PB] has negative depth OpenMx/src/./omxDefines.h:550
  [UP] attempt to unprotect more items (2) than protected (1), results will be incomplete OpenMx/src/./omxDefines.h:550
  [PB] has possible protection stack imbalance OpenMx/src/./omxDefines.h:551

Function Rcpp::Armor<SEXPREC*>::init(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:47

Function Rcpp::Armor<SEXPREC*>::~Armor()
  [PB] has negative depth Rcpp/include/Rcpp/protection/Armor.h:41
  [UP] attempt to unprotect more items (1) than protected (0), results will be incomplete Rcpp/include/Rcpp/protection/Armor.h:41
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:42

Function Rcpp::AttributeProxyPolicy<Rcpp::S4_Impl<Rcpp::PreserveStorage> >::AttributeProxy::operator char const*<char const*>() const
  [UP] calling allocating function char const* Rcpp::as<char const*>(SEXPREC*) with argument allocated using Rcpp::AttributeProxyPolicy<Rcpp::S4_Impl<Rcpp::PreserveStorage> >::AttributeProxy::get() const Rcpp/include/Rcpp/api/meat/proxy.h:40

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function Rcpp::SlotProxyPolicy<Rcpp::S4_Impl<Rcpp::PreserveStorage> >::SlotProxy::operator char const*<char const*>() const
  [UP] calling allocating function char const* Rcpp::as<char const*>(SEXPREC*) with argument allocated using Rcpp::SlotProxyPolicy<Rcpp::S4_Impl<Rcpp::PreserveStorage> >::SlotProxy::get() const Rcpp/include/Rcpp/api/meat/proxy.h:92

Function Rcpp::SlotProxyPolicy<Rcpp::S4_Impl<Rcpp::PreserveStorage> >::hasSlot(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
  [UP] calling allocating function R_has_slot(?,V) with argument allocated using Rf_mkString Rcpp/include/Rcpp/proxy/SlotProxy.h:97

Function Rcpp::internal::convert_using_rfunction(SEXPREC*, char const*)
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function RelationalRAMExpectation::independentGroup::exportInternalState(MxRList&, MxRList&)
  [PB] has possible protection stack imbalance OpenMx/src/omxRAMExpectation.cpp:2539

Function RelationalRAMExpectation::independentGroup::prep(FitContext*)
  [PB] has possible protection stack imbalance OpenMx/src/omxRAMExpectation.cpp:1774

Function RelationalRAMExpectation::state::exportInternalState(MxRList&)
  [UP] ignoring variable fk1 as it has address taken, results will be incomplete 
  [UP] ignoring variable hmean as it has address taken, results will be incomplete 
  [UP] ignoring variable numJoins as it has address taken, results will be incomplete 
  [UP] ignoring variable numKids as it has address taken, results will be incomplete 
  [UP] ignoring variable parent1 as it has address taken, results will be incomplete 
  [UP] ignoring variable qrf as it has address taken, results will be incomplete 
  [UP] ignoring variable row as it has address taken, results will be incomplete 
  [UP] ignoring variable rscale as it has address taken, results will be incomplete 
  [UP] ignoring variable rset as it has address taken, results will be incomplete 
  [UP] ignoring variable skipMean as it has address taken, results will be incomplete 
  [UP] ignoring variable ugroup as it has address taken, results will be incomplete 
  [PB] has possible protection stack imbalance OpenMx/src/omxRAMExpectation.cpp:2600

Function RelationalRAMExpectation::state::simulate(FitContext*, MxRList&)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [PB] has too high protection stack depth results will be incomplete
  [PB] has possible protection stack imbalance OpenMx/src/omxRAMExpectation.cpp:2315

Function ScopedProtect::ScopedProtect(SEXPREC*&, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/./omxDefines.h:525

Function ScopedProtect::~ScopedProtect()
  [PB] has negative depth OpenMx/src/./omxDefines.h:531
  [UP] attempt to unprotect more items (2) than protected (1), results will be incomplete OpenMx/src/./omxDefines.h:531
  [PB] has possible protection stack imbalance OpenMx/src/./omxDefines.h:532

Function makeFactor(SEXPREC*, int, char const**)
  [PB] has possible protection stack imbalance OpenMx/src/glue.cpp:96

Function omxBackend2(SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, bool)
  [UP] unprotected variable Rlb while calling allocating function Rf_allocVector OpenMx/src/glue.cpp:773
  [UP] unprotected variable Rlb while calling allocating function MxRList::add(char const*, SEXPREC*)(?,?,V) OpenMx/src/glue.cpp:774
  [PB] has possible protection stack imbalance OpenMx/src/glue.cpp:810

Function omxCallAlgebra2(SEXPREC*, SEXPREC*, SEXPREC*)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [PB] has too high protection stack depth results will be incomplete
  [PB] has possible protection stack imbalance OpenMx/src/glue.cpp:553

Function omxComputeGD::reportResults(FitContext*, MxRList*, MxRList*)
  [PB] has possible protection stack imbalance OpenMx/src/ComputeGD.cpp:471

Function omxComputeIterate::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:2563

Function omxComputeNM::reportResults(FitContext*, MxRList*, MxRList*)
  [PB] has possible protection stack imbalance OpenMx/src/ComputeNM.cpp:500

Function omxComputeNumericDeriv::computeImpl(FitContext*)
  [PB] has possible protection stack imbalance OpenMx/src/omxHessianCalculation.cpp:563

Function omxComputeNumericDeriv::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/omxHessianCalculation.cpp:347

Function omxComputeNumericDeriv::reportResults(FitContext*, MxRList*, MxRList*)
  [PB] has possible protection stack imbalance OpenMx/src/omxHessianCalculation.cpp:583

Function omxComputeOnce::initFromFrontend(omxState*, SEXPREC*)
  [PB] has too high protection stack depth results will be incomplete
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [PB] has too high protection stack depth results will be incomplete
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:3575

Function omxComputeSequence::initFromFrontend(omxState*, SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:2462

Function omxData::connectDynamicData(omxState*)
  [PB] has possible protection stack imbalance OpenMx/src/omxData.cpp:146

Function omxExportMatrix(omxMatrix*)
  [PB] has possible protection stack imbalance OpenMx/src/omxMatrix.cpp:251

Function omxFIMLFitFunction::populateAttr(SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/omxFIMLFitFunction.cpp:802

Function omxGlobal::omxProcessConfidenceIntervals(SEXPREC*, omxState*)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [PB] has too high protection stack depth results will be incomplete
  [UP] unprotected variable names while calling allocating function Rf_asChar OpenMx/src/omxImportFrontendState.cpp:403
  [UP] unprotected variable names while calling allocating function Rf_asInteger OpenMx/src/omxImportFrontendState.cpp:404
  [PB] has possible protection stack imbalance OpenMx/src/omxImportFrontendState.cpp:417

Function omxGlobal::omxProcessMxComputeEntities(SEXPREC*, omxState*)
  [PB] has possible protection stack imbalance OpenMx/src/omxImportFrontendState.cpp:194

Function omxProcessCheckpointOptions(SEXPREC*)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [PB] has too high protection stack depth results will be incomplete
  [PB] has possible protection stack imbalance OpenMx/src/omxImportFrontendState.cpp:310

Function omxState::omxExportResults(MxRList*, FitContext*)
  [PB] has possible protection stack imbalance OpenMx/src/omxExportBackendState.cpp:84

Function omxState::omxProcessConstraints(SEXPREC*, FitContext*)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [PB] has too high protection stack depth results will be incomplete
  [UP] unprotected variable names while calling allocating function omxMatrixLookupFromState1(SEXPREC*, omxState*) OpenMx/src/omxImportFrontendState.cpp:431
  [UP] unprotected variable names while calling allocating function omxMatrixLookupFromState1(SEXPREC*, omxState*) OpenMx/src/omxImportFrontendState.cpp:433
  [UP] unprotected variable names while calling allocating function Rf_asChar OpenMx/src/omxImportFrontendState.cpp:435
  [UP] unprotected variable names while calling allocating function Rf_warning OpenMx/src/omxImportFrontendState.cpp:438
  [UP] unprotected variable names while calling allocating function omxMatrixLookupFromState1(SEXPREC*, omxState*) OpenMx/src/omxImportFrontendState.cpp:442
  [UP] unprotected variable names while calling allocating function int Rcpp::as<int>(SEXPREC*) OpenMx/src/omxImportFrontendState.cpp:445
  [UP] unprotected variable names while calling allocating function Rf_asInteger OpenMx/src/omxImportFrontendState.cpp:446
  [UP] unprotected variable names while calling allocating function bool Rcpp::as<bool>(SEXPREC*) OpenMx/src/omxImportFrontendState.cpp:447
  [PB] has possible protection stack imbalance OpenMx/src/omxImportFrontendState.cpp:453

Function omxState::omxProcessMxExpectationEntities(SEXPREC*)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [PB] has too high protection stack depth results will be incomplete
  [PB] has possible protection stack imbalance OpenMx/src/omxImportFrontendState.cpp:166

Function omxState::reportConstraints(MxRList&)
  [PB] has possible protection stack imbalance OpenMx/src/omxState.cpp:580

Function omxStateSpaceExpectation::populateAttr(SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/omxStateSpaceExpectation.cpp:443

Function omxWLSFitFunction::populateAttr(SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/omxWLSFitFunction.cpp:199

Function readOpts(SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/glue.cpp:490

Function sparseInvert_wrapper(SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/Compute.cpp:408

Function ssMLFitState::populateAttr(SEXPREC*)
  [PB] has possible protection stack imbalance OpenMx/src/ssMLFit.cpp:59

Function void Rcpp::Vector<16, Rcpp::PreserveStorage>::push_back<char [10]>(char const (&) [10])
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<16, Rcpp::PreserveStorage>::push_back<char [11]>(char const (&) [11])
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<16, Rcpp::PreserveStorage>::push_back<char [3]>(char const (&) [3])
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<16, Rcpp::PreserveStorage>::push_back<char [4]>(char const (&) [4])
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<16, Rcpp::PreserveStorage>::push_back<char [5]>(char const (&) [5])
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<16, Rcpp::PreserveStorage>::push_back<char const*>(char const* const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<Rcpp::Vector<13, Rcpp::PreserveStorage> >(Rcpp::Vector<13, Rcpp::PreserveStorage> const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<Rcpp::Vector<14, Rcpp::PreserveStorage> >(Rcpp::Vector<14, Rcpp::PreserveStorage> const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<SEXPREC*>(SEXPREC* const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Package fastplyr version 0.9.9
Package built using 88872/R 4.6.0; x86_64-pc-linux-gnu; 2025-09-27 06:39:26 UTC; unix   
Checked with rchk version 35618ebbccf3cd0b45a3530e6303970a22a9056b LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md

Suspicious call (two or more unprotected arguments) to Rf_lang2 at r_deparse(SEXPREC*) fastplyr/src/expressions.cpp:424
Suspicious call (two or more unprotected arguments) to Rf_setAttrib at set_as_vctrs_new_list_of_int(SEXPREC*) fastplyr/src/tidy.cpp:110


Function _fastplyr_call_args
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_common_length
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_as_list_of_frames
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_consecutive_id
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_df_transform_exotic
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_eval_all_tidy
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_fill_grouped
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_frame_addresses_equal
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_frame_dims
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_group_data
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_group_ends
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_group_id
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_group_indices
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_group_keys
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_group_locs
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_group_locs2
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_group_rows
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_group_size
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_group_split
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_group_starts
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_group_unaware_fns
  [UP] ignoring variable <unnamed var:   %4 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_group_vars
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_grouped_df_as_grp
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_grouped_eval_mutate
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_grouped_eval_summarise
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_grouped_eval_tidy
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_grouped_run_id
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_list_tidy
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_nest_split
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_orig_order
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_pluck_list_of_integers
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_quos_drop_null
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_row_id
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_set_list_element
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_slice_locs
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_sorted_group_starts
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_ungroup
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_unlist_group_locs
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_vec_group_split
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_cpp_which_all
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_fun_ns
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_quo_vars
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_recycle_eval_results
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _fastplyr_transpose_eval_results
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function call_contains_dplyr_mask(SEXPREC*, SEXPREC*)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete fastplyr/src/expressions.cpp:775

Function cpp11::package::operator[](char const*)
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function cpp_df_run_id(SEXPREC*)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete fastplyr/src/fastplyr.cpp:376
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete fastplyr/src/fastplyr.cpp:394
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete fastplyr/src/fastplyr.cpp:459

Function cpp_df_transform_exotic(SEXPREC*, bool, bool)
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function cpp_eval_all_tidy(SEXPREC*, SEXPREC*)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete fastplyr/src/tidy.cpp:48

Function cpp_grouped_df_as_grp(SEXPREC*)
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete fastplyr/src/tidy.cpp:1237
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete fastplyr/src/tidy.cpp:1301

Function find_pkg_fun(char const*, char const*, bool)
  [UP] calling allocating function Rf_eval with argument allocated using Rf_lang3(S::::,?,?) fastplyr/src/expressions.cpp:17
  [UP] calling allocating function Rf_eval with argument allocated using Rf_lang3(S:::,?,?) fastplyr/src/expressions.cpp:19

Function get_mask_data_vars(SEXPREC*)
  [UP] calling allocating function R_lsInternal3 with argument allocated using get_mask_top_env(SEXPREC*) fastplyr/src/mask.cpp:22

Function is_group_unaware_call(SEXPREC*, SEXPREC*, SEXPREC*)
  [UP] calling allocating function exists(SEXPREC*, SEXPREC*) with argument allocated using get_mask_top_env(SEXPREC*) fastplyr/src/expressions.cpp:535

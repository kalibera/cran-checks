Package MatrixExtra version 0.1.15
Package built using 86189/R 4.4.0; x86_64-pc-linux-gnu; 2024-03-25 23:24:11 UTC; unix   
Checked with rchk version fdc068715daa3a256062cc20e0d4a5157dacc9a4 LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function Rcpp::Armor<SEXPREC*>::init(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:47

Function Rcpp::Armor<SEXPREC*>::~Armor()
  [PB] has negative depth Rcpp/include/Rcpp/protection/Armor.h:41
  [UP] attempt to unprotect more items (1) than protected (0), results will be incomplete Rcpp/include/Rcpp/protection/Armor.h:41
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:42

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function Rcpp::SlotProxyPolicy<Rcpp::S4_Impl<Rcpp::PreserveStorage> >::hasSlot(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
  [UP] calling allocating function R_has_slot(?,V) with argument allocated using Rf_mkString Rcpp/include/Rcpp/proxy/SlotProxy.h:97

Function Rcpp::Vector<19, Rcpp::PreserveStorage> add_NAs_from_dense_after_elemenwise_mult_template<Rcpp::Matrix<10, Rcpp::PreserveStorage>, int, int>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Matrix<10, Rcpp::PreserveStorage>)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:986
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:989
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:998

Function Rcpp::Vector<19, Rcpp::PreserveStorage> add_NAs_from_dense_after_elemenwise_mult_template<Rcpp::Matrix<13, Rcpp::PreserveStorage>, double, float>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Matrix<13, Rcpp::PreserveStorage>)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:986
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:989
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:998

Function Rcpp::Vector<19, Rcpp::PreserveStorage> add_NAs_from_dense_after_elemenwise_mult_template<Rcpp::Matrix<13, Rcpp::PreserveStorage>, double, int>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Matrix<13, Rcpp::PreserveStorage>)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:986
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:989
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:998

Function Rcpp::Vector<19, Rcpp::PreserveStorage> add_NAs_from_dense_after_elemenwise_mult_template<Rcpp::Matrix<14, Rcpp::PreserveStorage>, double, double>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Matrix<14, Rcpp::PreserveStorage>)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:986
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:989
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:998

Function Rcpp::Vector<19, Rcpp::PreserveStorage> add_csr_elemwise<Rcpp::Vector<10, Rcpp::PreserveStorage>, int>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<10, Rcpp::PreserveStorage>, Rcpp::Vector<10, Rcpp::PreserveStorage>, bool, bool)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:527
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:535

Function Rcpp::Vector<19, Rcpp::PreserveStorage> add_csr_elemwise<Rcpp::Vector<14, Rcpp::PreserveStorage>, double>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, bool, bool)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:527
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:535

Function Rcpp::Vector<19, Rcpp::PreserveStorage> copy_csr_arbitrary_template<Rcpp::Vector<10, Rcpp::PreserveStorage>, int, bool>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<10, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/slice.cpp:564
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/slice.cpp:575

Function Rcpp::Vector<19, Rcpp::PreserveStorage> copy_csr_arbitrary_template<Rcpp::Vector<14, Rcpp::PreserveStorage>, double, bool>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/slice.cpp:564
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/slice.cpp:575

Function Rcpp::Vector<19, Rcpp::PreserveStorage> copy_csr_arbitrary_template<Rcpp::Vector<14, Rcpp::PreserveStorage>, double, int>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/slice.cpp:564
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/slice.cpp:575

Function Rcpp::Vector<19, Rcpp::PreserveStorage> inject_NAs_inplace_coo_template<Rcpp::Vector<10, Rcpp::PreserveStorage>, int>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<10, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, int, int)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/slice_coo.cpp:888
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/slice_coo.cpp:891
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/slice_coo.cpp:898

Function Rcpp::Vector<19, Rcpp::PreserveStorage> inject_NAs_inplace_coo_template<Rcpp::Vector<14, Rcpp::PreserveStorage>, double>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, int, int)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/slice_coo.cpp:888
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/slice_coo.cpp:891
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/slice_coo.cpp:898

Function Rcpp::Vector<19, Rcpp::PreserveStorage> multiply_csc_by_dense_keep_NAs_template<Rcpp::Vector<10, Rcpp::PreserveStorage>, Rcpp::Matrix<10, Rcpp::PreserveStorage>, int, int>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<10, Rcpp::PreserveStorage>, Rcpp::Matrix<10, Rcpp::PreserveStorage>)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:1377
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:1384

Function Rcpp::Vector<19, Rcpp::PreserveStorage> multiply_csc_by_dense_keep_NAs_template<Rcpp::Vector<14, Rcpp::PreserveStorage>, Rcpp::Matrix<10, Rcpp::PreserveStorage>, int, double>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, Rcpp::Matrix<10, Rcpp::PreserveStorage>)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:1377
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:1384

Function Rcpp::Vector<19, Rcpp::PreserveStorage> multiply_csc_by_dense_keep_NAs_template<Rcpp::Vector<14, Rcpp::PreserveStorage>, Rcpp::Matrix<13, Rcpp::PreserveStorage>, float, double>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, Rcpp::Matrix<13, Rcpp::PreserveStorage>)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:1377
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:1384

Function Rcpp::Vector<19, Rcpp::PreserveStorage> multiply_csc_by_dense_keep_NAs_template<Rcpp::Vector<14, Rcpp::PreserveStorage>, Rcpp::Matrix<13, Rcpp::PreserveStorage>, int, double>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, Rcpp::Matrix<13, Rcpp::PreserveStorage>)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:1377
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:1384

Function Rcpp::Vector<19, Rcpp::PreserveStorage> multiply_csc_by_dense_keep_NAs_template<Rcpp::Vector<14, Rcpp::PreserveStorage>, Rcpp::Matrix<14, Rcpp::PreserveStorage>, double, double>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, Rcpp::Matrix<14, Rcpp::PreserveStorage>)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:1377
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:1384

Function Rcpp::Vector<19, Rcpp::PreserveStorage> multiply_csr_by_coo_elemwise<Rcpp::Vector<10, Rcpp::PreserveStorage>, int>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<10, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<10, Rcpp::PreserveStorage>, int, int)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:660
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:663
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:671

Function Rcpp::Vector<19, Rcpp::PreserveStorage> multiply_csr_by_coo_elemwise<Rcpp::Vector<14, Rcpp::PreserveStorage>, double>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, int, int)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:660
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:663
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:671

Function Rcpp::Vector<19, Rcpp::PreserveStorage> multiply_csr_elemwise<Rcpp::Vector<10, Rcpp::PreserveStorage>, int>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<10, Rcpp::PreserveStorage>, Rcpp::Vector<10, Rcpp::PreserveStorage>)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:197
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:205

Function Rcpp::Vector<19, Rcpp::PreserveStorage> multiply_csr_elemwise<Rcpp::Vector<14, Rcpp::PreserveStorage>, double>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:197
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:205

Function Rcpp::Vector<19, Rcpp::PreserveStorage> multiply_elemwise_dense_by_svec_template<Rcpp::Matrix<10, Rcpp::PreserveStorage>, int>(Rcpp::Matrix<10, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, int, bool)
  [UP] ignoring variable <unnamed var:   %101 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %102 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %54 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %55 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<19, Rcpp::PreserveStorage> multiply_elemwise_dense_by_svec_template<Rcpp::Matrix<13, Rcpp::PreserveStorage>, float>(Rcpp::Matrix<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, int, bool)
  [UP] ignoring variable <unnamed var:   %104 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %105 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %56 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %57 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<19, Rcpp::PreserveStorage> multiply_elemwise_dense_by_svec_template<Rcpp::Matrix<13, Rcpp::PreserveStorage>, int>(Rcpp::Matrix<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, int, bool)
  [UP] ignoring variable <unnamed var:   %101 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %102 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %54 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %55 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<19, Rcpp::PreserveStorage> multiply_elemwise_dense_by_svec_template<Rcpp::Matrix<14, Rcpp::PreserveStorage>, double>(Rcpp::Matrix<14, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, int, bool)
  [UP] ignoring variable <unnamed var:   %103 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %104 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %56 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %57 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<19, Rcpp::PreserveStorage> remove_zero_valued_csr<Rcpp::Vector<10, Rcpp::PreserveStorage>, int>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<10, Rcpp::PreserveStorage>, bool)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/misc.cpp:658
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/misc.cpp:662

Function Rcpp::Vector<19, Rcpp::PreserveStorage> remove_zero_valued_csr<Rcpp::Vector<14, Rcpp::PreserveStorage>, double>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, bool)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/misc.cpp:658
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/misc.cpp:662

Function Rcpp::Vector<19, Rcpp::PreserveStorage> slice_coo_arbitrary_template<Rcpp::Vector<10, Rcpp::PreserveStorage>, int, bool>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<10, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, bool, bool, bool, bool, bool, bool, int, int)
  [UP] ignoring variable <unnamed var:   %157 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %56 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<19, Rcpp::PreserveStorage> slice_coo_arbitrary_template<Rcpp::Vector<14, Rcpp::PreserveStorage>, double, bool>(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, bool, bool, bool, bool, bool, bool, int, int)
  [UP] ignoring variable <unnamed var:   %157 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %56 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back_name__impl(SEXPREC* const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::traits::integral_constant<bool, true>)
  [UP] unprotected variable names while calling allocating function Rf_allocVector Rcpp/include/Rcpp/vector/Vector.h:682

Function Rcpp::internal::convert_using_rfunction(SEXPREC*, char const*)
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::set(SEXPREC*)
  [UP] ignoring variable rhs as it has address taken, results will be incomplete 

Function _MatrixExtra_add_NAs_from_dense_after_elemenwise_mult_float32
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_add_NAs_from_dense_after_elemenwise_mult_integer
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_add_NAs_from_dense_after_elemenwise_mult_logical
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_add_NAs_from_dense_after_elemenwise_mult_numeric
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_add_csr_elemwise
  [UP] ignoring variable <unnamed var:   %29 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_cbind_csr_binary
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_cbind_csr_logical
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_cbind_csr_numeric
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_check_indices_are_unsorted
  [UP] ignoring variable <unnamed var:   %14 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_check_is_rev_seq
  [UP] ignoring variable <unnamed var:   %11 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_check_is_seq
  [UP] ignoring variable <unnamed var:   %11 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_check_is_sorted
  [UP] ignoring variable <unnamed var:   %11 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_check_shapes_are_assignable_1d
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_check_shapes_are_assignable_1d_v2
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_check_shapes_are_assignable_2d
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_check_valid_coo_matrix
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_check_valid_csr_matrix
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_check_valid_svec
  [UP] ignoring variable <unnamed var:   %14 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_concat_csr_batch
  [UP] ignoring variable <unnamed var:   %14 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_concat_indptr2
  [UP] ignoring variable <unnamed var:   %14 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_contains_any_inf
  [UP] ignoring variable <unnamed var:   %11 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_contains_any_neg
  [UP] ignoring variable <unnamed var:   %11 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_contains_any_zero
  [UP] ignoring variable <unnamed var:   %11 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_copy_csr_arbitrary_binary
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_copy_csr_arbitrary_logical
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_copy_csr_arbitrary_numeric
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_copy_csr_rows_binary
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_copy_csr_rows_col_seq_binary
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_copy_csr_rows_col_seq_logical
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_copy_csr_rows_col_seq_numeric
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_copy_csr_rows_logical
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_copy_csr_rows_numeric
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_deepcopy_int
  [UP] ignoring variable <unnamed var:   %11 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_deepcopy_log
  [UP] ignoring variable <unnamed var:   %11 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_deepcopy_num
  [UP] ignoring variable <unnamed var:   %11 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_deepcopy_str
  [UP] ignoring variable <unnamed var:   %11 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_extract_single_val_csr_binary
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_extract_single_val_csr_logical
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_extract_single_val_csr_numeric
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_find_first_non_na
  [UP] ignoring variable <unnamed var:   %11 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_inject_NAs_inplace_coo_logical
  [UP] ignoring variable <unnamed var:   %29 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_inject_NAs_inplace_coo_numeric
  [UP] ignoring variable <unnamed var:   %29 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_is_same_ngRMatrix
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_logicaland_coo_by_dense_logical
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_logicaland_csc_by_dense_ignore_NAs
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_logicaland_csc_by_dense_keep_NAs
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_logicaland_csr_by_coo_elemwise
  [UP] ignoring variable <unnamed var:   %32 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_logicaland_csr_by_dense_cpp
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_logicaland_csr_by_dvec_internal
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_logicaland_csr_elemwise
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_logicalor_csr_elemwise
  [UP] ignoring variable <unnamed var:   %29 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_colvec_by_scolvecascsr
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_colvec_by_scolvecascsr_f32
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_csr_dvec_float32
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_csr_dvec_integer
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_csr_dvec_logical
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_csr_dvec_numeric
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_csr_svec_binary
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_csr_svec_float32
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_csr_svec_integer
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_csr_svec_logical
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_csr_svec_numeric
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_dense_csc_float32
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_dense_csc_numeric
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_rowvec_by_csc
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_rowvec_by_cscbin
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_spcolvec_by_scolvecascsr_binary
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_spcolvec_by_scolvecascsr_integer
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_spcolvec_by_scolvecascsr_logical
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_matmul_spcolvec_by_scolvecascsr_numeric
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_coo_by_dense_float32
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_coo_by_dense_ignore_NAs_logical
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_coo_by_dense_ignore_NAs_numeric
  [UP] ignoring variable <unnamed var:   %44 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_coo_by_dense_integer
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_coo_by_dense_logical
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_coo_by_dense_numeric
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_csc_by_dense_ignore_NAs_float32
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_csc_by_dense_ignore_NAs_integer
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_csc_by_dense_ignore_NAs_logical
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_csc_by_dense_ignore_NAs_numeric
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_csc_by_dense_keep_NAs_float32
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_csc_by_dense_keep_NAs_integer
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_csc_by_dense_keep_NAs_logical
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_csc_by_dense_keep_NAs_numeric
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_csr_by_coo_elemwise
  [UP] ignoring variable <unnamed var:   %32 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_csr_by_dense_elemwise_bool
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_csr_by_dense_elemwise_double
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_csr_by_dense_elemwise_float32
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_csr_by_dense_elemwise_int
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_csr_by_dvec_no_NAs_numeric
  [UP] ignoring variable <unnamed var:   %41 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_csr_by_dvec_with_NAs
  [UP] ignoring variable <unnamed var:   %41 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_csr_by_svec_keep_NAs
  [UP] ignoring variable <unnamed var:   %29 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_csr_by_svec_no_NAs
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_csr_elemwise
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_elemwise_dense_by_svec_float32
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_elemwise_dense_by_svec_integer
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_elemwise_dense_by_svec_logical
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_multiply_elemwise_dense_by_svec_numeric
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_rebuild_indptr_after_filter
  [UP] ignoring variable <unnamed var:   %14 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_remove_zero_valued_coo_logical
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_remove_zero_valued_coo_numeric
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_remove_zero_valued_csr_logical
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_remove_zero_valued_csr_numeric
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_remove_zero_valued_svec_integer
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_remove_zero_valued_svec_logical
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_remove_zero_valued_svec_numeric
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_repeat_indices_n_times
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_reverse_rows_binary
  [UP] ignoring variable <unnamed var:   %14 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_reverse_rows_logical
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_reverse_rows_numeric
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_arbitrary_cols_to_const
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_arbitrary_cols_to_zero
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_arbitrary_rows_arbitrary_cols_to_const
  [UP] ignoring variable <unnamed var:   %29 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_arbitrary_rows_arbitrary_cols_to_zero
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_arbitrary_rows_single_col_to_const
  [UP] ignoring variable <unnamed var:   %29 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_arbitrary_rows_single_col_to_zero
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_arbitrary_rows_to_const
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_arbitrary_rows_to_smat
  [UP] ignoring variable <unnamed var:   %29 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_arbitrary_rows_to_zero
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_colseq_to_const
  [UP] ignoring variable <unnamed var:   %29 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_colseq_to_zero
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_rowseq_to_const
  [UP] ignoring variable <unnamed var:   %29 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_rowseq_to_smat
  [UP] ignoring variable <unnamed var:   %32 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_rowseq_to_zero
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_single_col_to_colvec
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_single_col_to_const
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_single_col_to_svec
  [UP] ignoring variable <unnamed var:   %32 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_single_col_to_zero
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_single_row_arbitrary_cols_to_const
  [UP] ignoring variable <unnamed var:   %29 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_single_row_arbitrary_cols_to_zero
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_single_row_to_const
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_single_row_to_rowvec
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_single_row_to_svec
  [UP] ignoring variable <unnamed var:   %32 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_single_row_to_zero
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_single_val_to_const
  [UP] ignoring variable <unnamed var:   %29 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_set_single_val_to_zero
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_slice_coo_arbitrary_binary
  [UP] ignoring variable <unnamed var:   %44 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_slice_coo_arbitrary_logical
  [UP] ignoring variable <unnamed var:   %47 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_slice_coo_arbitrary_numeric
  [UP] ignoring variable <unnamed var:   %47 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_slice_coo_single_binary
  [UP] ignoring variable <unnamed var:   %20 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_slice_coo_single_logical
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_slice_coo_single_numeric
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_tcrossprod_csr_dense_float32
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_tcrossprod_csr_dense_numeric
  [UP] ignoring variable <unnamed var:   %23 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_tcrossprod_dense_csr_float32
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _MatrixExtra_tcrossprod_dense_csr_numeric
  [UP] ignoring variable <unnamed var:   %26 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function multiply_csr_by_dvec_with_NAs(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, int, bool, bool, bool, bool, bool, bool)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:2847
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:2850

Function multiply_csr_by_svec_keep_NAs(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, int, int)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:3692
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:3695

Function multiply_csr_by_svec_no_NAs(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, int)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:3493
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/operators.cpp:3496

Function set_single_col_to_svec(Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, int, int, Rcpp::Vector<13, Rcpp::PreserveStorage>, Rcpp::Vector<14, Rcpp::PreserveStorage>, int)
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/assignment.cpp:1128
  [UP] calling allocating function Rcpp::internal::generic_name_proxy<19, Rcpp::PreserveStorage>::operator=(SEXPREC*) with argument allocated using Rcpp::unwindProtect(SEXPREC* (*)(void*), void*) MatrixExtra/src/assignment.cpp:1131

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<SEXPREC*>(SEXPREC* const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
  [UP] ignoring variable <unnamed var:   %7 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

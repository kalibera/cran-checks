Package BCClong version 1.0.3
Package built using 87687/R 4.5.0; x86_64-pc-linux-gnu; 2025-02-06 00:59:38 UTC; unix   
Checked with rchk version 35618ebbccf3cd0b45a3530e6303970a22a9056b LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function BCC(Rcpp::Vector<19, Rcpp::PreserveStorage>&, int, Rcpp::Vector<19, Rcpp::PreserveStorage>, arma::Mat<unsigned int>, int, int, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >, bool, bool, arma::Col<double>, arma::Col<double>, arma::Col<double>, arma::Col<double>, arma::Col<double>, arma::Mat<double>, std::__1::vector<arma::Mat<double>, std::__1::allocator<arma::Mat<double> > >, std::__1::vector<arma::Col<double>, std::__1::allocator<arma::Col<double> > >, std::__1::vector<arma::Col<double>, std::__1::allocator<arma::Col<double> > >, std::__1::vector<arma::Cube<double>, std::__1::allocator<arma::Cube<double> > >, std::__1::vector<arma::Mat<double>, std::__1::allocator<arma::Mat<double> > >, arma::Col<double>, double, double, double, double, arma::Mat<double>, arma::Mat<double>, std::__1::vector<arma::Mat<double>, std::__1::allocator<arma::Mat<double> > >, std::__1::vector<arma::Cube<double>, std::__1::allocator<arma::Cube<double> > >, double, double, arma::Mat<double>, arma::Mat<double>, double, double, double, double, arma::Mat<double>, std::__1::vector<arma::Cube<double>, std::__1::allocator<arma::Cube<double> > >, Rcpp::RObject_Impl<Rcpp::PreserveStorage>, Rcpp::RObject_Impl<Rcpp::PreserveStorage>, Rcpp::RObject_Impl<Rcpp::PreserveStorage>, Rcpp::RObject_Impl<Rcpp::PreserveStorage>, std::__1::vector<arma::Mat<double>, std::__1::allocator<arma::Mat<double> > >, std::__1::vector<Rcpp::RObject_Impl<Rcpp::PreserveStorage>, std::__1::allocator<Rcpp::RObject_Impl<Rcpp::PreserveStorage> > >, std::__1::vector<arma::Mat<double>, std::__1::allocator<arma::Mat<double> > >, std::__1::vector<arma::Cube<double>, std::__1::allocator<arma::Cube<double> > >, std::__1::vector<arma::Mat<double>, std::__1::allocator<arma::Mat<double> > >, std::__1::vector<Rcpp::RObject_Impl<Rcpp::PreserveStorage>, std::__1::allocator<Rcpp::RObject_Impl<Rcpp::PreserveStorage> > >, std::__1::vector<arma::Mat<double>, std::__1::allocator<arma::Mat<double> > >, std::__1::vector<arma::Cube<double>, std::__1::allocator<arma::Cube<double> > >, Rcpp::RObject_Impl<Rcpp::PreserveStorage>, bool, double, arma::Mat<double>, arma::Col<double>, int, int, int, int, int)
  [UP] ignoring variable <unnamed var:   %2656 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %2657 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %2658 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %2663 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %2675 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %2676 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %2677 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %2688 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Armor<SEXPREC*>::init(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:47

Function Rcpp::Armor<SEXPREC*>::~Armor()
  [PB] has negative depth Rcpp/include/Rcpp/protection/Armor.h:41
  [UP] attempt to unprotect more items (1) than protected (0), results will be incomplete Rcpp/include/Rcpp/protection/Armor.h:41
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:42

Function Rcpp::Environment_Impl<Rcpp::PreserveStorage>::namespace_env(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
  [UP] ignoring variable <unnamed var:   %11 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back_name__impl(SEXPREC* const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::traits::integral_constant<bool, true>)
  [UP] unprotected variable names while calling allocating function Rf_allocVector Rcpp/include/Rcpp/vector/Vector.h:682

Function Rcpp::internal::convert_using_rfunction(SEXPREC*, char const*)
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _BCClong_BCC
  [UP] ignoring variable <unnamed var:   %192 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _BCClong_LL
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<Rcpp::RObject_Impl<Rcpp::PreserveStorage> >(Rcpp::RObject_Impl<Rcpp::PreserveStorage> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
  [UP] ignoring variable <unnamed var:   %7 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<int>(int const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
  [UP] ignoring variable <unnamed var:   %7 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<std::__1::vector<Rcpp::RObject_Impl<Rcpp::PreserveStorage>, std::__1::allocator<Rcpp::RObject_Impl<Rcpp::PreserveStorage> > > >(std::__1::vector<Rcpp::RObject_Impl<Rcpp::PreserveStorage>, std::__1::allocator<Rcpp::RObject_Impl<Rcpp::PreserveStorage> > > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
  [UP] ignoring variable <unnamed var:   %7 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<std::__1::vector<arma::Cube<double>, std::__1::allocator<arma::Cube<double> > > >(std::__1::vector<arma::Cube<double>, std::__1::allocator<arma::Cube<double> > > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
  [UP] ignoring variable <unnamed var:   %7 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<std::__1::vector<arma::Mat<double>, std::__1::allocator<arma::Mat<double> > > >(std::__1::vector<arma::Mat<double>, std::__1::allocator<arma::Mat<double> > > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
  [UP] ignoring variable <unnamed var:   %7 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

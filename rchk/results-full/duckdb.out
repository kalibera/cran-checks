Package duckdb version 1.1.3
Package built using 87360/R 4.5.0; x86_64-pc-linux-gnu; 2024-11-22 11:15:19 UTC; unix   
Checked with rchk version 35618ebbccf3cd0b45a3530e6303970a22a9056b LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function FetchArrowChunk(duckdb::ChunkScanState&, duckdb::ClientProperties, AppendableRList&, ArrowArray&, ArrowSchema&, SEXPREC*, SEXPREC*, unsigned long)
  [UP] ignoring variable arrow_namespace as it has address taken, results will be incomplete 
  [UP] ignoring variable batch_import_from_c as it has address taken, results will be incomplete 

Function RArrowTabularStreamFactory::CallArrowFactory(SEXPREC*, unsigned long, SEXPREC*, SEXPREC*, SEXPREC*)
  [UP] ignoring variable op1 as it has address taken, results will be incomplete 
  [UP] ignoring variable op2 as it has address taken, results will be incomplete 
  [UP] ignoring variable op3 as it has address taken, results will be incomplete 

Function _duckdb_rapi_adbc_init_func
  [UP] ignoring variable <unnamed var:   %4 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_execute
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_execute_arrow
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_expr_comparison
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_expr_constant
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_expr_function
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_expr_reference
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_expr_window
  [UP] ignoring variable <unnamed var:   %22 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_get_null_SEXP_ptr
  [UP] ignoring variable <unnamed var:   %4 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_get_substrait
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_get_substrait_json
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_record_batch
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_aggregate
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_distinct
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_explain
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_filter
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_from_altrep_df
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_from_df
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_from_sql
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_from_table
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_from_table_function
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_join
  [UP] ignoring variable <unnamed var:   %14 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_limit
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_names
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_order
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_project
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_set_alias
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_set_diff
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_set_intersect
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_set_symdiff
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_sql
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_to_altrep
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_to_df
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _duckdb_rapi_rel_union_all
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function cpp11::attribute_proxy<cpp11::writable::r_vector<SEXPREC*> >::operator SEXPREC*() const
  [UP] ignoring variable <unnamed var:   %4 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function cpp11::external_pointer<AltrepRownamesWrapper, &(void cpp11::default_deleter<AltrepRownamesWrapper>(AltrepRownamesWrapper*))>::external_pointer(AltrepRownamesWrapper*, bool, bool, SEXPREC*)
  [UP] ignoring variable prot as it has address taken, results will be incomplete 

Function cpp11::external_pointer<AltrepVectorWrapper, &(void cpp11::default_deleter<AltrepVectorWrapper>(AltrepVectorWrapper*))>::external_pointer(AltrepVectorWrapper*, bool, bool, SEXPREC*)
  [UP] ignoring variable prot as it has address taken, results will be incomplete 

Function cpp11::external_pointer<RArrowTabularStreamFactory, &(void cpp11::default_deleter<RArrowTabularStreamFactory>(RArrowTabularStreamFactory*))>::external_pointer(RArrowTabularStreamFactory*, bool, bool, SEXPREC*)
  [UP] ignoring variable prot as it has address taken, results will be incomplete 

Function cpp11::external_pointer<duckdb::ColumnRefExpression, &(void cpp11::default_deleter<duckdb::ColumnRefExpression>(duckdb::ColumnRefExpression*))>::external_pointer(duckdb::ColumnRefExpression*, bool, bool, SEXPREC*)
  [UP] ignoring variable prot as it has address taken, results will be incomplete 

Function cpp11::external_pointer<duckdb::ComparisonExpression, &(void cpp11::default_deleter<duckdb::ComparisonExpression>(duckdb::ComparisonExpression*))>::external_pointer(duckdb::ComparisonExpression*, bool, bool, SEXPREC*)
  [UP] ignoring variable prot as it has address taken, results will be incomplete 

Function cpp11::external_pointer<duckdb::ConnWrapper, &duckdb::ConnDeleter>::external_pointer(duckdb::ConnWrapper*, bool, bool, SEXPREC*)
  [UP] ignoring variable prot as it has address taken, results will be incomplete 

Function cpp11::external_pointer<duckdb::ConstantExpression, &(void cpp11::default_deleter<duckdb::ConstantExpression>(duckdb::ConstantExpression*))>::external_pointer(duckdb::ConstantExpression*, bool, bool, SEXPREC*)
  [UP] ignoring variable prot as it has address taken, results will be incomplete 

Function cpp11::external_pointer<duckdb::DualWrapper<duckdb::DBWrapper>, &(void cpp11::default_deleter<duckdb::DualWrapper<duckdb::DBWrapper> >(duckdb::DualWrapper<duckdb::DBWrapper>*))>::external_pointer(duckdb::DualWrapper<duckdb::DBWrapper>*, bool, bool, SEXPREC*)
  [UP] ignoring variable prot as it has address taken, results will be incomplete 

Function cpp11::external_pointer<duckdb::FunctionExpression, &(void cpp11::default_deleter<duckdb::FunctionExpression>(duckdb::FunctionExpression*))>::external_pointer(duckdb::FunctionExpression*, bool, bool, SEXPREC*)
  [UP] ignoring variable prot as it has address taken, results will be incomplete 

Function cpp11::external_pointer<duckdb::RQueryResult, &(void cpp11::default_deleter<duckdb::RQueryResult>(duckdb::RQueryResult*))>::external_pointer(duckdb::RQueryResult*, bool, bool, SEXPREC*)
  [UP] ignoring variable prot as it has address taken, results will be incomplete 

Function cpp11::external_pointer<duckdb::RStatement, &(void cpp11::default_deleter<duckdb::RStatement>(duckdb::RStatement*))>::external_pointer(duckdb::RStatement*, bool, bool, SEXPREC*)
  [UP] ignoring variable prot as it has address taken, results will be incomplete 

Function cpp11::external_pointer<duckdb::RelationWrapper, &(void cpp11::default_deleter<duckdb::RelationWrapper>(duckdb::RelationWrapper*))>::external_pointer(duckdb::RelationWrapper*, bool, bool, SEXPREC*)
  [UP] ignoring variable prot as it has address taken, results will be incomplete 

Function cpp11::external_pointer<duckdb::WindowExpression, &(void cpp11::default_deleter<duckdb::WindowExpression>(duckdb::WindowExpression*))>::external_pointer(duckdb::WindowExpression*, bool, bool, SEXPREC*)
  [UP] ignoring variable prot as it has address taken, results will be incomplete 

Function cpp11::named_arg& cpp11::named_arg::operator=<SEXPREC*>(SEXPREC*)
  [UP] ignoring variable rhs as it has address taken, results will be incomplete 

Function cpp11::writable::r_vector<SEXPREC*>::push_back(cpp11::named_arg const&)
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function cpp11::writable::r_vector<SEXPREC*>::reserve_data(SEXPREC*, bool, long)
  [UP] calling allocating function cpp11::writable::r_vector<SEXPREC*>::resize_names(SEXPREC*, long) with a fresh pointer (names <arg 1>) duckdb/src/../inst/include/cpp11/r_vector.hpp:1331

Function cpp11::writable::r_vector<cpp11::r_bool>::reserve_data(SEXPREC*, bool, long)
  [UP] calling allocating function cpp11::writable::r_vector<cpp11::r_bool>::resize_names(SEXPREC*, long) with a fresh pointer (names <arg 1>) duckdb/src/../inst/include/cpp11/r_vector.hpp:1331

Function cpp11::writable::r_vector<cpp11::r_string>::reserve_data(SEXPREC*, bool, long)
  [UP] calling allocating function cpp11::writable::r_vector<cpp11::r_string>::resize_names(SEXPREC*, long) with a fresh pointer (names <arg 1>) duckdb/src/../inst/include/cpp11/r_vector.hpp:1331

Function cpp11::writable::r_vector<double>::reserve_data(SEXPREC*, bool, long)
  [UP] calling allocating function cpp11::writable::r_vector<double>::resize_names(SEXPREC*, long) with a fresh pointer (names <arg 1>) duckdb/src/../inst/include/cpp11/r_vector.hpp:1331

Function cpp11::writable::r_vector<int>::reserve_data(SEXPREC*, bool, long)
  [UP] calling allocating function cpp11::writable::r_vector<int>::resize_names(SEXPREC*, long) with a fresh pointer (names <arg 1>) duckdb/src/../inst/include/cpp11/r_vector.hpp:1331

Function duckdb::RApiTypes::DetectRType(SEXPREC*, bool)
  [UP] unprotected variable names while calling allocating function duckdb::RApiTypes::DetectRType(SEXPREC*, bool) duckdb/src/types.cpp:159

Function duckdb::ToUtf8(SEXPREC*)
  [UP] ignoring variable string_sexp as it has address taken, results will be incomplete 

Function rapi_bind(cpp11::external_pointer<duckdb::RStatement, &(void cpp11::default_deleter<duckdb::RStatement>(duckdb::RStatement*))>, cpp11::r_vector<SEXPREC*>, bool, bool)
  [UP] calling allocating function cpp11::writable::r_vector<SEXPREC*>::push_back(SEXPREC*) with argument allocated using rapi_execute(cpp11::external_pointer<duckdb::RStatement, &(void cpp11::default_deleter<duckdb::RStatement>(duckdb::RStatement*))>, bool, bool) duckdb/src/statement.cpp:205

Function rapi_execute(cpp11::external_pointer<duckdb::RStatement, &(void cpp11::default_deleter<duckdb::RStatement>(duckdb::RStatement*))>, bool, bool)
  [UP] unprotected variable <unnamed var:   %4 = alloca %struct.SEXPREC*, align 8> while calling allocating function duckdb::unique_ptr<duckdb::QueryResult, std::__1::default_delete<duckdb::QueryResult>, true>::~unique_ptr() duckdb/src/statement.cpp:372

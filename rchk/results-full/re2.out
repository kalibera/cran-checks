Package re2 version 0.1.2
Package built using 82503/R 4.3.0; x86_64-pc-linux-gnu; 2022-06-21 07:10:57 UTC; unix   
Checked with rchk version 29e18222e1cfa67ba8e63bd3b22a25f78593c554 LLVM version 14.0.0
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function (anonymous namespace)::DoMatchL::match_found(int, re2::StringPiece&, re2::RE2Proxy::Adapter&, std::__1::vector<re2::StringPiece*, std::__1::allocator<re2::StringPiece*> > const&)
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function (anonymous namespace)::DoMatchL::match_not_found(int, SEXPREC*, re2::RE2Proxy::Adapter&)
  [UP] ignoring variable <unnamed var:   %11 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Armor<SEXPREC*>::init(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:47

Function Rcpp::Armor<SEXPREC*>::~Armor()
  [PB] has negative depth Rcpp/include/Rcpp/protection/Armor.h:41
  [UP] attempt to unprotect more items (1) than protected (0), results will be incomplete Rcpp/include/Rcpp/protection/Armor.h:41
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:42

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function Rcpp::internal::convert_using_rfunction(SEXPREC*, char const*)
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_capturing_group_names
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_check_rewrite_string
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_count
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_detect
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_extract_replace
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %19 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_extract_replace_cpp
  [UP] ignoring variable <unnamed var:   %22 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_get_options
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_locate
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_locate_all
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_match
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %19 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_match_all
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_match_cpp
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %19 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_max_submatch
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_named_capturing_groups
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_number_of_capturing_groups
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_possible_match_range
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %19 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_quote_meta
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_regexp
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_replace
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %19 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_replace_all
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %19 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_replace_all_cpp
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %22 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_replace_cpp
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %22 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_split
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %22 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_subset
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _re2_re2_which
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function re2_capturing_group_names(SEXPREC*)
  [UP] ignoring variable pattern as it has address taken, results will be incomplete 

Function re2_check_rewrite_string(SEXPREC*, Rcpp::Vector<16, Rcpp::PreserveStorage>)
  [UP] ignoring variable pattern as it has address taken, results will be incomplete 

Function re2_detect(Rcpp::Vector<16, Rcpp::PreserveStorage>, SEXPREC*)
  [UP] ignoring variable pattern as it has address taken, results will be incomplete 

Function re2_do_match(Rcpp::Vector<16, Rcpp::PreserveStorage>, SEXPREC*, re2::DoMatchIntf&)
  [UP] ignoring variable pattern as it has address taken, results will be incomplete 

Function re2_extract_replace_cpp(Rcpp::Vector<16, Rcpp::PreserveStorage>, SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, bool)
  [UP] ignoring variable pattern as it has address taken, results will be incomplete 

Function re2_match(Rcpp::Vector<16, Rcpp::PreserveStorage>, SEXPREC*, bool)
  [UP] unprotected variable <unnamed var:   %4 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::Vector<16, Rcpp::PreserveStorage>::~Vector() re2/src/re2_match.cpp:127
  [UP] unprotected variable <unnamed var:   %4 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::Matrix<16, Rcpp::PreserveStorage>::~Matrix() re2/src/re2_match.cpp:128
  [UP] unprotected variable <unnamed var:   %4 = alloca %struct.SEXPREC*, align 8> while calling allocating function re2::RE2Proxy::~RE2Proxy() re2/src/re2_match.cpp:128
  [UP] unprotected variable <unnamed var:   %4 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::Vector<16, Rcpp::PreserveStorage>::~Vector() re2/src/re2_match.cpp:131
  [UP] unprotected variable <unnamed var:   %4 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::Vector<19, Rcpp::PreserveStorage>::~Vector() re2/src/re2_match.cpp:132

Function re2_match_cpp(Rcpp::Vector<16, Rcpp::PreserveStorage>, SEXPREC*, Rcpp::Nullable<Rcpp::Vector<19, Rcpp::PreserveStorage> >)
  [UP] ignoring variable pattern as it has address taken, results will be incomplete 

Function re2_named_capturing_groups(SEXPREC*)
  [UP] ignoring variable pattern as it has address taken, results will be incomplete 

Function re2_number_of_capturing_groups(SEXPREC*)
  [UP] ignoring variable pattern as it has address taken, results will be incomplete 

Function re2_possible_match_range(SEXPREC*, int, bool)
  [UP] ignoring variable pattern as it has address taken, results will be incomplete 

Function re2_replace_all_cpp(Rcpp::Vector<16, Rcpp::PreserveStorage>, SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, bool)
  [UP] ignoring variable pattern as it has address taken, results will be incomplete 

Function re2_replace_cpp(Rcpp::Vector<16, Rcpp::PreserveStorage>, SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, bool)
  [UP] ignoring variable pattern as it has address taken, results will be incomplete 

Function re2_split(Rcpp::Vector<16, Rcpp::PreserveStorage>, SEXPREC*, bool, double)
  [UP] unprotected variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::Vector<16, Rcpp::PreserveStorage>::~Vector() re2/src/re2_split.cpp:97
  [UP] unprotected variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::Vector<16, Rcpp::PreserveStorage>::~Vector() re2/src/re2_split.cpp:100
  [UP] unprotected variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::Vector<19, Rcpp::PreserveStorage>::~Vector() re2/src/re2_split.cpp:102

Function std::__1::function<void (SEXPREC*)>::operator()(SEXPREC*) const
  [UP] ignoring variable __arg as it has address taken, results will be incomplete 

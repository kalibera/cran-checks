Package cheapr version 1.2.0
Package built using 88200/R 4.6.0; x86_64-pc-linux-gnu; 2025-05-15 05:55:26 UTC; unix   
Checked with rchk version 35618ebbccf3cd0b45a3530e6303970a22a9056b LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md

Suspicious call (two or more unprotected arguments) to cpp_setdiff(SEXPREC*, SEXPREC*, bool) at cpp_df_c(SEXPREC*) cheapr/src/combine.cpp:794


Function _cheapr_cpp_address
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_bin
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_c
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_col_all_na
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_col_any_na
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_col_na_counts
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_combine_levels
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_count_val
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_df_assign_cols
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_df_col_c
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_df_col_na_counts
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_df_row_na_counts
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_df_select
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_df_slice
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_df_subset
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_drop_null
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_fixed_width_breaks
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_format_numeric_as_int64
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_gcd
  [UP] ignoring variable <unnamed var:   %14 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_gcd2_vectorised
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_growth_rate
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_if_else
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_int64_to_double
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_int64_to_int
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_int64_to_numeric
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_int_sign
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_intersect
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_is_na
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_is_simple_atomic_vec
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_is_simple_vec
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_lag
  [UP] ignoring variable <unnamed var:   %14 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_lag2
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_lag_sequence
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_lcm
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_lcm2_vectorised
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_lead_sequence
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_lengths
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_lgl_count
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_lgl_locs
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_list_args
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_list_as_df
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_list_assign
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_list_c
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_loc_set_replace
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_matrix_col_na_counts
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_matrix_row_na_counts
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_na_init
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_name_repair
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_new_df
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_new_list
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_num_na
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_numeric_to_int64
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_reconstruct
  [UP] ignoring variable <unnamed var:   %14 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_recycle
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_rep
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_rep_each
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_rep_len
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_rev
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_row_na_counts
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_semi_copy
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_sequence
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_sequence_id
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_abs
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_add
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_add_attr
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_add_attributes
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_ceiling
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_change_sign
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_divide
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_exp
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_floor
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_log
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_multiply
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_or
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_pow
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_rm_attr
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_rm_attributes
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_round
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_sqrt
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_subtract
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_trunc
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_setdiff
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_shallow_copy
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_sset
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_str_coalesce
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_unnested_length
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_val_remove
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_val_replace
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_val_set_replace
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_vector_length
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_which_
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_which_na
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_which_not_na
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_which_val
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_window_sequence
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_r_copy
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_reconstruct
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function clean_indices(SEXPREC*, SEXPREC*, bool)
  [UP] ignoring variable names as it has address taken, results will be incomplete 

Function cpp11::named_arg& cpp11::named_arg::operator=<SEXPREC*>(SEXPREC*)
  [UP] ignoring variable rhs as it has address taken, results will be incomplete 

Function cpp11::package::operator[](char const*)
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function cpp_c(SEXPREC*)
  [UP] ignoring variable c_char as it has address taken, results will be incomplete 

Function cpp_col_all_na(SEXPREC*, bool)
  [UP] ignoring variable is_missing as it has address taken, results will be incomplete 
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete cheapr/src/nas.cpp:610

Function cpp_col_any_na(SEXPREC*, bool)
  [UP] ignoring variable is_missing as it has address taken, results will be incomplete 
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete cheapr/src/nas.cpp:551

Function cpp_combine_factors(SEXPREC*)
  [UP] ignoring variable char_vec as it has address taken, results will be incomplete 

Function cpp_df_assign_cols(SEXPREC*, SEXPREC*)
  [UP] unprotected variable names while calling allocating function get_names(SEXPREC*) cheapr/src/lists.cpp:598
  [UP] unprotected variable col_names while calling allocating function df_nrow(SEXPREC*) cheapr/src/lists.cpp:611
  [UP] unprotected variable names while calling allocating function df_nrow(SEXPREC*) cheapr/src/lists.cpp:611
  [UP] calling allocating function Rf_match with a fresh pointer (col_names <arg 2>) cheapr/src/lists.cpp:615
  [UP] calling allocating function Rf_match with a fresh pointer (names <arg 1>) cheapr/src/lists.cpp:615

Function cpp_df_c(SEXPREC*)
  [UP] calling allocating function cpp_setdiff(SEXPREC*, SEXPREC*, bool) with argument allocated using get_names(SEXPREC*) cheapr/src/combine.cpp:794

Function cpp_df_col_na_counts(SEXPREC*)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete cheapr/src/nas.cpp:492

Function cpp_df_row_na_counts(SEXPREC*)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete cheapr/src/nas.cpp:445

Function cpp_df_select(SEXPREC*, SEXPREC*)
  [UP] unprotected variable names while calling allocating function cpp_seq_len(long) cheapr/src/sset.cpp:1263
  [UP] allocating function Rf_match may destroy its unprotected argument (names <arg 1>), which is later used. cheapr/src/sset.cpp:1267
  [UP] calling allocating function Rf_match with a fresh pointer (names <arg 1>) cheapr/src/sset.cpp:1267
  [UP] unprotected variable names while calling allocating function cpp_any_na(SEXPREC*, bool)(V,?) cheapr/src/sset.cpp:1269
  [UP] unprotected variable names while calling allocating function cpp_which_(SEXPREC*, bool) cheapr/src/sset.cpp:1285
  [UP] unprotected variable names while calling allocating function coerce_vec(SEXPREC*, unsigned int) cheapr/src/sset.cpp:1290
  [UP] unprotected variable names while calling allocating function exclude_locs(SEXPREC*, long) cheapr/src/sset.cpp:1297
  [UP] unprotected variable names while calling allocating function exclude_locs(SEXPREC*, long)(V,?) cheapr/src/sset.cpp:1297
  [UP] unprotected variable names while calling allocating function new_vec(unsigned int, long) cheapr/src/sset.cpp:1302
  [UP] unprotected variable names while calling allocating function new_vec(unsigned int, long) cheapr/src/sset.cpp:1303

Function cpp_df_slice(SEXPREC*, SEXPREC*, bool)
  [UP] ignoring variable df_var as it has address taken, results will be incomplete 
  [UP] unprotected variable names while calling allocating function sset_vec(SEXPREC*, SEXPREC*, bool) cheapr/src/sset.cpp:1396
  [UP] unprotected variable names while calling allocating function Rf_copyMostAttrib cheapr/src/sset.cpp:1397
  [UP] calling allocating function sset_vec(SEXPREC*, SEXPREC*, bool) with a fresh pointer (names <arg 1>) cheapr/src/sset.cpp:1398

Function cpp_fixed_width_breaks(double, double, double, bool, bool, bool)
  [PB] has negative depth cheapr/src/sequences.cpp:678
  [UP] attempt to unprotect more items (4) than protected (0), results will be incomplete cheapr/src/sequences.cpp:678
  [PB] has possible protection stack imbalance cheapr/src/sequences.cpp:681

Function cpp_lag(SEXPREC*, long, SEXPREC*, bool, bool)
  [UP] calling allocating function lag(SEXPREC*, long, SEXPREC*, bool) with argument allocated using get_names(SEXPREC*) cheapr/src/lag.cpp:297

Function cpp_lag2(SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, bool)
  [UP] calling allocating function lag2(SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*, SEXPREC*) with argument allocated using get_names(SEXPREC*) cheapr/src/lag.cpp:735

Function cpp_list_assign(SEXPREC*, SEXPREC*)
  [UP] unprotected variable names while calling allocating function get_names(SEXPREC*) cheapr/src/lists.cpp:257
  [UP] unprotected variable col_names while calling allocating function new_vec(unsigned int, long) cheapr/src/lists.cpp:260
  [UP] unprotected variable names while calling allocating function new_vec(unsigned int, long) cheapr/src/lists.cpp:266
  [UP] calling allocating function Rf_match with a fresh pointer (col_names <arg 2>) cheapr/src/lists.cpp:285
  [UP] calling allocating function Rf_match with a fresh pointer (names <arg 1>) cheapr/src/lists.cpp:285

Function cpp_name_repair(SEXPREC*, SEXPREC*, SEXPREC*)
  [UP] ignoring variable dup_locs as it has address taken, results will be incomplete 
  [UP] ignoring variable empty_locs as it has address taken, results will be incomplete 
  [UP] ignoring variable temp as it has address taken, results will be incomplete 

Function cpp_rev(SEXPREC*, bool)
  [UP] calling allocating function rev(SEXPREC*, bool) with argument allocated using get_names(SEXPREC*) cheapr/src/sset.cpp:1227

Function cpp_set_add_attributes(SEXPREC*, SEXPREC*, bool)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] unprotected variable names while calling allocating function Rf_install cheapr/src/attrs.cpp:76
  [UP] unprotected variable names while calling allocating function utf8_char(SEXPREC*) cheapr/src/attrs.cpp:76
  [UP] unprotected variable names while calling allocating function address_equal(SEXPREC*, SEXPREC*) cheapr/src/attrs.cpp:77
  [UP] unprotected variable names while calling allocating function Rf_duplicate cheapr/src/attrs.cpp:78
  [UP] unprotected variable names while calling allocating function Rf_setAttrib cheapr/src/attrs.cpp:79
  [UP] unprotected variable names while calling allocating function Rf_setAttrib cheapr/src/attrs.cpp:81
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete cheapr/src/attrs.cpp:85
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete cheapr/src/attrs.cpp:99

Function cpp_sset(SEXPREC*, SEXPREC*, bool)
  [UP] calling allocating function sset_vec(SEXPREC*, SEXPREC*, bool) with argument allocated using get_names(SEXPREC*) cheapr/src/sset.cpp:1456

Function cpp_unique(SEXPREC*, bool)
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable names as it has address taken, results will be incomplete 
  [UP] calling allocating function sset_vec(SEXPREC*, SEXPREC*, bool) with argument allocated using get_names(SEXPREC*) cheapr/src/combine.cpp:409

Function cpp_val_remove(SEXPREC*, SEXPREC*)
  [UP] ignoring variable val_locs as it has address taken, results will be incomplete 

Function cpp_val_replace(SEXPREC*, SEXPREC*, SEXPREC*, bool)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete cheapr/src/scalars.cpp:381

Function r_length(SEXPREC*)
  [UP] ignoring variable x as it has address taken, results will be incomplete 

Package cheapr version 1.0.0
Package built using 87687/R 4.5.0; x86_64-pc-linux-gnu; 2025-02-05 23:25:02 UTC; unix   
Checked with rchk version 35618ebbccf3cd0b45a3530e6303970a22a9056b LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function _cheapr_compact_seq_data
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_bin
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_col_all_na
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_col_any_na
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_col_na_counts
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_count_val
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_dbl_sequence
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_df_col_na_counts
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_df_row_na_counts
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_drop_null
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_fixed_width_breaks
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_format_numeric_as_int64
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_gcd
  [UP] ignoring variable <unnamed var:   %14 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_gcd2_vectorised
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_if_else
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_int64_to_double
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_int64_to_int
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_int64_to_numeric
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_int_sequence
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_is_na
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_lag
  [UP] ignoring variable <unnamed var:   %14 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_lag2
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_lag_sequence
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_lcm
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_lcm2_vectorised
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_lead_sequence
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_lengths
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_lgl_count
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_lgl_locs
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_list_as_df
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_loc_set_replace
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_matrix_col_na_counts
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_matrix_row_na_counts
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_new_list
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_num_na
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_numeric_to_int64
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_r_unnested_length
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_rev
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_row_na_counts
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_sequence
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_sequence_id
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_abs
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_add
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_add_attr
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_add_attributes
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_ceiling
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_change_sign
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_divide
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_exp
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_floor
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_log
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_multiply
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_or
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_pow
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_rm_attr
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_rm_attributes
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_round
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_sqrt
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_subtract
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_set_trunc
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_sset_df
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_sset_range
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_val_remove
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_val_replace
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_val_set_replace
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_which_
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_which_na
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_which_not_na
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_which_val
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_cpp_window_sequence
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _cheapr_r_copy
  [UP] ignoring variable <unnamed var:   %6 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function cpp11::package::operator[](char const*)
  [UP] ignoring variable <unnamed var:   %8 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function cpp_col_all_na(SEXPREC*, bool)
  [UP] ignoring variable is_missing as it has address taken, results will be incomplete 
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete cheapr/src/nas.cpp:609

Function cpp_col_any_na(SEXPREC*, bool)
  [UP] ignoring variable is_missing as it has address taken, results will be incomplete 
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete cheapr/src/nas.cpp:552

Function cpp_df_col_na_counts(SEXPREC*)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete cheapr/src/nas.cpp:495

Function cpp_df_row_na_counts(SEXPREC*)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete cheapr/src/nas.cpp:448

Function cpp_fixed_width_breaks(double, double, double, bool, bool, bool)
  [PB] has negative depth cheapr/src/sequences.cpp:668
  [UP] attempt to unprotect more items (4) than protected (0), results will be incomplete cheapr/src/sequences.cpp:668
  [PB] has possible protection stack imbalance cheapr/src/sequences.cpp:671

Function cpp_set_rm_attributes(SEXPREC*)
  [PB] has too high protection stack depth results will be incomplete
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [PB] has an unsupported form of unprotect with a variable results will be incomplete cheapr/src/attrs.cpp:16
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete cheapr/src/attrs.cpp:16

Function cpp_sset_df(SEXPREC*, SEXPREC*)
  [UP] ignoring variable indices2 as it has address taken, results will be incomplete 
  [UP] ignoring variable r_zero as it has address taken, results will be incomplete 
  [UP] ignoring variable df_var as it has address taken, results will be incomplete 
  [PB] has an unsupported form of unprotect (not constant, not variable), results will be incomplete cheapr/src/sset.cpp:520
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete cheapr/src/sset.cpp:520
  [PB] has an unsupported form of unprotect (not constant, not variable), results will be incomplete cheapr/src/sset.cpp:592
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete cheapr/src/sset.cpp:592
  [PB] has an unsupported form of unprotect (not constant, not variable), results will be incomplete cheapr/src/sset.cpp:623
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete cheapr/src/sset.cpp:623
  [PB] has an unsupported form of unprotect (not constant, not variable), results will be incomplete cheapr/src/sset.cpp:653
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete cheapr/src/sset.cpp:653

Function cpp_sset_range(SEXPREC*, long, long, long)
  [PB] has negative depth cheapr/src/sset.cpp:394
  [UP] attempt to unprotect more items (1) than protected (0), results will be incomplete cheapr/src/sset.cpp:394
  [PB] has possible protection stack imbalance cheapr/src/sset.cpp:395

Function cpp_val_remove(SEXPREC*, SEXPREC*)
  [UP] ignoring variable val_locs as it has address taken, results will be incomplete 

Function cpp_val_replace(SEXPREC*, SEXPREC*, SEXPREC*, bool)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete cheapr/src/scalars.cpp:386

Function cpp_vec_length(SEXPREC*)
  [UP] ignoring variable x as it has address taken, results will be incomplete 

Function r_min(SEXPREC*)
  [UP] ignoring variable x as it has address taken, results will be incomplete 

Function r_sum(SEXPREC*, bool)
  [UP] ignoring variable x as it has address taken, results will be incomplete 

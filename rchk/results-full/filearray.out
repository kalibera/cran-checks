Package filearray version 0.2.0
Package built using 88093/R 4.6.0; x86_64-pc-linux-gnu; 2025-04-03 16:48:15 UTC; unix   
Checked with rchk version 35618ebbccf3cd0b45a3530e6303970a22a9056b LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function FARR_buffer_map(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::Function_Impl<Rcpp::PreserveStorage> const&, std::__1::vector<int, std::__1::allocator<int> >&, int)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [PB] has too high protection stack depth results will be incomplete
  [PB] has an unsupported form of unprotect with a variable results will be incomplete filearray/src/map.cpp:211
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete filearray/src/map.cpp:211
  [PB] has an unsupported form of unprotect with a variable results will be incomplete filearray/src/map.cpp:218
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete filearray/src/map.cpp:218

Function FARR_buffer_map2(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, Rcpp::Function_Impl<Rcpp::PreserveStorage> const&, std::__1::vector<int, std::__1::allocator<int> >&)
  [PB] has too high protection stack depth results will be incomplete
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [PB] has too high protection stack depth results will be incomplete
  [PB] has an unsupported form of unprotect with a variable results will be incomplete filearray/src/map.cpp:316
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete filearray/src/map.cpp:316
  [PB] has an unsupported form of unprotect with a variable results will be incomplete filearray/src/map.cpp:326
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete filearray/src/map.cpp:326

Function FARR_collapse_complex(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::Vector<14, Rcpp::PreserveStorage> const&, Rcpp::Vector<13, Rcpp::PreserveStorage> const&, Rcpp::Vector<14, Rcpp::PreserveStorage> const&, int, bool, double)
  [UP] ignoring variable dim_int64 as it has address taken, results will be incomplete 

Function FARR_meta(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
  [UP] ignoring variable cum_part_size as it has address taken, results will be incomplete 
  [UP] ignoring variable dimension as it has address taken, results will be incomplete 
  [PB] has an unsupported form of unprotect (not constant, not variable), results will be incomplete filearray/src/core.cpp:202
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete filearray/src/core.cpp:202

Function Rcpp::Armor<SEXPREC*>::init(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:47

Function Rcpp::Armor<SEXPREC*>::~Armor()
  [PB] has negative depth Rcpp/include/Rcpp/protection/Armor.h:41
  [UP] attempt to unprotect more items (1) than protected (0), results will be incomplete Rcpp/include/Rcpp/protection/Armor.h:41
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:42

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function Rcpp::internal::convert_using_rfunction(SEXPREC*, char const*)
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function SEXPREC* each_partition_template<double, Rcomplex>(double*, long const&, long, Rcpp::Function_Impl<Rcpp::PreserveStorage>, long*, Rcpp::Vector<19, Rcpp::PreserveStorage>&, Rcomplex*, SEXPREC*, void (*)(double const*, Rcomplex*, int const&, bool const&))
  [UP] ignoring variable count_sxp as it has address taken, results will be incomplete 
  [UP] ignoring variable item as it has address taken, results will be incomplete 
  [UP] ignoring variable tmp_arg as it has address taken, results will be incomplete 

Function SEXPREC* each_partition_template<double, double>(double*, long const&, long, Rcpp::Function_Impl<Rcpp::PreserveStorage>, long*, Rcpp::Vector<19, Rcpp::PreserveStorage>&, double*, SEXPREC*, void (*)(double const*, double*, int const&, bool const&))
  [UP] ignoring variable count_sxp as it has address taken, results will be incomplete 
  [UP] ignoring variable item as it has address taken, results will be incomplete 
  [UP] ignoring variable tmp_arg as it has address taken, results will be incomplete 

Function SEXPREC* each_partition_template<float, double>(float*, long const&, long, Rcpp::Function_Impl<Rcpp::PreserveStorage>, long*, Rcpp::Vector<19, Rcpp::PreserveStorage>&, double*, SEXPREC*, void (*)(float const*, double*, int const&, bool const&))
  [UP] ignoring variable count_sxp as it has address taken, results will be incomplete 
  [UP] ignoring variable item as it has address taken, results will be incomplete 
  [UP] ignoring variable tmp_arg as it has address taken, results will be incomplete 

Function SEXPREC* each_partition_template<int, int>(int*, long const&, long, Rcpp::Function_Impl<Rcpp::PreserveStorage>, long*, Rcpp::Vector<19, Rcpp::PreserveStorage>&, int*, SEXPREC*, void (*)(int const*, int*, int const&, bool const&))
  [UP] ignoring variable count_sxp as it has address taken, results will be incomplete 
  [UP] ignoring variable item as it has address taken, results will be incomplete 
  [UP] ignoring variable tmp_arg as it has address taken, results will be incomplete 

Function SEXPREC* each_partition_template<unsigned char, int>(unsigned char*, long const&, long, Rcpp::Function_Impl<Rcpp::PreserveStorage>, long*, Rcpp::Vector<19, Rcpp::PreserveStorage>&, int*, SEXPREC*, void (*)(unsigned char const*, int*, int const&, bool const&))
  [UP] ignoring variable count_sxp as it has address taken, results will be incomplete 
  [UP] ignoring variable item as it has address taken, results will be incomplete 
  [UP] ignoring variable tmp_arg as it has address taken, results will be incomplete 

Function SEXPREC* each_partition_template<unsigned char, unsigned char>(unsigned char*, long const&, long, Rcpp::Function_Impl<Rcpp::PreserveStorage>, long*, Rcpp::Vector<19, Rcpp::PreserveStorage>&, unsigned char*, SEXPREC*, void (*)(unsigned char const*, unsigned char*, int const&, bool const&))
  [UP] ignoring variable count_sxp as it has address taken, results will be incomplete 
  [UP] ignoring variable item as it has address taken, results will be incomplete 
  [UP] ignoring variable tmp_arg as it has address taken, results will be incomplete 

Function _filearray_FARR_buffer_map
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %25 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_FARR_buffer_map2
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %19 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_FARR_buffer_mapreduce
  [UP] ignoring variable <unnamed var:   %22 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_FARR_collapse
  [UP] ignoring variable <unnamed var:   %33 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %34 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_FARR_collapse_complex
  [UP] ignoring variable <unnamed var:   %30 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %31 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_FARR_meta
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_FARR_subset2
  [UP] ignoring variable <unnamed var:   %33 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %34 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_FARR_subset_assign2
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %25 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_FARR_subset_assign_sequential
  [UP] ignoring variable <unnamed var:   %27 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_FARR_subset_sequential
  [UP] ignoring variable <unnamed var:   %30 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %31 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_check_missing_dots
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_cplxToReal2
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_filearray_assign
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %19 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_filearray_meta
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_filearray_subset
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %25 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_floatToReal2
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_getDefaultNumThreads
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_getThreads
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_get_buffer_size
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_get_float_na
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_kinda_sorted
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_loc2idx
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_locationList
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %19 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_realToCplx2
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_realToFloat2
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %13 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_realToInt64
  [UP] ignoring variable <unnamed var:   %21 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %22 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_reshape_or_drop
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %19 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_schedule
  [UP] ignoring variable <unnamed var:   %24 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function _filearray_set_buffer_size
  [UP] ignoring variable <unnamed var:   %12 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function locationList(SEXPREC*, Rcpp::Vector<14, Rcpp::PreserveStorage> const&, int)
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete filearray/src/core.cpp:346

Function schedule(SEXPREC*, Rcpp::Vector<14, Rcpp::PreserveStorage> const&, Rcpp::Vector<14, Rcpp::PreserveStorage> const&, int, int)
  [UP] ignoring variable idx1 as it has address taken, results will be incomplete 
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] ignoring variable idx2tmp as it has address taken, results will be incomplete 
  [UP] protect stack is too deep, unprotecting all variables, results will be incomplete
  [UP] ignoring variable idx1range as it has address taken, results will be incomplete 
  [UP] ignoring variable result_length as it has address taken, results will be incomplete 
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete filearray/src/core.cpp:561

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<SEXPREC*>(SEXPREC* const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

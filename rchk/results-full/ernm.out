Package ernm version 1.0.4
Package built using 88920/R 4.6.0; x86_64-pc-linux-gnu; 2025-10-17 01:17:29 UTC; unix   
Checked with rchk version 35618ebbccf3cd0b45a3530e6303970a22a9056b LLVM version 14.0.6
More information at https://github.com/kalibera/cran-checks/blob/master/rchk/PROTECT.md
For rchk in docker image see https://github.com/kalibera/rchk/blob/master/doc/DOCKER.md


Function Rcpp::Armor<SEXPREC*>::init(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:47

Function Rcpp::Armor<SEXPREC*>::~Armor()
  [PB] has negative depth Rcpp/include/Rcpp/protection/Armor.h:41
  [UP] attempt to unprotect more items (1) than protected (0), results will be incomplete Rcpp/include/Rcpp/protection/Armor.h:41
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Armor.h:42

Function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<Rcpp::RObject_Impl<Rcpp::PreserveStorage> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::RObject_Impl<Rcpp::PreserveStorage> const&)
  [UP] ignoring variable <unnamed var:   %7 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<Rcpp::Symbol_Impl<Rcpp::NoProtectStorage>, Rcpp::XPtr<ernm::BinaryNet<ernm::Directed>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<ernm::BinaryNet<ernm::Directed> >(ernm::BinaryNet<ernm::Directed>*)), false> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::Symbol_Impl<Rcpp::NoProtectStorage> const&, Rcpp::XPtr<ernm::BinaryNet<ernm::Directed>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<ernm::BinaryNet<ernm::Directed> >(ernm::BinaryNet<ernm::Directed>*)), false> const&)
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<Rcpp::Symbol_Impl<Rcpp::NoProtectStorage>, Rcpp::XPtr<ernm::BinaryNet<ernm::Undirected>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<ernm::BinaryNet<ernm::Undirected> >(ernm::BinaryNet<ernm::Undirected>*)), false> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::Symbol_Impl<Rcpp::NoProtectStorage> const&, Rcpp::XPtr<ernm::BinaryNet<ernm::Undirected>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<ernm::BinaryNet<ernm::Undirected> >(ernm::BinaryNet<ernm::Undirected>*)), false> const&)
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<Rcpp::Symbol_Impl<Rcpp::NoProtectStorage>, Rcpp::XPtr<ernm::Model<ernm::Directed>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<ernm::Model<ernm::Directed> >(ernm::Model<ernm::Directed>*)), false> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::Symbol_Impl<Rcpp::NoProtectStorage> const&, Rcpp::XPtr<ernm::Model<ernm::Directed>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<ernm::Model<ernm::Directed> >(ernm::Model<ernm::Directed>*)), false> const&)
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<Rcpp::Symbol_Impl<Rcpp::NoProtectStorage>, Rcpp::XPtr<ernm::Model<ernm::Undirected>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<ernm::Model<ernm::Undirected> >(ernm::Model<ernm::Undirected>*)), false> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::Symbol_Impl<Rcpp::NoProtectStorage> const&, Rcpp::XPtr<ernm::Model<ernm::Undirected>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<ernm::Model<ernm::Undirected> >(ernm::Model<ernm::Undirected>*)), false> const&)
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<Rcpp::Symbol_Impl<Rcpp::NoProtectStorage>, Rcpp::XPtr<ernm::TaperedModel<ernm::Directed>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<ernm::TaperedModel<ernm::Directed> >(ernm::TaperedModel<ernm::Directed>*)), false> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::Symbol_Impl<Rcpp::NoProtectStorage> const&, Rcpp::XPtr<ernm::TaperedModel<ernm::Directed>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<ernm::TaperedModel<ernm::Directed> >(ernm::TaperedModel<ernm::Directed>*)), false> const&)
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<Rcpp::Symbol_Impl<Rcpp::NoProtectStorage>, Rcpp::XPtr<ernm::TaperedModel<ernm::Undirected>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<ernm::TaperedModel<ernm::Undirected> >(ernm::TaperedModel<ernm::Undirected>*)), false> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::Symbol_Impl<Rcpp::NoProtectStorage> const&, Rcpp::XPtr<ernm::TaperedModel<ernm::Undirected>, Rcpp::PreserveStorage, &(void Rcpp::standard_delete_finalizer<ernm::TaperedModel<ernm::Undirected> >(ernm::TaperedModel<ernm::Undirected>*)), false> const&)
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<Rcpp::Vector<19, Rcpp::PreserveStorage> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::Vector<19, Rcpp::PreserveStorage> const&)
  [UP] ignoring variable <unnamed var:   %7 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<Rcpp::internal::generic_proxy<19, Rcpp::PreserveStorage> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Rcpp::internal::generic_proxy<19, Rcpp::PreserveStorage> const&)
  [UP] ignoring variable <unnamed var:   %7 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<SEXPREC*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, SEXPREC* const&)
  [UP] ignoring variable <unnamed var:   %7 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::Rcpp_protect(SEXPREC*)
  [PB] has possible protection stack imbalance Rcpp/include/Rcpp/protection/Shield.h:25

Function Rcpp::Rcpp_unprotect(int)
  [PB] has an unsupported form of unprotect with a variable results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31
  [UP] unsupported form of unprotect, unprotecting all variables, results will be incomplete Rcpp/include/Rcpp/protection/Shield.h:31

Function Rcpp::class_<ernm::BinaryNet<ernm::Directed> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<ernm::BinaryNet<ernm::Undirected> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<ernm::CdSampler<ernm::Undirected> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<ernm::GibbsCdSampler2<ernm::Undirected> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<ernm::GibbsCdSampler<ernm::Undirected> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<ernm::MetropolisHastings<ernm::Directed> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<ernm::MetropolisHastings<ernm::Undirected> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<ernm::Model<ernm::Directed> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<ernm::Model<ernm::Undirected> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<ernm::TaperedModel<ernm::Directed> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::class_<ernm::TaperedModel<ernm::Undirected> >::invoke(SEXPREC*, SEXPREC*, SEXPREC**, int)
  [UP] ignoring variable <unnamed var:   %28 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function Rcpp::internal::convert_using_rfunction(SEXPREC*, char const*)
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<false, ernm::BinaryNet<ernm::Directed>, SEXPREC*, bool>::operator()(ernm::BinaryNet<ernm::Directed>*, SEXPREC**)::{lambda(bool)#1}, SEXPREC*, bool, 0, (void*)0>(Rcpp::CppMethodImplN<false, ernm::BinaryNet<ernm::Directed>, SEXPREC*, bool>::operator()(ernm::BinaryNet<ernm::Directed>*, SEXPREC**)::{lambda(bool)#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*, bool>, Rcpp::traits::index_sequence<0>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<false, ernm::BinaryNet<ernm::Directed>, SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >::operator()(ernm::BinaryNet<ernm::Directed>*, SEXPREC**)::{lambda(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)#1}, SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, 0, (void*)0>(Rcpp::CppMethodImplN<false, ernm::BinaryNet<ernm::Directed>, SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >::operator()(ernm::BinaryNet<ernm::Directed>*, SEXPREC**)::{lambda(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, Rcpp::traits::index_sequence<0>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<false, ernm::BinaryNet<ernm::Directed>, SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool>::operator()(ernm::BinaryNet<ernm::Directed>*, SEXPREC**)::{lambda(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool)#1}, SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, 0, 1, (void*)0>(Rcpp::CppMethodImplN<false, ernm::BinaryNet<ernm::Directed>, SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool>::operator()(ernm::BinaryNet<ernm::Directed>*, SEXPREC**)::{lambda(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool)#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool>, Rcpp::traits::index_sequence<0, 1>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<false, ernm::BinaryNet<ernm::Directed>, SEXPREC*>::operator()(ernm::BinaryNet<ernm::Directed>*, SEXPREC**)::{lambda()#1}, SEXPREC*, , , (void*)0>(Rcpp::CppMethodImplN<false, ernm::BinaryNet<ernm::Directed>, SEXPREC*>::operator()(ernm::BinaryNet<ernm::Directed>*, SEXPREC**)::{lambda()#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*>, Rcpp::traits::index_sequence<>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<false, ernm::BinaryNet<ernm::Undirected>, SEXPREC*, bool>::operator()(ernm::BinaryNet<ernm::Undirected>*, SEXPREC**)::{lambda(bool)#1}, SEXPREC*, bool, 0, (void*)0>(Rcpp::CppMethodImplN<false, ernm::BinaryNet<ernm::Undirected>, SEXPREC*, bool>::operator()(ernm::BinaryNet<ernm::Undirected>*, SEXPREC**)::{lambda(bool)#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*, bool>, Rcpp::traits::index_sequence<0>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<false, ernm::BinaryNet<ernm::Undirected>, SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >::operator()(ernm::BinaryNet<ernm::Undirected>*, SEXPREC**)::{lambda(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)#1}, SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, 0, (void*)0>(Rcpp::CppMethodImplN<false, ernm::BinaryNet<ernm::Undirected>, SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >::operator()(ernm::BinaryNet<ernm::Undirected>*, SEXPREC**)::{lambda(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, Rcpp::traits::index_sequence<0>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<false, ernm::BinaryNet<ernm::Undirected>, SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool>::operator()(ernm::BinaryNet<ernm::Undirected>*, SEXPREC**)::{lambda(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool)#1}, SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, 0, 1, (void*)0>(Rcpp::CppMethodImplN<false, ernm::BinaryNet<ernm::Undirected>, SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool>::operator()(ernm::BinaryNet<ernm::Undirected>*, SEXPREC**)::{lambda(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool)#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool>, Rcpp::traits::index_sequence<0, 1>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<false, ernm::BinaryNet<ernm::Undirected>, SEXPREC*>::operator()(ernm::BinaryNet<ernm::Undirected>*, SEXPREC**)::{lambda()#1}, SEXPREC*, , , (void*)0>(Rcpp::CppMethodImplN<false, ernm::BinaryNet<ernm::Undirected>, SEXPREC*>::operator()(ernm::BinaryNet<ernm::Undirected>*, SEXPREC**)::{lambda()#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*>, Rcpp::traits::index_sequence<>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<false, ernm::CdSampler<ernm::Undirected>, SEXPREC*>::operator()(ernm::CdSampler<ernm::Undirected>*, SEXPREC**)::{lambda()#1}, SEXPREC*, , , (void*)0>(Rcpp::CppMethodImplN<false, ernm::CdSampler<ernm::Undirected>, SEXPREC*>::operator()(ernm::CdSampler<ernm::Undirected>*, SEXPREC**)::{lambda()#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*>, Rcpp::traits::index_sequence<>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<false, ernm::GibbsCdSampler2<ernm::Undirected>, SEXPREC*>::operator()(ernm::GibbsCdSampler2<ernm::Undirected>*, SEXPREC**)::{lambda()#1}, SEXPREC*, , , (void*)0>(Rcpp::CppMethodImplN<false, ernm::GibbsCdSampler2<ernm::Undirected>, SEXPREC*>::operator()(ernm::GibbsCdSampler2<ernm::Undirected>*, SEXPREC**)::{lambda()#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*>, Rcpp::traits::index_sequence<>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<false, ernm::GibbsCdSampler<ernm::Undirected>, SEXPREC*>::operator()(ernm::GibbsCdSampler<ernm::Undirected>*, SEXPREC**)::{lambda()#1}, SEXPREC*, , , (void*)0>(Rcpp::CppMethodImplN<false, ernm::GibbsCdSampler<ernm::Undirected>, SEXPREC*>::operator()(ernm::GibbsCdSampler<ernm::Undirected>*, SEXPREC**)::{lambda()#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*>, Rcpp::traits::index_sequence<>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<false, ernm::MetropolisHastings<ernm::Directed>, SEXPREC*>::operator()(ernm::MetropolisHastings<ernm::Directed>*, SEXPREC**)::{lambda()#1}, SEXPREC*, , , (void*)0>(Rcpp::CppMethodImplN<false, ernm::MetropolisHastings<ernm::Directed>, SEXPREC*>::operator()(ernm::MetropolisHastings<ernm::Directed>*, SEXPREC**)::{lambda()#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*>, Rcpp::traits::index_sequence<>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<false, ernm::MetropolisHastings<ernm::Undirected>, SEXPREC*>::operator()(ernm::MetropolisHastings<ernm::Undirected>*, SEXPREC**)::{lambda()#1}, SEXPREC*, , , (void*)0>(Rcpp::CppMethodImplN<false, ernm::MetropolisHastings<ernm::Undirected>, SEXPREC*>::operator()(ernm::MetropolisHastings<ernm::Undirected>*, SEXPREC**)::{lambda()#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*>, Rcpp::traits::index_sequence<>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<true, ernm::BinaryNet<ernm::Directed>, SEXPREC*>::operator()(ernm::BinaryNet<ernm::Directed>*, SEXPREC**)::{lambda()#1}, SEXPREC*, , , (void*)0>(Rcpp::CppMethodImplN<true, ernm::BinaryNet<ernm::Directed>, SEXPREC*>::operator()(ernm::BinaryNet<ernm::Directed>*, SEXPREC**)::{lambda()#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*>, Rcpp::traits::index_sequence<>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<true, ernm::BinaryNet<ernm::Undirected>, SEXPREC*>::operator()(ernm::BinaryNet<ernm::Undirected>*, SEXPREC**)::{lambda()#1}, SEXPREC*, , , (void*)0>(Rcpp::CppMethodImplN<true, ernm::BinaryNet<ernm::Undirected>, SEXPREC*>::operator()(ernm::BinaryNet<ernm::Undirected>*, SEXPREC**)::{lambda()#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*>, Rcpp::traits::index_sequence<>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<true, ernm::Model<ernm::Directed>, SEXPREC*>::operator()(ernm::Model<ernm::Directed>*, SEXPREC**)::{lambda()#1}, SEXPREC*, , , (void*)0>(Rcpp::CppMethodImplN<true, ernm::Model<ernm::Directed>, SEXPREC*>::operator()(ernm::Model<ernm::Directed>*, SEXPREC**)::{lambda()#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*>, Rcpp::traits::index_sequence<>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function SEXPREC* Rcpp::internal::call_impl<Rcpp::CppMethodImplN<true, ernm::Model<ernm::Undirected>, SEXPREC*>::operator()(ernm::Model<ernm::Undirected>*, SEXPREC**)::{lambda()#1}, SEXPREC*, , , (void*)0>(Rcpp::CppMethodImplN<true, ernm::Model<ernm::Undirected>, SEXPREC*>::operator()(ernm::Model<ernm::Undirected>*, SEXPREC**)::{lambda()#1} const&, SEXPREC**, Rcpp::internal::type_pack<SEXPREC*>, Rcpp::traits::index_sequence<>)
  [UP] ignoring variable res as it has address taken, results will be incomplete 

Function ernm::BinaryNet<ernm::Directed>::BinaryNet(SEXPREC*)
  [UP] ignoring variable sexp as it has address taken, results will be incomplete 

Function ernm::BinaryNet<ernm::Directed>::getVariableNamesR1(bool)
  [UP] unprotected variable <unnamed var:   %3 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::Language_Impl<Rcpp::PreserveStorage>::~Language_Impl() ernm/src/../inst/include/BinaryNet.h:815
  [UP] unprotected variable <unnamed var:   %3 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::Vector<19, Rcpp::PreserveStorage>::~Vector() ernm/src/../inst/include/BinaryNet.h:816

Function ernm::BinaryNet<ernm::Undirected>::BinaryNet(SEXPREC*)
  [UP] ignoring variable sexp as it has address taken, results will be incomplete 

Function ernm::BinaryNet<ernm::Undirected>::getVariableNamesR1(bool)
  [UP] unprotected variable <unnamed var:   %3 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::Language_Impl<Rcpp::PreserveStorage>::~Language_Impl() ernm/src/../inst/include/BinaryNet.h:815
  [UP] unprotected variable <unnamed var:   %3 = alloca %struct.SEXPREC*, align 8> while calling allocating function Rcpp::Vector<19, Rcpp::PreserveStorage>::~Vector() ernm/src/../inst/include/BinaryNet.h:816

Function ernm::CdSampler<ernm::Undirected>::generateSample(int, int, int)
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function ernm::Directed::addDiscreteVariableR(Rcpp::RObject_Impl<Rcpp::PreserveStorage>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)
  [UP] unprotected variable intSexp while calling allocating function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<SEXPREC*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, SEXPREC* const&) ernm/src/../inst/include/BinaryNet.h:1572
  [UP] unprotected variable intSexp while calling allocating function Rcpp::Language_Impl<Rcpp::PreserveStorage>::eval() const ernm/src/../inst/include/BinaryNet.h:1573
  [UP] unprotected variable levelsSexp while calling allocating function std::__1::vector<int, std::__1::allocator<int> > Rcpp::as<std::__1::vector<int, std::__1::allocator<int> > >(SEXPREC*) ernm/src/../inst/include/BinaryNet.h:1574

Function ernm::GibbsCdSampler2<ernm::Undirected>::generateSample(int, int, int)
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function ernm::GibbsCdSampler<ernm::Undirected>::generateSample(int, int, int)
  [UP] ignoring variable <unnamed var:   %15 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %17 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function ernm::MetropolisHastings<ernm::Directed>::generateSample(int, int, int)
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function ernm::MetropolisHastings<ernm::Directed>::getModelR()
  [UP] unprotected variable <unnamed var:   %2 = alloca %struct.SEXPREC*, align 8> while calling allocating function boost::shared_ptr<ernm::TaperedModel<ernm::Directed> >::~shared_ptr() ernm/src/../inst/include/MetropolisHastings.h:151

Function ernm::MetropolisHastings<ernm::Directed>::setModelR(SEXPREC*)
  [UP] ignoring variable sexp as it has address taken, results will be incomplete 

Function ernm::MetropolisHastings<ernm::Undirected>::generateSample(int, int, int)
  [UP] ignoring variable <unnamed var:   %16 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 
  [UP] ignoring variable <unnamed var:   %18 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function ernm::MetropolisHastings<ernm::Undirected>::getModelR()
  [UP] unprotected variable <unnamed var:   %2 = alloca %struct.SEXPREC*, align 8> while calling allocating function boost::shared_ptr<ernm::TaperedModel<ernm::Undirected> >::~shared_ptr() ernm/src/../inst/include/MetropolisHastings.h:151

Function ernm::MetropolisHastings<ernm::Undirected>::setModelR(SEXPREC*)
  [UP] ignoring variable sexp as it has address taken, results will be incomplete 

Function ernm::Model<ernm::Directed>::Model(SEXPREC*)
  [UP] ignoring variable sexp as it has address taken, results will be incomplete 

Function ernm::Model<ernm::Directed>::statisticsR()
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function ernm::Model<ernm::Directed>::thetasR()
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function ernm::Model<ernm::Undirected>::Model(SEXPREC*)
  [UP] ignoring variable sexp as it has address taken, results will be incomplete 

Function ernm::Model<ernm::Undirected>::statisticsR()
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function ernm::Model<ernm::Undirected>::thetasR()
  [UP] ignoring variable <unnamed var:   %9 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function ernm::TaperedModel<ernm::Directed>::TaperedModel(SEXPREC*)
  [UP] ignoring variable sexp as it has address taken, results will be incomplete 

Function ernm::TaperedModel<ernm::Undirected>::TaperedModel(SEXPREC*)
  [UP] ignoring variable sexp as it has address taken, results will be incomplete 

Function ernm::Undirected::addDiscreteVariableR(Rcpp::RObject_Impl<Rcpp::PreserveStorage>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)
  [UP] unprotected variable intSexp while calling allocating function Rcpp::Language_Impl<Rcpp::PreserveStorage>::Language_Impl<SEXPREC*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, SEXPREC* const&) ernm/src/../inst/include/BinaryNet.h:2256
  [UP] unprotected variable intSexp while calling allocating function Rcpp::Language_Impl<Rcpp::PreserveStorage>::eval() const ernm/src/../inst/include/BinaryNet.h:2257
  [UP] unprotected variable levelsSexp while calling allocating function std::__1::vector<int, std::__1::allocator<int> > Rcpp::as<std::__1::vector<int, std::__1::allocator<int> > >(SEXPREC*) ernm/src/../inst/include/BinaryNet.h:2258

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<Rcpp::Matrix<13, Rcpp::PreserveStorage> >(Rcpp::Matrix<13, Rcpp::PreserveStorage> const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<Rcpp::Vector<13, Rcpp::PreserveStorage> >(Rcpp::Vector<13, Rcpp::PreserveStorage> const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<SEXPREC*>(SEXPREC* const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<bool>(bool const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<char [4]>(char const (&) [4])
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<char [5]>(char const (&) [5])
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<char [7]>(char const (&) [7])
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<char [8]>(char const (&) [8])
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<double>(double const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<int>(int const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<std::__1::vector<int, std::__1::allocator<int> > >(std::__1::vector<int, std::__1::allocator<int> > const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void Rcpp::Vector<19, Rcpp::PreserveStorage>::push_back<std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)
  [UP] ignoring variable <unnamed var:   %5 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void ernm::tests::changeStatTest<ernm::Directed>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)
  [UP] ignoring variable <unnamed var:   %25 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void ernm::tests::changeStatTest<ernm::Undirected>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)
  [UP] ignoring variable <unnamed var:   %25 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void ernm::tests::toggleTest<ernm::Directed>()
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 

Function void ernm::tests::toggleTest<ernm::Undirected>()
  [UP] ignoring variable <unnamed var:   %10 = alloca %struct.SEXPREC*, align 8> as it has address taken, results will be incomplete 


R Under development (unstable) (2024-11-13 r87325) -- "Unsuffered Consequences"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "fluxfinder"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('fluxfinder')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ffi_compute_fluxes")
> ### * ffi_compute_fluxes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ffi_compute_fluxes
> ### Title: Compute fluxes for multiple groups (measurements)
> ### Aliases: ffi_compute_fluxes
> 
> ### ** Examples
> 
> # No grouping
> ffi_compute_fluxes(cars, group_column = NULL, "speed", "dist")
  speed HM81_AIC HM81_RMSE HM81_flux.estimate HM81_p.value HM81_r.squared
1  15.4       NA        NA                 NA           NA             NA
   lin_AIC lin_RMSE lin_flux.estimate lin_flux.std.error lin_int.estimate
1 419.1569 15.37959          3.932409          0.4155128         -1.84946
  lin_int.std.error  lin_p.value lin_r.squared poly_AIC poly_RMSE
1          5.212326 1.489836e-12     0.6510794  419.885  15.20466
  poly_r.squared  rob_AIC rob_RMSE rob_converged rob_flux.estimate
1      0.6731808 419.7356 13.28595          TRUE          3.773429
  rob_flux.std.error speed_min speed_max
1          0.3892199         4        25
> # With grouping
> cars$Plot <- c("A", "B")
> ffi_compute_fluxes(cars, "Plot", "speed", "dist")
  Plot speed HM81_AIC HM81_RMSE HM81_flux.estimate HM81_p.value HM81_r.squared
1    A 15.16       NA        NA                 NA           NA             NA
2    B 15.64       NA        NA                 NA           NA             NA
   lin_AIC lin_RMSE lin_flux.estimate lin_flux.std.error lin_int.estimate
1 219.2131 17.93966          4.093541          0.6923673        -2.243923
2 202.6977 12.89328          3.801138          0.4888029        -1.725250
  lin_int.std.error  lin_p.value lin_r.squared poly_AIC poly_RMSE
1          8.519214 5.006661e-06     0.6031491 220.4227  17.75546
2          6.246741 6.951261e-08     0.7244610 204.1371  12.81967
  poly_r.squared  rob_AIC rob_RMSE rob_converged rob_flux.estimate
1      0.6450609 219.8422 13.65806          TRUE          3.789950
2      0.7512853 202.7422 13.23369          TRUE          3.774641
  rob_flux.std.error speed_min speed_max
1          0.5536101         4        24
2          0.5607204         4        25
> # See the introductory vignette for a fully-worked example with real data
> 
> 
> 
> cleanEx()
> nameEx("ffi_fit_models")
> ### * ffi_fit_models
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ffi_fit_models
> ### Title: Fit various models to gas concentration data
> ### Aliases: ffi_fit_models
> 
> ### ** Examples
> 
> # Toy data - linear
> ffi_fit_models(cars$speed, cars$dist)
  HM81_AIC HM81_RMSE HM81_flux.estimate HM81_p.value HM81_r.squared  lin_AIC
1       NA        NA                 NA           NA             NA 419.1569
  lin_RMSE lin_flux.estimate lin_flux.std.error lin_int.estimate
1 15.37959          3.932409          0.4155128        -17.57909
  lin_int.std.error  lin_p.value lin_r.squared poly_AIC poly_RMSE
1           6.75844 1.489836e-12     0.6510794  419.885  15.20466
  poly_r.squared  rob_AIC rob_RMSE rob_converged rob_flux.estimate
1      0.6731808 419.7356 13.28595          TRUE          3.773429
  rob_flux.std.error
1          0.3892199
> 
> # Toy data - nonlinear
> ffi_fit_models(Puromycin$conc, Puromycin$rate)
NOTE: HM81_flux.estimate is not NA, implying nonlinear data
  HM81_AIC HM81_RMSE HM81_flux.estimate HM81_p.value HM81_r.squared  lin_AIC
1 200.6851  17.44113           241.6647 8.139952e-11       0.871378 223.7834
  lin_RMSE lin_flux.estimate lin_flux.std.error lin_int.estimate
1 28.81711           105.398            16.9191         93.92358
  lin_int.std.error  lin_p.value lin_r.squared poly_AIC poly_RMSE
1          8.000116 3.525876e-06     0.6488706  205.746  18.76394
  poly_r.squared  rob_AIC rob_RMSE rob_converged rob_flux.estimate
1      0.8653059 223.8119 24.79301          TRUE          106.2137
  rob_flux.std.error
1           20.65072
> 
> # Real data
> f <- system.file("extdata/TG10-01087.data", package = "fluxfinder")
> dat <- ffi_read_LI7810(f)[1:75,] # isolate first observation
TG10-01087.data: read 507 rows of TG10-01087 data, 2022-10-27 10:35:42 to 2022-10-27 10:44:08 EST
> dat$SECONDS <- dat$SECONDS - min(dat$SECONDS) # normalize time to start at 0
> plot(dat$SECONDS, dat$CO2)
> ffi_fit_models(dat$SECONDS, dat$CO2)
  HM81_AIC HM81_RMSE HM81_flux.estimate HM81_p.value HM81_r.squared  lin_AIC
1       NA        NA                 NA           NA             NA 158.1242
   lin_RMSE lin_flux.estimate lin_flux.std.error lin_int.estimate
1 0.6762023         0.1813626        0.003606733         457.3299
  lin_int.std.error  lin_p.value lin_r.squared poly_AIC poly_RMSE
1         0.1546135 2.139204e-58     0.9719396 158.9157 0.6711498
  poly_r.squared  rob_AIC  rob_RMSE rob_converged rob_flux.estimate
1      0.9731147 158.2487 0.7065532          TRUE         0.1805773
  rob_flux.std.error
1        0.003636127
> 
> 
> 
> cleanEx()
> nameEx("ffi_hm1981")
> ### * ffi_hm1981
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ffi_hm1981
> ### Title: Compute flux using nonlinear Hutchinson and Mosier (1981) model
> ### Aliases: ffi_hm1981
> 
> ### ** Examples
> 
> # If data are approximately linear, then NA is returned
> ffi_hm1981(cars$speed, cars$dist)
[1] NA
> # If data are nonlinear (saturating) then flux based on gas diffusion theory
> ffi_hm1981(Puromycin$conc, Puromycin$rate)
[1] 241.6647
> 
> 
> 
> cleanEx()
> nameEx("ffi_metadata_match")
> ### * ffi_metadata_match
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ffi_metadata_match
> ### Title: Match metadata info with a vector of data timestamps
> ### Aliases: ffi_metadata_match
> 
> ### ** Examples
> 
> # Data timestamps
> d_t <- c("2024-01-01 13:00:05", "2024-01-01 13:00:10",
+ "2024-01-01 13:05:05", "2024-01-01 13:10:00")
> # Metadata start dates and times: two measurements, starting 5 minutes apart
> s_d <- c("2024-01-01", "2024-01-01")
> s_t <- c("13:00:00", "13:05:00")
> ol <- c(60, 60) # Observation lengths
> ffi_metadata_match(d_t, s_d, s_t, ol)
[1]  1  1  2 NA
> # Returns {1, 1, 2, NA} indicating that the first and second data timestamps
> # correspond to metadata entry 1, the third to entry 2, and the fourth
> # has no match
> 
> # This generates an error because of overlapping timestamps:
> ## Not run: 
> ##D s_t <- c("13:00:00", "13:01:00")
> ##D ffi_metadata_match(d_t, s_d, s_t, ol)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ffi_qaqc")
> ### * ffi_qaqc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ffi_qaqc
> ### Title: Generate a QA/QC document
> ### Aliases: ffi_qaqc
> 
> ### ** Examples
> 
> # Toy data
> cars$Plot <- c("A", "B")
> fd <- ffi_compute_fluxes(cars, "Plot", "speed", "dist")
> x <- ffi_qaqc(fd, group_column = "Plot")


processing file: qaqc.Rmd
Warning in file(con, "w") :
  cannot open file 'qaqc.knit.md': Read-only file system
Error in file(con, "w") : cannot open the connection
Calls: ffi_qaqc ... <Anonymous> -> <Anonymous> -> write_utf8 -> writeLines -> file
Execution halted

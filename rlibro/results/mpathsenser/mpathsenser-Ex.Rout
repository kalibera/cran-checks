
R Under development (unstable) (2022-05-19 r82378) -- "Unsuffered Consequences"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "mpathsenser"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('mpathsenser')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("app_category")
> ### * app_category
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: app_category
> ### Title: Find the category of an app on the Google Play Store
> ### Aliases: app_category
> 
> ### ** Examples
> 
> app_category('whatsapp')
       app      package         genre
1 whatsapp com.whatsapp Communication
> 
> # Example of a generic app name where we can't find a specific app
> app_category('weather') # Weather forecast channel
      app             package   genre
1 weather com.weather.Weather Weather
> 
> # Get OnePlus weather
> app_category('net.oneplus.weather')
                  app             package   genre
1 net.oneplus.weather net.oneplus.weather Weather
> 
> 
> 
> cleanEx()
> nameEx("ccopy")
> ### * ccopy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ccopy
> ### Title: Copy mpathsenser zip files to a new location
> ### Aliases: ccopy
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ccopy('K:/data/myproject/', '~/myproject')
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("coverage")
> ### * coverage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coverage
> ### Title: Create a coverage chart of the sampling rate
> ### Aliases: coverage
> 
> ### ** Examples
> 
> ## Not run: 
> ##D fix_json()
> ##D unzip()
> ##D freq <- c(
> ##D   Accelerometer = 720, # Once per 5 seconds. Can have multiple measurements.
> ##D   AirQuality = 1,
> ##D   AppUsage = 2, # Once every 30 minutes
> ##D   Bluetooth = 60, # Once per minute. Can have multiple measurements.
> ##D   Gyroscope = 720, # Once per 5 seconds. Can have multiple measurements.
> ##D   Light = 360, # Once per 10 seconds
> ##D   Location = 60, # Once per 60 seconds
> ##D   Memory = 60, # Once per minute
> ##D   Noise = 120,
> ##D   Pedometer = 1,
> ##D   Weather = 1,
> ##D   Wifi = 60 # once per minute
> ##D )
> ##D coverage(
> ##D   db = db,
> ##D   participant_id = '12345',
> ##D   sensor = c('Accelerometer', 'Gyroscope'),
> ##D   frequency = mpathsenser::freq,
> ##D   start_date = '2021-01-01',
> ##D   end_date = '2021-05-01'
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("first_date")
> ### * first_date
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: first_date
> ### Title: Extract the date of the first entry
> ### Aliases: first_date
> 
> ### ** Examples
> 
> ## Not run: 
> ##D db <- open_db()
> ##D first_date(db, 'Accelerometer', '12345')
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("fix_jsons")
> ### * fix_jsons
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fix_jsons
> ### Title: Fix the end of JSON files
> ### Aliases: fix_jsons
> 
> ### ** Examples
> 
> ## Not run: 
> ##D future::plan(future::multisession)
> ##D files <- test_jsons()
> ##D fix_jsons(files = files)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("geocode_rev")
> ### * geocode_rev
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geocode_rev
> ### Title: Reverse geocoding with latitude and longitude
> ### Aliases: geocode_rev
> 
> ### ** Examples
> 
> # Frankfurt Airport
> geocode_rev(50.037936, 8.5599631)
[[1]]
[[1]]$place_id
[1] 55464500

[[1]]$licence
[1] "Data © OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright"

[[1]]$osm_type
[1] "node"

[[1]]$osm_id
[1] 4899715253

[[1]]$lat
[1] "50.0411518"

[[1]]$lon
[1] "8.5589663"

[[1]]$place_rank
[1] 30

[[1]]$category
[1] "aeroway"

[[1]]$type
[1] "parking_position"

[[1]]$importance
[1] 0

[[1]]$addresstype
[1] "aeroway"

[[1]]$name
[1] "V155"

[[1]]$display_name
[1] "V155, Airportring, Flughafen, Süd, Frankfurt am Main, Hessen, 60549, Deutschland"

[[1]]$address
[[1]]$address$aeroway
[1] "V155"

[[1]]$address$road
[1] "Airportring"

[[1]]$address$suburb
[1] "Flughafen"

[[1]]$address$city_district
[1] "Süd"

[[1]]$address$city
[1] "Frankfurt am Main"

[[1]]$address$state
[1] "Hessen"

[[1]]$address$`ISO3166-2-lvl4`
[1] "DE-HE"

[[1]]$address$postcode
[1] "60549"

[[1]]$address$country
[1] "Deutschland"

[[1]]$address$country_code
[1] "de"


[[1]]$boundingbox
[1] "50.0411018" "50.0412018" "8.5589163"  "8.5590163" 


> 
> 
> 
> cleanEx()
> nameEx("get_data")
> ### * get_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_data
> ### Title: Generic helper function from extracting data from an m-Path
> ###   Sense database
> ### Aliases: get_data
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Open a database
> ##D db <- open_db()
> ##D 
> ##D # Retrieve some data
> ##D get_data(db, 'Accelerometer', '12345')
> ##D 
> ##D # Or within a specific window
> ##D get_data(db, 'Accelerometer', '12345', '2021-01-01', '2021-01-05')
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("haversine")
> ### * haversine
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: haversine
> ### Title: Calculate the Great-Circle Distance between two points in
> ###   kilometers
> ### Aliases: haversine
> 
> ### ** Examples
> 
> fra <- c(50.03333, 8.570556) # Frankfurt Airport
> ord <- c(41.97861, -87.90472) # Chicago O'Hare International Airport
> haversine(fra[1], fra[2], ord[1], ord[2]) # 6971.059 km
[1] 6971.059
> 
> 
> 
> cleanEx()
> nameEx("identify_gaps")
> ### * identify_gaps
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: identify_gaps
> ### Title: Identify gaps in mpathsenser mobile sensing data
> ### Aliases: identify_gaps
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Find the gaps for a participant and convert to datetime
> ##D gaps <- identify_gaps(db, '12345', min_gap = 60) %>%
> ##D   mutate(across(c(to, from), ymd_hms)) %>%
> ##D   mutate(across(c(to, from), with_tz, 'Europe/Brussels'))
> ##D 
> ##D # Get some sensor data and calculate a statistic, e.g. the time spent walking
> ##D # You can also do this with larger intervals, e.g. the time spent walking per hour
> ##D walking_time <- get_data(db, 'Activity', '12345') %>%
> ##D   collect() %>%
> ##D   mutate(datetime = ymd_hms(paste(date, time))) %>%
> ##D   mutate(datetime = with_tz(datetime, 'Europe/Brussels')) %>%
> ##D   arrange(datetime) %>%
> ##D   mutate(prev_time = lag(datetime)) %>%
> ##D   mutate(duration = datetime - prev_time) %>%
> ##D   filter(type == 'WALKING')
> ##D 
> ##D # Find out if a gap occurs in the time intervals
> ##D walking_time %>%
> ##D   rowwise() %>%
> ##D   mutate(gap = any(gaps$from >= prev_time & gaps$to <= datetime))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("last_date")
> ### * last_date
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: last_date
> ### Title: Extract the date of the last entry
> ### Aliases: last_date
> 
> ### ** Examples
> 
> ## Not run: 
> ##D db <- open_db()
> ##D first_date(db, 'Accelerometer', '12345')
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("moving_average")
> ### * moving_average
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: moving_average
> ### Title: Moving average for values in an mpathsenser database
> ### Aliases: moving_average
> 
> ### ** Examples
> 
> ## Not run: 
> ##D get_moving_average(db, 'Light', '12345', mean_lux, max_lux, n = 5)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("sensors")
> ### * sensors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sensors
> ### Title: Available Sensors
> ### Aliases: sensors
> ### Keywords: datasets
> 
> ### ** Examples
> 
> sensors
 [1] "Accelerometer" "AirQuality"    "Activity"      "AppUsage"     
 [5] "Battery"       "Bluetooth"     "Calendar"      "Connectivity" 
 [9] "Device"        "Error"         "Geofence"      "Gyroscope"    
[13] "InstalledApps" "Keyboard"      "Light"         "Location"     
[17] "Memory"        "Mobility"      "Noise"         "Pedometer"    
[21] "PhoneLog"      "Screen"        "TextMessage"   "Weather"      
[25] "Wifi"         
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.581 0.095 4.339 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')

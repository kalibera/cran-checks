
R Under development (unstable) (2022-05-19 r82378) -- "Unsuffered Consequences"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "LSDsensitivity"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('LSDsensitivity')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("elementary.effects.lsd")
> ### * elementary.effects.lsd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: elementary.effects.lsd
> ### Title: Elementary effects sensitivity analysis
> ### Aliases: elementary.effects.lsd
> ### Keywords: methods models design
> 
> ### ** Examples
> 
> # get the example directory name
> path <- system.file( "extdata/ee", package = "LSDsensitivity" )
> 
> # Steps to use this function:
> # 1. define the variables you want to use in the analysis
> # 2. load data from a LSD simulation saved results using read.doe.lsd
> # 3. perform the elementary effects analysis applying elementary.effects.lsd
> 
> lsdVars <- c( "var1", "var2", "var3" )         # the definition of existing variables
> 
> dataSet <- read.doe.lsd( path,                 # data files  folder
+                          "Sim2",               # data files base name (same as .lsd file)
+                          "var1",               # variable name to perform the sensitivity analysis
+                          saveVars = lsdVars )  # LSD variables to keep in dataset
> 
> SA <- elementary.effects.lsd( dataSet,         # LSD experimental data set
+                               p = 4,           # number of levels of the design (as set in LSD)
+                               jump = 2 )       # number of jumps per level (as set in LSD)

Call:
elementary.effects.lsd(data = dataSet, p = 4, jump = 2)

Model runs: 40 
             mu   mu.star    sigma
par1 49.1225372 49.122537 2.562588
par2  0.9270399  1.801904 1.900176
par3  1.5535428  1.875271 1.600947
> 
> print( SA )                                    # show analysis table

Call:
elementary.effects.lsd(data = dataSet, p = 4, jump = 2)

Model runs: 40 
             mu   mu.star    sigma
par1 49.1225372 49.122537 2.562588
par2  0.9270399  1.801904 1.900176
par3  1.5535428  1.875271 1.600947
> plot( SA )                                     # plot analysis chart
> 
> 
> 
> cleanEx()
> nameEx("ergod.test.lsd")
> ### * ergod.test.lsd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ergod.test.lsd
> ### Title: Stationarity and ergodicity tests
> ### Aliases: ergod.test.lsd
> ### Keywords: models htest
> 
> ### ** Examples
> 
> # get the list of file names of example LSD results
> library( LSDinterface )
> files <- list.files.lsd( system.file( "extdata", package = "LSDsensitivity" ),
+                          "Sim1.lsd", recursive = TRUE )
> 
> # Steps to use this function:
> # 1. load data from a LSD simulation saved results using a read.xxx.lsd
> #    function from LSDinterface package (read.3d.lsd, for instance)
> # 2. use ergod.test.lsd to apply the tests on the relevant variables,
> #    replacing "var2", "var3" etc. with your data
> 
> # read data from Monte Carlo runs
> dataSet <- read.3d.lsd( files )
> 
> tests <- ergod.test.lsd( dataSet,              # the data set to use
+                          c( "var2", "var3" ),  # the variables to test
+                          signif = 0.01,        # use 1% significance
+                          digits = 4 )          # show results using 4 digits
> 
> print( tests )
     avg.ADF rej.ADF avg.PP rej.PP avg.KPSS rej.KPSS avg.BDS rej.BDS avg.KS
var2  0.0434  0.0000 0.0100 0.0000   0.0100   0.0000  0.0000  1.0000 0.8204
var3  0.4880  0.0000 0.2527 0.0000   0.0100   0.0000  0.0000  1.0000 0.0915
     rej.KS     AD     WW
var2 0.0000 1.0000 0.0076
var3 0.2000 0.0000 0.0076
> 
> 
> 
> cleanEx()

detaching ‘package:LSDinterface’

> nameEx("kriging.model.lsd")
> ### * kriging.model.lsd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kriging.model.lsd
> ### Title: Fit a Kriging meta-model to a LSD model sample data
> ### Aliases: kriging.model.lsd
> ### Keywords: methods models design
> 
> ### ** Examples
> 
> # get the example directory name
> path <- system.file( "extdata/sobol", package = "LSDsensitivity" )
> 
> # Steps to use this function:
> # 1. define the variables you want to use in the analysis
> # 2. load data from a LSD simulation saved results using read.doe.lsd,
> #    preferrably using two sets of sampled data (DoEs), one for model
> #    estimation and the other for out-of-sample (external) validation
> # 3. fit a Kriging (or polynomial) meta-model using kriging.model.lsd
> 
> lsdVars <- c( "var1", "var2", "var3" )         # the definition of existing variables
> 
> dataSet <- read.doe.lsd( path,                 # data files folder
+                          "Sim3",               # data files base name (same as .lsd file)
+                          "var3",               # variable name to perform the sensitivity analysis
+                          does = 2,             # number of experiments (data + external validation)
+                          saveVars = lsdVars )  # LSD variables to keep in dataset
> 
> model <- kriging.model.lsd( dataSet )          # estimate best Kriging meta-model
Cross validation of alternative models:
 Best trend model: constant 
 Best covariation model: power exp. 

External validation of alternative models:
 Best trend model (RMSE): 1st order poly. 
 Best covariation model (RMSE): Gaussian 
 Best trend model (MAE): constant 
 Best covariation model (MAE): power exp. 
 Best trend model (RMA): constant 
 Best covariation model (RMA): Matern 5/2 

> 
> print( model$comparison )                      # model comparison table
                           Matern 5/2  Matern 3/2   Gaussian   exponent.
Q2 constant trend           0.7457973   0.7753753  0.7876212   0.7274336
Q2 1st order poly. trend    0.8087803   0.8087803  0.7949888   0.8087803
RMSE constant trend        98.3059615 112.7877698 99.6006996 178.3480773
RMSE 1st order poly. trend 94.3006937  91.9841529 91.6471973  91.9841547
MAE constant trend         75.4815096  86.8458761 76.0830277 142.1254474
MAE 1st order poly. trend  77.2929433  75.5429538 75.1310907  75.5429551
RMA constant trend          0.9877632   1.1448993  1.0136434   1.7629305
RMA 1st order poly. trend   1.0523417   1.0125944  1.0062216   1.0125945
                           power exp.
Q2 constant trend           0.8438427
Q2 1st order poly. trend    0.7938076
RMSE constant trend        98.0205174
RMSE 1st order poly. trend 91.9841554
MAE constant trend         74.0109101
MAE 1st order poly. trend  75.5429556
RMA constant trend          1.0193206
RMA 1st order poly. trend   1.0125945
> print( model$estimation.std )                  # model estimation (standardized) table
                   Coefficient Other information                  
trend(intercept)   "301.5324"  "Trend specification"  "constant"  
trend(inclination) "      NA"  "Correlation function" "power exp."
theta(par1)        "  1.3483"  "Cross-sample Q2"      " 0.8438"   
theta(par2)        "  0.8220"  "External RMSE"        "98.0205"   
theta(par3)        "  0.8221"  "External MAE"         "74.0109"   
                   ""          "External RMA"         " 1.0193"   
                   ""          "DoE samples"          "10"        
                   ""          "External samples"     "17"        
> 
> 
> 
> cleanEx()
> nameEx("model.limits.lsd")
> ### * model.limits.lsd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: model.limits.lsd
> ### Title: Find maximum and minimum meta-model responses
> ### Aliases: model.limits.lsd
> ### Keywords: models design
> 
> ### ** Examples
> 
> # get the example directory name
> path <- system.file( "extdata/sobol", package = "LSDsensitivity" )
> 
> # Steps to use this function:
> # 1. define the variables you want to use in the analysis
> # 2. load data from a LSD simulation saved results using read.doe.lsd
> # 3. fit a Kriging (or polynomial) meta-model using kriging.model.lsd
> # 4. identify the most influential factors applying sobol.decomposition.lsd
> # 5. find the maximum and minimum response values for the 3 top-influential
> #    factors/parameters using model.limits.lsd
> # 6. plot the response surface indicating the limit points found
> 
> lsdVars <- c( "var1", "var2", "var3" )          # the definition of existing variables
> 
> dataSet <- read.doe.lsd( path,                  # data files folder
+                          "Sim3",                # data files base name (same as .lsd file)
+                          "var3",                # variable name to perform the sensitivity analysis
+                          does = 2,              # number of experiments (data + external validation)
+                          saveVars = lsdVars )   # LSD variables to keep in dataset
> 
> model <- kriging.model.lsd( dataSet )           # estimate best Kriging meta-model
Cross validation of alternative models:
 Best trend model: constant 
 Best covariation model: power exp. 

External validation of alternative models:
 Best trend model (RMSE): 1st order poly. 
 Best covariation model (RMSE): Gaussian 
 Best trend model (MAE): constant 
 Best covariation model (MAE): power exp. 
 Best trend model (RMA): constant 
 Best covariation model (RMA): Matern 5/2 

> 
> SA <- sobol.decomposition.lsd( dataSet, model ) # find Sobol indexes
Top parameters influencing response surface:
 First: par2 
 Second: par3 
 Third: par1 

> 
> 
> 
> cleanEx()
> nameEx("model.pred.lsd")
> ### * model.pred.lsd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: model.pred.lsd
> ### Title: Predict meta-model response at given point(s)
> ### Aliases: model.pred.lsd
> ### Keywords: models design
> 
> ### ** Examples
> 
> # get the example directory name
> path <- system.file( "extdata/sobol", package = "LSDsensitivity" )
> 
> # Steps to use this function:
> # 1. define the variables you want to use in the analysis
> # 2. load data from a LSD simulation saved results using read.doe.lsd
> # 3. fit a Kriging (or polynomial) meta-model using kriging.model.lsd
> # 4. estimate the meta-model response at any set of points applying
> #    model.pred.lsd
> 
> lsdVars <- c( "var1", "var2", "var3" )         # the definition of existing variables
> 
> dataSet <- read.doe.lsd( path,                 # data files folder
+                          "Sim3",               # data files base name (same as .lsd file)
+                          "var3",               # variable name to perform the sensitivity analysis
+                          does = 2,             # number of experiments (data + external validation)
+                          saveVars = lsdVars )  # LSD variables to keep in dataset
> 
> model <- kriging.model.lsd( dataSet )          # estimate best Kriging meta-model
Cross validation of alternative models:
 Best trend model: constant 
 Best covariation model: power exp. 

External validation of alternative models:
 Best trend model (RMSE): 1st order poly. 
 Best covariation model (RMSE): Gaussian 
 Best trend model (MAE): constant 
 Best covariation model (MAE): power exp. 
 Best trend model (RMA): constant 
 Best covariation model (RMA): Matern 5/2 

> 
> # creates a set of four random points in parameter space
> points <- data.frame( par1 = rnorm( 4 ), par2 = rnorm( 4 ), par3 = rnorm( 4 ) )
> 
> response <- model.pred.lsd( points, model )    # predict model response at the 3 points
> 
> print( points )
        par1       par2        par3
1  1.1936917 -0.1344495 -0.46643822
2 -0.1163955  0.1685091 -2.23978298
3  0.5248586  0.9647328 -0.79506319
4  0.2144215  0.4087789 -0.01995512
> print( response )
$mean
[1] 29.09051 31.55671 32.10886 30.02313

$lower
[1] -410.9889 -420.3872 -409.7128 -409.1813

$upper
[1] 469.1699 483.5006 473.9305 469.2276

> 
> 
> 
> cleanEx()
> nameEx("optim.model.lsd")
> ### * optim.model.lsd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: model.optim.lsd
> ### Title: Find optimal meta-model factor settings
> ### Aliases: model.optim.lsd
> ### Keywords: models design
> 
> ### ** Examples
> 
> # get the example directory name
> path <- system.file( "extdata/sobol", package = "LSDsensitivity" )
> 
> # Steps to use this function:
> # 1. define the variables you want to use in the analysis
> # 2. load data from a LSD simulation saved results using read.doe.lsd
> # 3. fit a Kriging (or polynomial) meta-model using kriging.model.lsd
> # 4. find the factor configuration that produce the minimum (or maximum)
> #    value for the analysis variable defined in step 2
> 
> lsdVars <- c( "var1", "var2", "var3" )         # the definition of existing variables
> 
> dataSet <- read.doe.lsd( path,                 # data files folder
+                          "Sim3",               # data files base name (same as .lsd file)
+                          "var3",               # variable name to perform the sensitivity analysis
+                          does = 2,             # number of experiments (data + external validation)
+                          saveVars = lsdVars )  # LSD variables to keep in dataset
> 
> model <- kriging.model.lsd( dataSet )          # estimate best Kriging meta-model
Cross validation of alternative models:
 Best trend model: constant 
 Best covariation model: power exp. 

External validation of alternative models:
 Best trend model (RMSE): 1st order poly. 
 Best covariation model (RMSE): Gaussian 
 Best trend model (MAE): constant 
 Best covariation model (MAE): power exp. 
 Best trend model (RMA): constant 
 Best covariation model (RMA): Matern 5/2 

> 
> 
> 
> cleanEx()
> nameEx("polynomial.model.lsd")
> ### * polynomial.model.lsd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: polynomial.model.lsd
> ### Title: Fit a polynomial meta-model to a LSD model sample data
> ### Aliases: polynomial.model.lsd
> ### Keywords: methods models design
> 
> ### ** Examples
> 
> # get the example directory name
> path <- system.file( "extdata/sobol", package = "LSDsensitivity" )
> 
> # Steps to use this function:
> # 1. define the variables you want to use in the analysis
> # 2. load data from a LSD simulation saved results using read.doe.lsd,
> #    preferrably using two sets of sampled data (DoEs), one for model
> #    estimation and the other for out-of-sample (external) validation
> # 3. fit the polynomial meta-model using polynomial.model.lsd
> 
> lsdVars <- c( "var1", "var2", "var3" )         # the definition of existing variables
> 
> dataSet <- read.doe.lsd( path,                 # data files folder
+                          "Sim3",               # data files base name (same as .lsd file)
+                          "var3",               # variable name to perform the sensitivity analysis
+                          does = 2,             # number of experiments (data + external validation)
+                          saveVars = lsdVars )  # LSD variables to keep in dataset
> 
> model <- polynomial.model.lsd( dataSet )       # estimate best polynomial meta-model
Cross validation of alternative models:
 Best model (R2): ord=1 int=N 

External validation of alternative models:
 Best model (RMSE): ord=2 int=N 
 Best model (MAE): ord=2 int=N 
 Best model (RMA): ord=1 int=N 

>                                                # using defaults (auto model selection)
> 
> print( model$comparison )                      # model comparison table
              interact=N  interact=Y
R2 order=1     0.9353130   0.9320617
R2 order=2     0.9068918          NA
RMSE order=1 121.2742965 182.8288763
RMSE order=2 119.0876110 868.7380514
MAE order=1   97.1822393 130.3439975
MAE order=2   80.8253494 659.5738711
RMA order=1    1.3990802   1.9106464
RMA order=2    1.7021589   9.4527013
> print( model$estimation.std )                  # model estimation (standardized) table
                        SRC           p-value    
(Intercept)             "439.2"       "2.308e-07"
par1                    "134.6"       "2.059e-03"
par2                    "111.0"       "4.112e-03"
par3                    "164.3"       "1.350e-03"
Model specification     "ord=1 int=N" ""         
f-statistic             "44.38"       "0.0001726"
Cross valid. adj. R2    "0.9353"      ""         
External valid. RMSE    "121.3"       ""         
External valid. MAE     "97.18"       ""         
External valid. RMA     "1.399"       ""         
DoE samples used        "10"          ""         
External valid. samples "17"          ""         
> 
> 
> 
> cleanEx()
> nameEx("read.doe.lsd")
> ### * read.doe.lsd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read.doe.lsd
> ### Title: Read a set of experimental data from a LSD model
> ### Aliases: read.doe.lsd
> ### Keywords: interface file datasets datagen design
> 
> ### ** Examples
> 
> # get the example directory name
> path <- system.file( "extdata/sobol", package = "LSDsensitivity" )
> 
> # Steps to use this function:
> # 1. define the variables you want to use in the analysis
> # 2. optionally, define special handling functions (see examples below)
> # 3. load data from a LSD simulation saved results using read.doe.lsd
> # 4. perform the elementary effects analysis applying elementary.effects.lsd
> 
> # the definition of existing, to take log and to be added variables
> lsdVars <- c( "var1", "var2", "var3" )
> logVars <- c( "var1", "var3" )
> newVars <- c( "var4" )
> 
> # load data from a LSD simulation baseline configuration named "Sim1.lsd" to
> # perform sensitivity analysis on the variable named "var1"
> # there are two groups of sampled data (DoEs) created by LSD being read
> # just use no handling functions for now, see possible examples below
> dataSet <- read.doe.lsd( path,                 # data files folder
+                          "Sim3",               # data files base name (same as .lsd file)
+                          "var3",               # variable name to perform the sens. analysis
+                          does = 2,             # # of experiments (data + external validation)
+                          iniDrop = 0,          # initial time steps to drop (0=none)
+                          nKeep = -1,           # number of time steps to keep (-1=all)
+                          saveVars = lsdVars,   # LSD variables to keep in dataset
+                          addVars = newVars,    # new variables to add to the LSD dataset
+                          eval.stat = "median", # use median to evaluate runs
+                          rm.temp = FALSE,      # reuse temporary speedup files
+                          rm.outl = FALSE,      # remove outliers from dataset
+                          lim.outl = 10,        # limit non-outliers deviation (# of std. devs.)
+                          quietly = FALSE )     # show information during processing

Sample # 18 

Data files:  /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_18_52.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_18_53.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_18_54.res.gz 

Number of MC runs:  3 
Number of periods:  100 
Number of used periods:  100 
Number of variables:  3 

Reading data from files...

Number of variables:  4 
Number of samples:  1200 


Sample # 19 

Data files:  /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_19_55.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_19_56.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_19_57.res.gz 

Number of MC runs:  3 
Number of periods:  100 
Number of used periods:  100 
Number of variables:  3 

Reading data from files...

Number of variables:  4 
Number of samples:  1200 


Sample # 20 

Data files:  /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_20_58.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_20_59.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_20_60.res.gz 

Number of MC runs:  3 
Number of periods:  100 
Number of used periods:  100 
Number of variables:  3 

Reading data from files...

Number of variables:  4 
Number of samples:  1200 


Sample # 21 

Data files:  /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_21_61.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_21_62.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_21_63.res.gz 

Number of MC runs:  3 
Number of periods:  100 
Number of used periods:  100 
Number of variables:  3 

Reading data from files...

Number of variables:  4 
Number of samples:  1200 


Sample # 22 

Data files:  /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_22_64.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_22_65.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_22_66.res.gz 

Number of MC runs:  3 
Number of periods:  100 
Number of used periods:  100 
Number of variables:  3 

Reading data from files...

Number of variables:  4 
Number of samples:  1200 


Sample # 23 

Data files:  /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_23_67.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_23_68.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_23_69.res.gz 

Number of MC runs:  3 
Number of periods:  100 
Number of used periods:  100 
Number of variables:  3 

Reading data from files...

Number of variables:  4 
Number of samples:  1200 


Sample # 24 

Data files:  /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_24_70.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_24_71.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_24_72.res.gz 

Number of MC runs:  3 
Number of periods:  100 
Number of used periods:  100 
Number of variables:  3 

Reading data from files...

Number of variables:  4 
Number of samples:  1200 


Sample # 25 

Data files:  /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_25_73.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_25_74.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_25_75.res.gz 

Number of MC runs:  3 
Number of periods:  100 
Number of used periods:  100 
Number of variables:  3 

Reading data from files...

Number of variables:  4 
Number of samples:  1200 


Sample # 26 

Data files:  /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_26_76.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_26_77.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_26_78.res.gz 

Number of MC runs:  3 
Number of periods:  100 
Number of used periods:  100 
Number of variables:  3 

Reading data from files...

Number of variables:  4 
Number of samples:  1200 


Sample # 27 

Data files:  /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_27_79.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_27_80.res.gz /var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_27_81.res.gz 

Number of MC runs:  3 
Number of periods:  100 
Number of used periods:  100 
Number of variables:  3 

Reading data from files...

Number of variables:  4 
Number of samples:  1200 

Warning in gzfile(file, "wb") :
  cannot open compressed file '/var/scratch2ro/tomas/cran/rlibro/lib/LSDsensitivity/extdata/sobol/Sim3_18_27.RData', probable reason 'Read-only file system'
Error in value[[3L]](cond) : 
  Cannot write DoE response file to disk (read-only?)
Calls: read.doe.lsd ... tryCatch -> tryCatchList -> tryCatchOne -> <Anonymous>
Execution halted

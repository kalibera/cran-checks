
R Under development (unstable) (2024-11-13 r87325) -- "Unsuffered Consequences"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rgl2gltf"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('rgl2gltf')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Gltf")
> ### * Gltf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Gltf
> ### Title: R6 Class for glTF file objects
> ### Aliases: Gltf
> 
> ### ** Examples
> 
> 
> ## ------------------------------------------------
> ## Method `Gltf$print`
> ## ------------------------------------------------
> 
> 
> 
> 
> cleanEx()
> nameEx("as.gltf")
> ### * as.gltf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.gltf
> ### Title: Produce glTF objects
> ### Aliases: as.gltf as.gltf.mesh3d as.gltf.rglscene as.gltf.default
> 
> ### ** Examples
> 
> cube <- rgl::rotate3d(rgl::cube3d(col = "red"), -pi/10, 1,0,0)
> gltf <- as.gltf(cube)
> rgl::plot3d(gltf)
> gltf$closeBuffers()
> 
> 
> 
> cleanEx()
> nameEx("findEntry")
> ### * findEntry
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findEntry
> ### Title: Find a component of a recursive object
> ### Aliases: findEntry namePattern hasClass
> 
> ### ** Examples
> 
> x <- list( a = list( b = list(c(d="A", e="B"), 1L, 1:3)))
> locations <- findEntry(x, namePattern("e"))
> locations
[[1]]
   $a    $b [[1]] ['e'] 
    1     1     1     2 

> 
> #This shows how the result can be used:
> x[[locations[[1]]]]
[1] "B"
> expr <- paste0(c("x", names(locations[[1]])), collapse = "")
> expr
[1] "x$a$b[[1]]['e']"
> eval(parse(text=expr))
  e 
"B" 
> 
> findEntry(x, hasClass("integer"))
[[1]]
   $a    $b [[2]] 
    1     1     2 

[[2]]
   $a    $b [[3]] 
    1     1     3 

> 
> 
> 
> cleanEx()
> nameEx("gltfWidget")
> ### * gltfWidget
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gltfWidget
> ### Title: Create a widget for a glTF display.
> ### Aliases: gltfWidget
> 
> ### ** Examples
> 
> if ((interactive() || rgl::in_pkgdown_example()) && requireNamespace("manipulateWidget")) {
+   gltf <- readGLB(system.file("glb/RiggedSimple.glb", package = "rgl2gltf"))
+   gltfWidget(gltf)
+ }
> 
> 
> 
> 
> cleanEx()
> nameEx("playgltf")
> ### * playgltf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: playgltf
> ### Title: Play an animated glTF object.
> ### Aliases: playgltf showNodes
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("readGLB")
> ### * readGLB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readGLB
> ### Title: Read a GLB file.
> ### Aliases: readGLB
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("readglTF")
> ### * readglTF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readglTF
> ### Title: Read a glTF file
> ### Aliases: readglTF
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("setPBRshaders")
> ### * setPBRshaders
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setPBRshaders
> ### Title: Set shaders for physically based rendering.
> ### Aliases: setPBRshaders
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("showTags")
> ### * showTags
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: showTags
> ### Title: Debugging tool: show tags for objects in rgl scene
> ### Aliases: showTags
> 
> ### ** Examples
> 
> example("plot3d", package = "rgl")

plot3d>   open3d()
glX 
  3 

plot3d>   x <- sort(rnorm(1000))

plot3d>   y <- rnorm(1000)

plot3d>   z <- rnorm(1000) + atan2(x, y)

plot3d>   plot3d(x, y, z, col = rainbow(1000))
> showTags()
> 
> 
> 
> cleanEx()

detaching ‘package:rgl’

> nameEx("writeglTF")
> ### * writeglTF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeglTF
> ### Title: Write a glTF or GLB file.
> ### Aliases: writeglTF writeGLB
> 
> ### ** Examples
> 
> filename <- tempfile(fileext = ".glb")
> writeGLB(as.gltf(rgl::cube3d(col = "red")), filename)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.813 0.269 2.151 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')

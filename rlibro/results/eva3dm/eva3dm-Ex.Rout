
R Under development (unstable) (2024-11-21 r87360) -- "Unsuffered Consequences"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "eva3dm"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('eva3dm')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("atr")
> ### * atr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: atr
> ### Title: Read and write attributes on a NetCDF file
> ### Aliases: atr
> 
> ### ** Examples
> 
> nc <- paste0(system.file("extdata",package="eva3dm"),'/wrfinput_d01')
> atr(nc,0)
global attributes:
TITLE START_DATE SIMULATION_START_DATE WEST-EAST_GRID_DIMENSION SOUTH-NORTH_GRID_DIMENSION BOTTOM-TOP_GRID_DIMENSION DX DY GRIDTYPE DIFF_OPT KM_OPT DAMP_OPT DAMPCOEF KHDIF KVDIF MP_PHYSICS RA_LW_PHYSICS RA_SW_PHYSICS SF_SFCLAY_PHYSICS SF_SURFACE_PHYSICS BL_PBL_PHYSICS CU_PHYSICS SF_LAKE_PHYSICS SURFACE_INPUT_SOURCE SST_UPDATE GRID_FDDA GFDDA_INTERVAL_M GFDDA_END_H GRID_SFDDA SGFDDA_INTERVAL_M SGFDDA_END_H HYPSOMETRIC_OPT USE_THETA_M USE_MAXW_LEVEL USE_TROP_LEVEL GWD_OPT SF_URBAN_PHYSICS SF_OCEAN_PHYSICS SIMULATION_INITIALIZATION_TYPE WEST-EAST_PATCH_START_UNSTAG WEST-EAST_PATCH_END_UNSTAG WEST-EAST_PATCH_START_STAG WEST-EAST_PATCH_END_STAG SOUTH-NORTH_PATCH_START_UNSTAG SOUTH-NORTH_PATCH_END_UNSTAG SOUTH-NORTH_PATCH_START_STAG SOUTH-NORTH_PATCH_END_STAG BOTTOM-TOP_PATCH_START_UNSTAG BOTTOM-TOP_PATCH_END_UNSTAG BOTTOM-TOP_PATCH_START_STAG BOTTOM-TOP_PATCH_END_STAG GRID_ID PARENT_ID I_PARENT_START J_PARENT_START PARENT_GRID_RATIO DT CEN_LAT CEN_LON TRUELAT1 TRUELAT2 MOAD_CEN_LAT STAND_LON POLE_LAT POLE_LON GMT JULYR JULDAY MAP_PROJ MAP_PROJ_CHAR MMINLU NUM_LAND_CAT ISWATER ISLAKE ISICE ISURBAN ISOILWATER HYBRID_OPT ETACNULL
> atr(nc,'Times')
variable Times attritutes:
not found
NULL
> atr(nc,'XLAT')
variable XLAT attritutes:
MemoryOrder description units stagger FieldTypeNULL
> atr(nc,'XLONG')
variable XLONG attritutes:
MemoryOrder description units stagger FieldTypeNULL
> 
> atr(nc,'XLONG','MemoryOrder')
XLONG attribute MemoryOrder:
XY
[1] "XY"
> atr(nc,'XLONG','description')
XLONG attribute description:
LONGITUDE, WEST IS NEGATIVE
[1] "LONGITUDE, WEST IS NEGATIVE"
> atr(nc,'XLONG','units')
XLONG attribute units:
degree east
[1] "degree east"
> atr(nc,'XLONG','stagger')
XLONG attribute stagger:
empty
[1] ""
> atr(nc,'XLONG','FieldType')
XLONG attribute FieldType:
104
[1] 104
> 
> 
> 
> 
> cleanEx()
> nameEx("cate")
> ### * cate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cate
> ### Title: Calculate categorical statistics in related to a threshold
> ### Aliases: cate
> 
> ### ** Examples
> 
> data <- 0.02 * 1:100
> set.seed(666)
> model  <- abs(rnorm(100,0.01))
> 
> oldpar <- par(pty="s")
> cate(model = model, observation = data, threshold = 1,
+      to.plot = TRUE, rname = 'example')
          n  Obs       Sim thr  A      CSI POD  B      FAR HSS PSS
example 100 1.01 0.8272308   1 43 18.57143  26 66 60.60606 -14 -14
> par(oldpar)
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("daily")
> ### * daily
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: daily
> ### Title: Calculate daily mean, min or max
> ### Aliases: daily
> 
> ### ** Examples
> 
> sites <- c("OAKB")
> for(site in sites){
+ cat('downloading METAR from:',site,'...\n')
+ DATA <- riem::riem_measures(station    = sites,
+                             date_start = "2012-01-01",
+                             date_end   = "2012-02-01")
+ }
downloading METAR from: OAKB ...
> data_daily_mean <- daily(DATA,time = 'valid')
processing daily statistcis ... 
> data_daily_min  <- daily(DATA[1:7],time = 'valid',stat = min)
processing daily statistcis ... 
> data_daily_max  <- daily(DATA[1:7],time = 'valid',stat = max)
processing daily statistcis ... 
> 
> 
> 
> 
> cleanEx()
> nameEx("eva")
> ### * eva
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: eva
> ### Title: Model statistical evaluation
> ### Aliases: eva
> 
> ### ** Examples
> 
> model <- readRDS(paste0(system.file("extdata",package="eva3dm"),
+                         "/model.Rds"))
> obs   <- readRDS(paste0(system.file("extdata",package="eva3dm"),
+                         "/obs.Rds"))
> 
> # if there is no observed data
> # the function return an empty row
> table <- eva(mo = model, ob = obs, site = "VVIbes")
VVIbes has only 0 valid observations (lesser than 8 obs)
> print(table)
       n Obs Sim  r IOA FA2 RMSE MB ME NMB (%) NME (%)
VVIbes 0  NA  NA NA  NA  NA   NA NA NA      NA      NA
> 
> # if the site are not in the input data frame a message is displayed
> # and the function return an empty row
> table <- eva(mo = model, ob = obs, site = "Ibirapuera")
Ibirapuera not found in observation input
> print(table)
           n Obs Sim  r IOA FA2 RMSE MB ME NMB (%) NME (%)
Ibirapuera 0  NA  NA NA  NA  NA   NA NA NA      NA      NA
> 
> # calculating statistical with a few observed values
> table <- eva(mo = model, ob = obs, site = "Americana")
Americana has 227 valid observations
> print(table)
            n      Obs      Sim         r       IOA       FA2     RMSE
Americana 227 40.92952 18.18197 0.6492022 0.5934335 0.4229075 32.47269
                 MB       ME   NMB (%)  NME (%)
Americana -22.74754 24.10165 -55.57735 58.88575
> 
> # calculating categorical (using 2 for threshold) with a few observed values
> table <- eva(mo = model, ob = obs, site = "Americana",
+              eval_function = cate, threshold = 2)
Americana has 227 valid observations
> print(table)
            n      Obs      Sim thr        A      CSI      POD        B
Americana 227 40.92952 18.18197   2 93.39207 93.36283 97.23502 101.3825
               FAR     HSS      PSS
Americana 4.090909 8.44313 7.235023
> 
> # calculating categorical (using 2 for threshold) with a few observed values
> table <- eva(mo = model, ob = obs, site = "Americana",
+              eval_function = cate, threshold = 10)
Americana has 227 valid observations
> print(table)
            n      Obs      Sim thr        A      CSI      POD        B   FAR
Americana 227 40.92952 18.18197  10 74.00881 71.90476 75.12438 79.60199 5.625
               HSS      PSS
Americana 24.01997 40.50899
> 
> 
> 
> 
> cleanEx()
> nameEx("extract_max_8h")
> ### * extract_max_8h
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extract_max_8h
> ### Title: Create a NetCDF file with the surface maximum of O3
> ### Aliases: extract_max_8h
> 
> ### ** Examples
> 
> dir.create(file.path(tempdir(), "MDA8"))
> folder <- system.file("extdata",package="eva3dm")
> wrf_file <- paste0(folder,"/test_small_o3.nc")
> extract_max_8h(filelist = wrf_file,
+                prefix = paste0(file.path(tempdir(),"MDA8"),'/mean'),
+                field = '3d')
extracting 8h max of o3 field 3d units: ug m-3 
reading: /var/scratch2ro/tomas/cran/rlibro/lib/eva3dm/extdata/test_small_o3.nc file 1 of 1 
min: 2.010639e-13 mean: 23.42075 max: 99.85495 
total times: 24 
output: /var/scratch2/tomas/tmp/Rtmpocw48t/MDA8/mean.o3.nc 
> 
> 
> 
> 
> cleanEx()
> nameEx("extract_mean")
> ### * extract_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extract_mean
> ### Title: Create a NetCDF file with the surface mean
> ### Aliases: extract_mean
> 
> ### ** Examples
> 
> dir.create(file.path(tempdir(), "MEAN"))
> folder <- system.file("extdata",package="eva3dm")
> wrf_file <- paste0(folder,"/wrf.day1.o3.nc")
> extract_mean(filelist = wrf_file,prefix = paste0(file.path(tempdir(),"MEAN"),'/mean'))
extracting mean of o3 field 4d 
reading: /var/scratch2ro/tomas/cran/rlibro/lib/eva3dm/extdata/wrf.day1.o3.nc file 1 of 1 
min: 2.123069e-05 mean: 0.007767247 max: 0.03175572 
total times: 1 
output: /var/scratch2/tomas/tmp/Rtmpocw48t/MEAN/mean.o3.nc 
> 
> 
> 
> 
> cleanEx()
> nameEx("extract_serie")
> ### * extract_serie
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extract_serie
> ### Title: Extract time series of wrf file list of lat/lon
> ### Aliases: extract_serie
> 
> ### ** Examples
> 
> cat('Example 1: METAR site list\n')
Example 1: METAR site list
> sites <- readRDS(paste0(system.file("extdata",package="eva3dm"),"/sites_METAR.Rds"))
> 
> cat('Example 2: AERONET site list\n')
Example 2: AERONET site list
> sites <- readRDS(paste0(system.file("extdata",package="eva3dm"),"/sites_AERONET.Rds"))
> 
> cat('Example 3: list of INMET stations on Brazil\n')
Example 3: list of INMET stations on Brazil
> sites <- readRDS(paste0(system.file("extdata",package="eva3dm"),"/sites_INMET.Rds"))
> 
> cat('Example 4: list of Air Quality stations on Brazil\n')
Example 4: list of Air Quality stations on Brazil
> sites <- readRDS(paste0(system.file("extdata",package="eva3dm"),"/sites_AQ_BR.Rds"))
> 
> files    <- dir(path = system.file("extdata",package="eva3dm"),
+                 pattern = 'wrf.day',
+                 full.names = TRUE)
> dir.create(file.path(tempdir(),"SERIE"))
> folder <- file.path(tempdir(),"SERIE")
> 
> # extract data for 3 locations
> extract_serie(filelist = files, point = sites[1:3,],prefix = paste0(folder,'/serie'))
extracting series of o3 field 4d for 3 points
dim of lat/lon: 125 125 
used dim of lat/lon: 125 125 
inside lat / lon range: 3 points
calculating distances...
             lat       lon    name agency            class         city state
BA0001 -12.68638 -38.33360 Gravatá  INEMA Não classificada     Camaçari    BA
BA0002 -12.63026 -38.35853   Cobre  INEMA Não classificada Dias D'Ávila    BA
BA0003 -12.80115 -38.22397  Areias  INEMA Não classificada     Camaçari    BA
       start   i  j model_lat model_lon
BA0001  2000 110 67 -12.70324 -38.39191
BA0002  2000 110 67 -12.70324 -38.39191
BA0003  2000 110 67 -12.70324 -38.39191
reading o3 : /var/scratch2ro/tomas/cran/rlibro/lib/eva3dm/extdata/wrf.day1.o3.nc file 1 of 3 
reading o3 : /var/scratch2ro/tomas/cran/rlibro/lib/eva3dm/extdata/wrf.day2.o3.nc file 2 of 3 
reading o3 : /var/scratch2ro/tomas/cran/rlibro/lib/eva3dm/extdata/wrf.day3.o3.nc file 3 of 3 
output: /var/scratch2/tomas/tmp/Rtmpocw48t/SERIE/serie.o3.Rds 
> 
> 
> 
> 
> cleanEx()
> nameEx("grapes-IN-grapes")
> ### * grapes-IN-grapes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: %IN%
> ### Title: Returns the common columns
> ### Aliases: %IN%
> 
> ### ** Examples
> 
> times <- seq(as.POSIXct('2024-01-01',tz = 'UTC'),
+              as.POSIXct('2024-01-02',tz = 'UTC'),
+              by = 'hour')
> randon_stuff <- rnorm(25,10)
> 
> observation <- data.frame(date   = times,
+                           site_1 = randon_stuff,
+                           site_3 = randon_stuff,
+                           site_4 = randon_stuff,
+                           site_5 = randon_stuff,
+                           site_6 = randon_stuff,
+                           site_7 = randon_stuff)
> 
> model_d01 <- data.frame(date  = times,
+                         site_1=randon_stuff+1,
+                         site_2=randon_stuff+2,
+                         site_3=randon_stuff+3,
+                         site_4=randon_stuff+4)
> 
> model_d02 <- data.frame(date  = times,
+                         site_1=randon_stuff-1,
+                         site_3=randon_stuff-3)
> 
> # multiline
> model_d01_in_d02 <- model_d01 %IN% model_d02
using model_d01 in model_d02 
> eva(mo = model_d01_in_d02, ob = observation, rname = 'd01 in d02')
combining all sites...
site_1  site_3  ...
ALL has 50 valid observations
            n      Obs      Sim         r       IOA FA2     RMSE MB ME  NMB (%)
d01 in d02 50 10.16867 12.16867 0.6813705 0.4799814   1 2.236068  2  2 19.66826
            NME (%)
d01 in d02 19.66826
> 
> # or single line
> eva(mo = model_d01 %IN% model_d02, ob = observation, rname = 'd01 in d02')
using model_d01 in model_d02 
combining all sites...
site_1  site_3  ...
ALL has 50 valid observations
            n      Obs      Sim         r       IOA FA2     RMSE MB ME  NMB (%)
d01 in d02 50 10.16867 12.16867 0.6813705 0.4799814   1 2.236068  2  2 19.66826
            NME (%)
d01 in d02 19.66826
> # or
> eva(mo = model_d01, ob = observation %IN% model_d02, rname = 'd01 in d02')
using observation in model_d02 
combining all sites...
site_1  site_3  ...
ALL has 50 valid observations
            n      Obs      Sim         r       IOA FA2     RMSE MB ME  NMB (%)
d01 in d02 50 10.16867 12.16867 0.6813705 0.4799814   1 2.236068  2  2 19.66826
            NME (%)
d01 in d02 19.66826
> 
> 
> 
> 
> cleanEx()
> nameEx("grapes-at-grapes")
> ### * grapes-at-grapes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: %at%
> ### Title: Combine stats and site list to overlay plot
> ### Aliases: %at%
> 
> ### ** Examples
> 
> 
> sites<- readRDS(paste0(system.file("extdata",package="eva3dm"),"/sites_AQ_BR.Rds"))
> model<- readRDS(paste0(system.file("extdata",package="eva3dm"),"/model.Rds"))
> obs  <- readRDS(paste0(system.file("extdata",package="eva3dm"),"/obs.Rds"))
> 
> stats <- eva(mo = model, ob = obs, site = 'Americana')
Americana has 227 valid observations
> stats <- eva(mo = model, ob = obs, site = 'SAndre',table = stats)
SAndre has 207 valid observations
> stats <- eva(mo = model, ob = obs, site = 'VVIbes',table = stats)
VVIbes has only 0 valid observations (lesser than 8 obs)
> 
> print(stats)
            n      Obs      Sim         r       IOA       FA2     RMSE
Americana 227 40.92952 18.18197 0.6492022 0.5934335 0.4229075 32.47269
SAndre    207 60.62802 15.66744 0.6246762 0.4813952 0.1449275 59.21330
VVIbes      0       NA       NA        NA        NA        NA       NA
                 MB       ME   NMB (%)  NME (%)
Americana -22.74754 24.10165 -55.57735 58.88575
SAndre    -44.96058 45.64932 -74.15808 75.29409
VVIbes           NA       NA        NA       NA
> 
> geo_stats <- stats %at% sites
georeferencing stats at sites 
> 
> print(geo_stats)
 class       : SpatVector 
 geometry    : none 
 dimensions  : 0, 0  (geometries, attributes)
 extent      : 0, 0, 0, 0  (xmin, xmax, ymin, ymax)
 coord. ref. :  
> 
> 
> 
> 
> cleanEx()
> nameEx("hourly")
> ### * hourly
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hourly
> ### Title: Calculate hourly mean, min or max
> ### Aliases: hourly
> 
> ### ** Examples
> 
> sites <- c("OAHR")
> for(site in sites){
+ cat('downloading METAR from:',site,'...\n')
+ DATA <- riem::riem_measures(station    = sites,
+                             date_start = "2012-01-01",
+                             date_end   = "2012-02-01")
+ }
downloading METAR from: OAHR ...
> data_hourly_mean <- hourly(DATA,time = 'valid')
processing hourly data ... 
> data_hourly_min  <- hourly(DATA[1:7],time = 'valid',stat = min)
processing hourly data ... 
> data_hourly_max  <- hourly(DATA[1:7],time = 'valid',stat = max)
processing hourly data ... 
> 
> 
> 
> 
> cleanEx()
> nameEx("interp")
> ### * interp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: interp
> ### Title: Interpolation (project and resample)
> ### Aliases: interp
> 
> ### ** Examples
> 
> model_o3 <- terra::rast(paste0(system.file("extdata",package="eva3dm"),
+                               "/camx_no2.Rds"))
> omi_o3   <- terra::rast(paste0(system.file("extdata",package="eva3dm"),
+                               "/omi_no2.Rds"))
> 
> # interpolate omi O3 column to model grid
> omi_o3c_interp_model <- interp(omi_o3,model_o3)
> 
> # interpolate model o3 column to omi grid
> model_o3c_interp_omi <- interp(omi_o3,model_o3)
> 
> 
> 
> 
> cleanEx()
> nameEx("legend_range")
> ### * legend_range
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: legend_range
> ### Title: Plot a legend with the range of values
> ### Aliases: legend_range
> 
> ### ** Examples
> 
> x <- 1:10 + rnorm(10,sd = .4)
> plot(x,ty='l')
> legend_range(x)
> 
> 
> 
> 
> cleanEx()
> nameEx("ma8h")
> ### * ma8h
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ma8h
> ### Title: Calculate 8-hour moving average
> ### Aliases: ma8h
> 
> ### ** Examples
> 
> model_file <- paste(system.file("extdata", package = "eva3dm"),
+                                 "/model_o3_ugm3_36km.Rds", sep="")
> model      <- readRDS(model_file)
> model_8h   <- ma8h(model)
processing hourly data ... 
processing 8-hour moving avarage ... 
> plot(model$date,model$Campinas, pch = 19,
+      main = expression(O[3]~~'['*mu*g*m^-3*']'))
> points(model_8h$date,model_8h$Campinas, col = 'blue', pch = 19)
> legend('topleft',bty = 'n',
+        pch = 19,
+        legend = c('hourly','8h-mov average'),
+        col = c('black','blue'))
> 
> 
> 
> cleanEx()
> nameEx("mda8")
> ### * mda8
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mda8
> ### Title: Maximum Daily 8-hr Average
> ### Aliases: mda8
> 
> ### ** Examples
> 
> model_file <- paste(system.file("extdata", package = "eva3dm"),
+                     "/model_o3_ugm3_36km.Rds", sep="")
> model      <- readRDS(model_file)
> model_mda8 <- mda8(model)
processing hourly data ... 
processing 8-hour moving avarage ... 
processing daily maximum ... 
> model_8h   <- ma8h(model)
processing hourly data ... 
processing 8-hour moving avarage ... 
> plot(model$date,model$Campinas, pch = 19,
+      main = expression(O[3]~~'['*mu*g*m^-3*']'))
> points(model_8h$date,model_8h$Campinas, col = 'blue', pch = 19)
> points(model_mda8$date + 17*60*60,model_mda8$Campinas,
+        col = 'red', pch = 4, cex = 2)
> legend('topleft',bty = 'n',
+        pch = c(19,19,4),
+        legend = c('hourly','8h-mov average','MD8A'),
+        col = c('black','blue','red'))
> 
> 
> 
> cleanEx()
> nameEx("ncdump")
> ### * ncdump
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ncdump
> ### Title: Print a 'ncdump -h' command
> ### Aliases: ncdump
> 
> ### ** Examples
> 
> ncdump(file = paste0(system.file("extdata",package="eva3dm"),
+                      '/wrfinput_d01'))
File /var/scratch2ro/tomas/cran/rlibro/lib/eva3dm/extdata/wrfinput_d01 (NC_FORMAT_CLASSIC):

     3 variables (excluding dimension variables):
        char Times[DateStrLen,Time]   
        float XLAT[west_east,south_north]   
            MemoryOrder: XY
            description: LATITUDE, SOUTH IS NEGATIVE
            units: degree north
            stagger: 
            FieldType: 104
        float XLONG[west_east,south_north]   
            MemoryOrder: XY
            description: LONGITUDE, WEST IS NEGATIVE
            units: degree east
            stagger: 
            FieldType: 104

     4 dimensions:
        DateStrLen  Size:19 
        Time  Size:1   *** is unlimited *** 
        west_east  Size:149 
        south_north  Size:99 

    79 global attributes:
        TITLE:  OUTPUT FROM REAL_EM V3.9.1.1 PREPROCESSOR
        START_DATE: 2011-08-01_00:00:00
        SIMULATION_START_DATE: 2011-08-01_00:00:00
        WEST-EAST_GRID_DIMENSION: 150
        SOUTH-NORTH_GRID_DIMENSION: 100
        BOTTOM-TOP_GRID_DIMENSION: 35
        DX: 9000
        DY: 9000
        GRIDTYPE: C
        DIFF_OPT: 1
        KM_OPT: 4
        DAMP_OPT: 3
        DAMPCOEF: 0.200000002980232
        KHDIF: 0
        KVDIF: 0
        MP_PHYSICS: 10
        RA_LW_PHYSICS: 4
        RA_SW_PHYSICS: 4
        SF_SFCLAY_PHYSICS: 1
        SF_SURFACE_PHYSICS: 2
        BL_PBL_PHYSICS: 1
        CU_PHYSICS: 11
        SF_LAKE_PHYSICS: 0
        SURFACE_INPUT_SOURCE: 1
        SST_UPDATE: 0
        GRID_FDDA: 0
        GFDDA_INTERVAL_M: 0
        GFDDA_END_H: 0
        GRID_SFDDA: 0
        SGFDDA_INTERVAL_M: 0
        SGFDDA_END_H: 0
        HYPSOMETRIC_OPT: 2
        USE_THETA_M: 0
        USE_MAXW_LEVEL: 0
        USE_TROP_LEVEL: 0
        GWD_OPT: 0
        SF_URBAN_PHYSICS: 1
        SF_OCEAN_PHYSICS: 0
        SIMULATION_INITIALIZATION_TYPE: REAL-DATA CASE
        WEST-EAST_PATCH_START_UNSTAG: 1
        WEST-EAST_PATCH_END_UNSTAG: 149
        WEST-EAST_PATCH_START_STAG: 1
        WEST-EAST_PATCH_END_STAG: 150
        SOUTH-NORTH_PATCH_START_UNSTAG: 1
        SOUTH-NORTH_PATCH_END_UNSTAG: 99
        SOUTH-NORTH_PATCH_START_STAG: 1
        SOUTH-NORTH_PATCH_END_STAG: 100
        BOTTOM-TOP_PATCH_START_UNSTAG: 1
        BOTTOM-TOP_PATCH_END_UNSTAG: 34
        BOTTOM-TOP_PATCH_START_STAG: 1
        BOTTOM-TOP_PATCH_END_STAG: 35
        GRID_ID: 1
        PARENT_ID: 1
        I_PARENT_START: 1
        J_PARENT_START: 1
        PARENT_GRID_RATIO: 1
        DT: 45
        CEN_LAT: -23.5499954223633
        CEN_LON: -45
        TRUELAT1: -23
        TRUELAT2: -24
        MOAD_CEN_LAT: -23.5499954223633
        STAND_LON: -45
        POLE_LAT: 90
        POLE_LON: 0
        GMT: 0
        JULYR: 2011
        JULDAY: 213
        MAP_PROJ: 1
        MAP_PROJ_CHAR: Lambert Conformal
        MMINLU: MODIFIED_IGBP_MODIS_NOAH
        NUM_LAND_CAT: 21
        ISWATER: 17
        ISLAKE: 21
        ISICE: 15
        ISURBAN: 13
        ISOILWATER: 14
        HYBRID_OPT: -1
        ETAC: 0
> 
> 
> 
> 
> cleanEx()
> nameEx("overlay")
> ### * overlay
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: overlay
> ### Title: Plot or add points using a color scale
> ### Aliases: overlay
> 
> ### ** Examples
> 
> sp<- terra::vect(paste0(system.file("extdata",package="eva3dm"),"/masp.shp"))
> BR<- terra::vect(paste0(system.file("extdata",package="eva3dm"),"/BR.shp"))
> 
> p    <- readRDS(paste0(system.file("extdata",package="eva3dm"),"/sites_AQ_BR.Rds"))
> p$id      <- row.names(p)
> point     <- terra::vect(p)
> point$NMB <- 1:45 - 20 # some values to plot
> 
> terra::plot(BR, main = 'add points',xlim = c(-52,-37),ylim = c(-25,-18))
> terra::lines(BR)
> terra::lines(sp, col = 'gray')
> overlay(point,point$NMB,cex = 1.4, add = TRUE)
> 
> overlay(point,point$NMB,cex = 1.4, add = FALSE, main = 'new plot')
> terra::lines(BR)
> terra::lines(sp, col = 'gray')
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_diff")
> ### * plot_diff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_diff
> ### Title: Plot the difference from two SpatRaster objects
> ### Aliases: plot_diff
> 
> ### ** Examples
> 
> 
> folder <- system.file("extdata",package="eva3dm")
> wrf    <- paste0(folder,"/wrfinput_d01")
> A      <- wrf_rast(wrf,'XLAT')
> terra::units(A) <- 'degrees'
> B      <- wrf_rast(wrf,'XLONG')
> plot_diff(A,B,int = 2)
> 
> 
> 
> cleanEx()
> nameEx("plot_rast")
> ### * plot_rast
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_rast
> ### Title: Plot rast (SpatRaster) object
> ### Aliases: plot_rast
> 
> ### ** Examples
> 
> wrf <- paste(system.file("extdata", package = "eva3dm"),
+                          "/wrfinput_d01", sep="")
> 
> r <- wrf_rast(file=wrf, name='XLAT')
> 
> plot_rast(r)
> 
> 
> 
> 
> cleanEx()
> nameEx("q2rh")
> ### * q2rh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: q2rh
> ### Title: Convert absolute humidity to relative humidity
> ### Aliases: q2rh
> 
> ### ** Examples
> 
> # for a single value (or same length vectors)
> q2rh(q = 0.0002038, t = 29.3, p = 100800)
[1] 80.76917
> 
> # using all data.frames
> times <- seq(as.POSIXct('2024-01-01',tz = 'UTC'),
+              as.POSIXct('2024-01-02',tz = 'UTC'),
+              by = 'hour')[1:5]
> q2   <- data.frame(time = times, a = rep(0.0002038,5))
> temp <- data.frame(time = times, a = rep(     29.3,5))
> pres <- data.frame(time = times, a = rep(   100800,5))
> q2rh(q = q2, t = temp, p = pres)
                 time        a
1 2024-01-01 00:00:00 80.76917
2 2024-01-01 01:00:00 80.76917
3 2024-01-01 02:00:00 80.76917
4 2024-01-01 03:00:00 80.76917
5 2024-01-01 04:00:00 80.76917
> 
> # using data.frame for q and t (p is cte.)
> q2rh(q = q2, t = temp, p = 100000)
                 time        a
1 2024-01-01 00:00:00 80.12815
2 2024-01-01 01:00:00 80.12815
3 2024-01-01 02:00:00 80.12815
4 2024-01-01 03:00:00 80.12815
5 2024-01-01 04:00:00 80.12815
> 
> # using data.frame for q and p (t is cte.)
> q2rh(q = q2, t = 26, p = pres)
                 time        a
1 2024-01-01 00:00:00 97.96308
2 2024-01-01 01:00:00 97.96308
3 2024-01-01 02:00:00 97.96308
4 2024-01-01 03:00:00 97.96308
5 2024-01-01 04:00:00 97.96308
> 
> # using data.frame only for q (p and t are cte.)
> q2rh(q = q2, t = 26, p = 100000)
                 time       a
1 2024-01-01 00:00:00 97.1856
2 2024-01-01 01:00:00 97.1856
3 2024-01-01 02:00:00 97.1856
4 2024-01-01 03:00:00 97.1856
5 2024-01-01 04:00:00 97.1856
> 
> 
> 
> 
> cleanEx()
> nameEx("rain")
> ### * rain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rain
> ### Title: conversion of model precipitation to hourly precipitation
> ### Aliases: rain
> 
> ### ** Examples
> 
> times <- seq(as.POSIXct('2024-01-01',tz = 'UTC'),
+              as.POSIXct('2024-01-01 04:00:00',tz = 'UTC'),
+              by = 'hour')
> RNC   <- data.frame(date = times, aa = c(0.149,0.149,0.149,0.149,0.149))
> RNNC  <- data.frame(date = times, aa = c(0.919,1.0,1.1,1.1,2.919))
> rain(rainc = RNC, rainnc = RNNC)
                 date    aa
1 2024-01-01 00:00:00    NA
2 2024-01-01 01:00:00 0.081
3 2024-01-01 02:00:00 0.100
4 2024-01-01 03:00:00 0.000
5 2024-01-01 04:00:00 1.819
> 
> 
> 
> cleanEx()
> nameEx("rast_to_netcdf")
> ### * rast_to_netcdf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rast_to_netcdf
> ### Title: Function to convert/save a SpatRaster array/Netcdf
> ### Aliases: rast_to_netcdf
> 
> ### ** Examples
> 
> folder   <- system.file("extdata",package="eva3dm")
> wrf_file <- paste0(folder,"/wrf.day1.o3.nc")
> 
> Rast     <- wrf_rast(wrf_file,'o3')
> A        <- rast_to_netcdf(Rast)
> 
> 
> 
> 
> cleanEx()
> nameEx("read_stat")
> ### * read_stat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_stat
> ### Title: Function to read stats and evaluation
> ### Aliases: read_stat
> 
> ### ** Examples
> 
> sample <- read_stat(file    = paste0(system.file("extdata", package = "eva3dm"),"/sample.txt"),
+                     verbose = TRUE)
reading /var/scratch2ro/tomas/cran/rlibro/lib/eva3dm/extdata/sample.txt 
> 
> sample <- read_stat(file    = paste0(system.file("extdata", package = "eva3dm"),"/sample.csv"),
+                     verbose = TRUE)
reading /var/scratch2ro/tomas/cran/rlibro/lib/eva3dm/extdata/sample.csv 
> 
> 
> 
> 
> cleanEx()
> nameEx("rh2q")
> ### * rh2q
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rh2q
> ### Title: Convert relative humidity to absolute humidity
> ### Aliases: rh2q
> 
> ### ** Examples
> 
> # for a singfle value
> rh2q(rh = 99, temp = 25)
[1] 0.0202236
> 
> # vector of rh values
> rh2q(rh = c(0,seq(1,100, by = 4)), temp = 25)
 [1] 0.0000000000 0.0002042788 0.0010213938 0.0018385089 0.0026556240
 [6] 0.0034727390 0.0042898541 0.0051069692 0.0059240843 0.0067411993
[11] 0.0075583144 0.0083754295 0.0091925445 0.0100096596 0.0108267747
[16] 0.0116438897 0.0124610048 0.0132781199 0.0140952350 0.0149123500
[21] 0.0157294651 0.0165465802 0.0173636952 0.0181808103 0.0189979254
[26] 0.0198150404
> 
> # vector of values for rh and temp
> rh2q(rh = c(0,seq(1,100, by = 4)), temp = 10:35)
 [1] 0.000000e+00 8.348345e-05 4.462669e-04 8.583979e-04 1.324373e-03
 [6] 1.849004e-03 2.437438e-03 3.095175e-03 3.828085e-03 4.642429e-03
[11] 5.544880e-03 6.542546e-03 7.642986e-03 8.854241e-03 1.018485e-02
[16] 1.164389e-02 1.324097e-02 1.498631e-02 1.689070e-02 1.896560e-02
[21] 2.122310e-02 2.367603e-02 2.633791e-02 2.922304e-02 3.234651e-02
[26] 3.572424e-02
> 
> # rh is data.frame and temp is a value
> times <- seq(as.POSIXct('2024-01-01',tz = 'UTC'),
+              as.POSIXct('2024-01-02',tz = 'UTC'),
+              by = 'hour')
> rh2q(rh   = data.frame(time = times, a = seq(1,100, by = 4)),temp = 25)
                  time            a
1  2024-01-01 00:00:00 0.0002042788
2  2024-01-01 01:00:00 0.0010213938
3  2024-01-01 02:00:00 0.0018385089
4  2024-01-01 03:00:00 0.0026556240
5  2024-01-01 04:00:00 0.0034727390
6  2024-01-01 05:00:00 0.0042898541
7  2024-01-01 06:00:00 0.0051069692
8  2024-01-01 07:00:00 0.0059240843
9  2024-01-01 08:00:00 0.0067411993
10 2024-01-01 09:00:00 0.0075583144
11 2024-01-01 10:00:00 0.0083754295
12 2024-01-01 11:00:00 0.0091925445
13 2024-01-01 12:00:00 0.0100096596
14 2024-01-01 13:00:00 0.0108267747
15 2024-01-01 14:00:00 0.0116438897
16 2024-01-01 15:00:00 0.0124610048
17 2024-01-01 16:00:00 0.0132781199
18 2024-01-01 17:00:00 0.0140952350
19 2024-01-01 18:00:00 0.0149123500
20 2024-01-01 19:00:00 0.0157294651
21 2024-01-01 20:00:00 0.0165465802
22 2024-01-01 21:00:00 0.0173636952
23 2024-01-01 22:00:00 0.0181808103
24 2024-01-01 23:00:00 0.0189979254
25 2024-01-02 00:00:00 0.0198150404
> 
> # using both rh and temp are data.frames
> rh2q(rh   = data.frame(time = times, a = seq(1,100, by = 4)),
+      temp = data.frame(time = times, a = 11:35))
                  time            a
1  2024-01-01 00:00:00 8.348345e-05
2  2024-01-01 01:00:00 4.462669e-04
3  2024-01-01 02:00:00 8.583979e-04
4  2024-01-01 03:00:00 1.324373e-03
5  2024-01-01 04:00:00 1.849004e-03
6  2024-01-01 05:00:00 2.437438e-03
7  2024-01-01 06:00:00 3.095175e-03
8  2024-01-01 07:00:00 3.828085e-03
9  2024-01-01 08:00:00 4.642429e-03
10 2024-01-01 09:00:00 5.544880e-03
11 2024-01-01 10:00:00 6.542546e-03
12 2024-01-01 11:00:00 7.642986e-03
13 2024-01-01 12:00:00 8.854241e-03
14 2024-01-01 13:00:00 1.018485e-02
15 2024-01-01 14:00:00 1.164389e-02
16 2024-01-01 15:00:00 1.324097e-02
17 2024-01-01 16:00:00 1.498631e-02
18 2024-01-01 17:00:00 1.689070e-02
19 2024-01-01 18:00:00 1.896560e-02
20 2024-01-01 19:00:00 2.122310e-02
21 2024-01-01 20:00:00 2.367603e-02
22 2024-01-01 21:00:00 2.633791e-02
23 2024-01-01 22:00:00 2.922304e-02
24 2024-01-01 23:00:00 3.234651e-02
25 2024-01-02 00:00:00 3.572424e-02
> 
> 
> 
> cleanEx()
> nameEx("sat")
> ### * sat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sat
> ### Title: Functions to model evaluation using satellite
> ### Aliases: sat
> 
> ### ** Examples
> 
> model_o3 <- terra::rast(paste0(system.file("extdata",package="eva3dm"),
+                               "/camx_no2.Rds"))
> omi_o3   <- terra::rast(paste0(system.file("extdata",package="eva3dm"),
+                               "/omi_no2.Rds"))
> 
> # generate the statistical indexes
> sat(mo = model_o3,ob = omi_o3,rname = 'NO2_statistical')
removing 6 points for the model (y) boundaryes ...
interpolating obs. (x) to model grid (y)...
                    n      Obs      Sim         r       IOA       FA2    RMSE
NO2_statistical 11664 3.334283 4.267475 0.4689121 0.3358893 0.6685528 4.98183
                       MB       ME  NMB (%)  NME (%)
NO2_statistical 0.9331919 2.165081 27.98778 64.93393
> 
> # generate categorical evaluation using 3.0 as threshold
> sat(mo = model_o3,ob = omi_o3,rname = 'NO2_categorical',
+     eval_function = cate, threshold = 3.0)
removing 6 points for the model (y) boundaryes ...
interpolating obs. (x) to model grid (y)...
                    n      Obs      Sim thr        A      CSI      POD        B
NO2_categorical 11664 3.334283 4.267475   3 83.04184 69.81074 85.49533 107.9626
                     FAR      HSS      PSS
NO2_categorical 20.81025 66.05674 66.45827
> 
> 
> 
> 
> cleanEx()
> nameEx("stat")
> ### * stat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stat
> ### Title: Calculate evaluation statistics from numerical vectors
> ### Aliases: stat
> 
> ### ** Examples
> 
> model <- 1:100
> data  <- model + rnorm(100,0.2)
> stat(model = model, observation = data)
    n      Obs  Sim         r       IOA FA2      RMSE         MB        ME
1 100 50.80889 50.5 0.9995207 0.9997317   1 0.9455717 -0.3088874 0.7592147
     NMB (%)  NME (%)
1 -0.6079396 1.494256
> 
> 
> 
> 
> cleanEx()
> nameEx("template")
> ### * template
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: template
> ### Title: Create templates for model evaluation
> ### Aliases: template
> 
> ### ** Examples
> 
> temp <- file.path(tempdir(),"POST")
> template(root = temp,template = 'WRF', case = 'WRF-only')
 folder  /var/scratch2/tomas/tmp/Rtmpocw48t/POST/WRF/WRF-only : link wrf output files here!
 bash  /var/scratch2/tomas/tmp/Rtmpocw48t/POST/post-R_wrf.sh : post processing job script
 r-script /var/scratch2/tomas/tmp/Rtmpocw48t/POST/extract_metar.R : source code to extract metar using eva3dm::extract_serie()
 r-script /var/scratch2/tomas/tmp/Rtmpocw48t/POST/extract_inpet.R : source code to extract inmet using eva3dm::extract_serie()
> 
> 
> 
> 
> cleanEx()
> nameEx("uv2wd")
> ### * uv2wd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: uv2wd
> ### Title: Function to calculate model wind direction
> ### Aliases: uv2wd
> 
> ### ** Examples
> 
> times <- seq(as.POSIXct('2024-01-01',tz = 'UTC'),
+              as.POSIXct('2024-01-02',tz = 'UTC'),
+              by = 'hour')
> U10 = data.frame(times = times,
+                  test1 = c(3.29,2.07,1.96,2.82,3.73,
+                            4.11,4.96,6.33,7.39,7.59,
+                            7.51,7.22,6.81,6.43,5.81,
+                            4.02,3.03,2.68,2.40,2.20,
+                            2.09,1.95,1.66,1.39,1.4),
+                  test2 = c(6.29,4.87,6.16,7.12,8.77,
+                            10.16,10.85,11.45,11.21,11.04,
+                            11.09,10.67,10.48,10.00,8.96,
+                            6.36,5.62,5.83,5.83,5.25,
+                            4.11,3.08,2.26,1.14,-0.10))
> V10 = data.frame(times = times,
+                  test1 = c(-8.87,-4.23,-2.81,-2.59,-4.58,
+                            -4.80,-5.33,-5.86,-6.12,-6.13,
+                            -6.11,-5.76,-5.91,-5.60,-5.09,
+                            -3.33,-2.50,-2.29,-2.14,-2.07,
+                            -1.95,-1.97,-2.04,-2.03,-1.9),
+                  test2 = c(11.80,5.88,5.74,5.56,6.87,
+                            8.39,8.68,8.33,7.90,7.42,
+                            6.96,6.87,6.36,5.61,5.16,
+                            4.16,4.25,4.59,4.51,3.90,
+                            2.97,1.98,1.04,-0.08,-0.44))
> 
> uv2wd(u = U10, v = V10)
calculating wind direction...
                 times    test1     test2
1  2024-01-01 00:00:00 339.6495 208.05988
2  2024-01-01 01:00:00 333.9246 219.63262
3  2024-01-01 02:00:00 325.1039 227.02136
4  2024-01-01 03:00:00 312.5656 232.01376
5  2024-01-01 04:00:00 320.8403 231.92654
6  2024-01-01 05:00:00 319.4282 230.45054
7  2024-01-01 06:00:00 317.0593 231.34019
8  2024-01-01 07:00:00 312.7920 233.96370
9  2024-01-01 08:00:00 309.6297 234.82658
10 2024-01-01 09:00:00 308.9258 236.09490
11 2024-01-01 10:00:00 309.1312 237.88793
12 2024-01-01 11:00:00 308.5823 237.22408
13 2024-01-01 12:00:00 310.9528 238.74768
14 2024-01-01 13:00:00 311.0532 240.70757
15 2024-01-01 14:00:00 311.2208 240.06267
16 2024-01-01 15:00:00 309.6369 236.81178
17 2024-01-01 16:00:00 309.5254 232.90242
18 2024-01-01 17:00:00 310.5131 231.78639
19 2024-01-01 18:00:00 311.7223 232.27500
20 2024-01-01 19:00:00 313.2562 233.39293
21 2024-01-01 20:00:00 313.0153 234.14708
22 2024-01-01 21:00:00 315.2923 237.26477
23 2024-01-01 22:00:00 320.8639 245.28920
24 2024-01-01 23:00:00 325.5994 274.01418
25 2024-01-02 00:00:00 323.6156  12.80427
> 
> 
> 
> 
> cleanEx()
> nameEx("uv2ws")
> ### * uv2ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: uv2ws
> ### Title: Function to calculate model wind speed
> ### Aliases: uv2ws
> 
> ### ** Examples
> 
> times <- seq(as.POSIXct('2024-01-01',tz = 'UTC'),
+              as.POSIXct('2024-01-02',tz = 'UTC'),
+              by = 'hour')
> 
> U10 = data.frame(times = times,
+                  test1 = c(3.29,2.07,1.96,2.82,3.73,
+                            4.11,4.96,6.33,7.39,7.59,
+                            7.51,7.22,6.81,6.43,5.81,
+                            4.02,3.03,2.68,2.40,2.20,
+                            2.09,1.95,1.66,1.39,1.4),
+                  test2 = c(6.29,4.87,6.16,7.12,8.77,
+                            10.16,10.85,11.45,11.21,11.04,
+                            11.09,10.67,10.48,10.00,8.96,
+                            6.36,5.62,5.83,5.83,5.25,
+                            4.11,3.08,2.26,1.14,-0.10))
> V10 = data.frame(times = times,
+                  test1 = c(-8.87,-4.23,-2.81,-2.59,-4.58,
+                            -4.80,-5.33,-5.86,-6.12,-6.13,
+                            -6.11,-5.76,-5.91,-5.60,-5.09,
+                            -3.33,-2.50,-2.29,-2.14,-2.07,
+                            -1.95,-1.97,-2.04,-2.03,-1.9),
+                  test2 = c(11.80,5.88,5.74,5.56,6.87,
+                            8.39,8.68,8.33,7.90,7.42,
+                            6.96,6.87,6.36,5.61,5.16,
+                            4.16,4.25,4.59,4.51,3.90,
+                            2.97,1.98,1.04,-0.08,-0.44))
> 
> uv2ws(u = U10, v = V10)
calculating wind speed ...
                 times    test1      test2
1  2024-01-01 00:00:00 9.460497 13.3717650
2  2024-01-01 01:00:00 4.709331  7.6348739
3  2024-01-01 02:00:00 3.426033  8.4198100
4  2024-01-01 03:00:00 3.828903  9.0337146
5  2024-01-01 04:00:00 5.906717 11.1404578
6  2024-01-01 05:00:00 6.319185 13.1764069
7  2024-01-01 06:00:00 7.280831 13.8947796
8  2024-01-01 07:00:00 8.626036 14.1594986
9  2024-01-01 08:00:00 9.595129 13.7140111
10 2024-01-01 09:00:00 9.756280 13.3018044
11 2024-01-01 10:00:00 9.681539 13.0931165
12 2024-01-01 11:00:00 9.236125 12.6903822
13 2024-01-01 12:00:00 9.016884 12.2588743
14 2024-01-01 13:00:00 8.526717 11.4661284
15 2024-01-01 14:00:00 7.724260 10.3395938
16 2024-01-01 15:00:00 5.220086  7.5996842
17 2024-01-01 16:00:00 3.928218  7.0460556
18 2024-01-01 17:00:00 3.525124  7.4200404
19 2024-01-01 18:00:00 3.215525  7.3708208
20 2024-01-01 19:00:00 3.020745  6.5400688
21 2024-01-01 20:00:00 2.858426  5.0707988
22 2024-01-01 21:00:00 2.771895  3.6615297
23 2024-01-01 22:00:00 2.630057  2.4878103
24 2024-01-01 23:00:00 2.460285  1.1428036
25 2024-01-02 00:00:00 2.360085  0.4512206
> 
> 
> 
> 
> cleanEx()
> nameEx("vars")
> ### * vars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vars
> ### Title: Function to return variable names
> ### Aliases: vars
> 
> ### ** Examples
> 
> vars(paste0(system.file("extdata",package="eva3dm"),'/wrfinput_d01'))
[1] "Times" "XLAT"  "XLONG"
> 
> 
> 
> 
> cleanEx()
> nameEx("wrf_rast")
> ### * wrf_rast
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wrf_rast
> ### Title: Creates SpatRaster object from wrf file
> ### Aliases: wrf_rast
> 
> ### ** Examples
> 
> {
+ 
+ wrf <- paste(system.file("extdata", package = "eva3dm"),
+                          "/wrfinput_d01", sep="")
+ 
+ r <- wrf_rast(file=wrf, name='XLAT')
+ 
+ plot_rast(r)
+ }
> 
> 
> 
> cleanEx()
> nameEx("write_stat")
> ### * write_stat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: write_stat
> ### Title: Functions to write stats and evaluation
> ### Aliases: write_stat
> 
> ### ** Examples
> 
> 
> sample <- read_stat(paste0(system.file("extdata", package = "eva3dm"),"/sample.csv"),
+                     verbose = TRUE)
reading /var/scratch2ro/tomas/cran/rlibro/lib/eva3dm/extdata/sample.csv 
> dir.create(file.path(tempdir(), "stats"))
> 
> write_stat(file    = paste0(file.path(tempdir(), "stats"),'/sample.txt'),
+            stat    = sample,
+            verbose = TRUE)
writing /var/scratch2/tomas/tmp/Rtmpocw48t/stats/sample.txt 
> 
> write_stat(file    = paste0(file.path(tempdir(), "stats"),'/sample.csv'),
+            stat    = sample,
+            verbose = TRUE)
writing /var/scratch2/tomas/tmp/Rtmpocw48t/stats/sample.csv 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  14.547 0.638 15.862 0.006 0.007 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')

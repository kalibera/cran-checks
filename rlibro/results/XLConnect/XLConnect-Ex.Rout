
R Under development (unstable) (2024-04-18 r86444) -- "Unsuffered Consequences"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "XLConnect"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('XLConnect')
XLConnect 1.0.9 by Mirai Solutions GmbH [aut],
  Martin Studer [cre],
  The Apache Software Foundation [ctb, cph] (Apache POI),
  Graph Builder [ctb, cph] (Curvesapi Java library),
  Brett Woolridge [ctb, cph] (SparseBitSet Java library)
https://mirai-solutions.ch
https://github.com/miraisolutions/xlconnect
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("XLConnect-package")
> ### * XLConnect-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: XLConnect-package
> ### Title: Excel Connector for R
> ### Aliases: XLConnect-package XLConnect
> ### Keywords: package
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook; create if not existing
> ##D wb <- loadWorkbook("XLConnect.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet
> ##D createSheet(wb, name = "mtcars")
> ##D 
> ##D # Create a name reference
> ##D createName(wb, name = "mtcars", formula = "mtcars!$C$5")
> ##D 
> ##D # Write built-in data.frame 'mtcars' to the specified named region
> ##D writeNamedRegion(wb, mtcars, name = "mtcars")
> ##D 
> ##D # Save workbook
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("XLConnect.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("addImage-methods")
> ### * addImage-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addImage-methods
> ### Title: Adding images to a worksheet
> ### Aliases: addImage addImage-methods addImage,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D ## Write an R plot to a specified named region
> ##D ## This example makes use of the 'Tonga Trench Earthquakes' example
> ##D 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("earthquake.xlsx", create = TRUE)
> ##D 
> ##D # Create a sheet named 'earthquake'
> ##D createSheet(wb, name = "earthquake")
> ##D 
> ##D # Create a named region called 'earthquake' referring to the sheet
> ##D # called 'earthquake' 
> ##D createName(wb, name = "earthquake", formula = "earthquake!$B$2")
> ##D 
> ##D # Create R plot to a png device
> ##D require(lattice)
> ##D png(filename = "earthquake.png", width = 800, height = 600)
> ##D devAskNewPage(ask = FALSE)
> ##D 
> ##D Depth <- equal.count(quakes$depth, number=8, overlap=.1)
> ##D xyplot(lat ~ long | Depth, data = quakes)
> ##D update(trellis.last.object(),
> ##D        strip = strip.custom(strip.names = TRUE, strip.levels = TRUE),
> ##D        par.strip.text = list(cex = 0.75),
> ##D        aspect = "iso")
> ##D 
> ##D dev.off()
> ##D 
> ##D # Write image to the named region created above using the image's
> ##D # original size; i.e. the image's top left corner will match the
> ##D # specified cell's top left corner 
> ##D addImage(wb, filename = "earthquake.png", name = "earthquake",
> ##D          originalSize = TRUE)
> ##D 
> ##D # Save workbook (this actually writes the file to disk)
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("earthquake.xlsx")
> ##D file.remove("earthquake.png")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("appendNamedRegion-methods")
> ### * appendNamedRegion-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: appendNamedRegion-methods
> ### Title: Appending data to a named region
> ### Aliases: appendNamedRegion appendNamedRegion-methods
> ###   appendNamedRegion,workbook-method
> ###   appendNamedRegion,workbook,ANY-method
> ### Keywords: methods IO
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Append mtcars data set to named region named 'mtcars'
> ##D appendNamedRegion(wb, mtcars, name = "mtcars")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("appendWorksheet-methods")
> ### * appendWorksheet-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: appendWorksheet-methods
> ### Title: Appending data to worksheets
> ### Aliases: appendWorksheet appendWorksheet-methods
> ###   appendWorksheet,workbook,ANY,character-method
> ###   appendWorksheet,workbook,ANY,numeric-method
> ### Keywords: methods IO
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Append mtcars data set to worksheet named 'mtcars'
> ##D appendWorksheet(wb, mtcars, sheet = "mtcars")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("aref")
> ### * aref
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: aref
> ### Title: Constructing Excel area references
> ### Aliases: aref
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D aref("A1", dim(mtcars))
> ##D aref(c(1, 1), dim(mtcars))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("aref2idx")
> ### * aref2idx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: aref2idx
> ### Title: Converting Excel cell references to row and column based cell
> ###   references
> ### Aliases: aref2idx
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D aref2idx(c("A1:B6", "B6:C17"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("cellstyle-class")
> ### * cellstyle-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cellstyle-class
> ### Title: Class "cellstyle"
> ### Aliases: cellstyle-class
> ### Keywords: classes utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("cellstyles.xlsx", create = TRUE)
> ##D 
> ##D # We don't set a specific style action in this demo, so the 
> ##D # default 'XLConnect' will be used (XLC$"STYLE_ACTION.XLCONNECT")
> ##D 
> ##D # Create a sheet named 'mtcars'
> ##D createSheet(wb, name = "mtcars")
> ##D 
> ##D # Create a named region called 'mtcars' referring to the sheet
> ##D # called 'mtcars'
> ##D createName(wb, name = "mtcars", formula = "mtcars!$C$4")
> ##D 
> ##D # Write built-in data set 'mtcars' to the above defined named region.
> ##D # This will use the default style action 'XLConnect'.
> ##D writeNamedRegion(wb, mtcars, name = "mtcars")
> ##D 
> ##D # Now let's color all weight cells of cars with a weight > 3.5 in red
> ##D # (mtcars$wt > 3.5)
> ##D 
> ##D # First, create a corresponding (named) cell style
> ##D heavyCar <- createCellStyle(wb, name = "HeavyCar")
> ##D 
> ##D # Specify the cell style to use a solid foreground color
> ##D setFillPattern(heavyCar, fill = XLC$"FILL.SOLID_FOREGROUND")
> ##D 
> ##D # Specify the foreground color to be used
> ##D setFillForegroundColor(heavyCar, color = XLC$"COLOR.RED")
> ##D 
> ##D # Which cars have a weight > 3.5 ?
> ##D rowIndex <- which(mtcars$wt > 3.5)
> ##D 
> ##D # NOTE: The mtcars data.frame has been written offset with top 
> ##D # left cell C4 - and we have also written a header row!
> ##D # So, let's take that into account appropriately. Obviously,
> ##D # the two steps could be combined directly into one ...
> ##D rowIndex <- rowIndex + 4
> ##D 
> ##D # The same holds for the column index
> ##D colIndex <- which(names(mtcars) == "wt") + 2
> ##D 
> ##D # Set the 'HeavyCar' cell style for the corresponding cells.
> ##D # Note: the row and col arguments are vectorized!
> ##D setCellStyle(wb, sheet = "mtcars", row = rowIndex, col = colIndex,
> ##D              cellstyle = heavyCar)
> ##D 
> ##D # Save workbook (this actually writes the file to disk)
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("cellstyles.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("clearNamedRegion-methods")
> ### * clearNamedRegion-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clearNamedRegion-methods
> ### Title: Clearing named regions in a workbook
> ### Aliases: clearNamedRegion clearNamedRegion-methods
> ###   clearNamedRegion,workbook,character-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
>   ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of 
> ##D # package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", 
> ##D                              package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Read named region 'mtcars'
> ##D data <- readNamedRegion(wb, name = "mtcars", header = TRUE)
> ##D 
> ##D # Only consider cars with a weight >= 5
> ##D data <- data[data$wt >= 5, ]
> ##D 
> ##D # Clear original named region
> ##D clearNamedRegion(wb, name = "mtcars")
> ##D 
> ##D # Write subsetted data back
> ##D # Note: this is covering a smaller area now -
> ##D # writeNamedRegion automatically redefines the named region
> ##D # to the size/area of the data
> ##D writeNamedRegion(wb, data = data, name = "mtcars",
> ##D                  header = TRUE) 
> ## End(Not run)
>  
> 
> 
> 
> cleanEx()
> nameEx("clearRange-methods")
> ### * clearRange-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clearRange-methods
> ### Title: Clearing cell ranges in a workbook
> ### Aliases: clearRange clearRange-methods
> ###   clearRange,workbook,numeric-method
> ###   clearRange,workbook,character-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of 
> ##D # package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", 
> ##D                              package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Clear range from top left corner (4,2) ^= B4 to
> ##D # bottom right corner (6,4) ^= D6
> ##D clearRange(wb, sheet = "mtcars", coords = c(4, 2, 6, 4))
> ##D 
> ##D # Clear two ranges in one go ...
> ##D mat = matrix(c(5, 1, 6, 4, 5, 7, 7, 9), ncol = 4,
> ##D              byrow = TRUE)
> ##D clearRange(wb, sheet = "mtcars", coords = mat)
> ##D 
> ##D # The above is equivalent to ...
> ##D clearRange(wb, sheet = "mtcars",
> ##D            coords = aref2idx(c("A5:D6", "G5:I7")))
> ##D            
> ##D # This in turn is the same as ...
> ##D clearRangeFromReference(wb, reference = c("mtcars!A5:D6",
> ##D                         "mtcars!G5:I7"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("clearRangeFromReference-methods")
> ### * clearRangeFromReference-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clearRangeFromReference-methods
> ### Title: Clearing cell ranges in a workbook
> ### Aliases: clearRangeFromReference clearRangeFromReference-methods
> ###   clearRangeFromReference,workbook,character-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of 
> ##D # package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", 
> ##D                              package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Clear ranges A5:D6 and G5:I7 on sheet mtcars
> ##D clearRangeFromReference(wb, reference = c("mtcars!A5:D6",
> ##D                         "mtcars!G5:I7"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("clearSheet-methods")
> ### * clearSheet-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clearSheet-methods
> ### Title: Clearing worksheets in a workbook
> ### Aliases: clearSheet clearSheet-methods
> ###   clearSheet,workbook,numeric-method
> ###   clearSheet,workbook,character-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of 
> ##D # package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", 
> ##D                              package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Clear worksheets named 'mtcars' and 'mtcars2'
> ##D clearSheet(wb, sheet = c("mtcars", "mtcars2"))
> ##D 
> ##D # Clear 3rd worksheet
> ##D clearSheet(wb, sheet = 3) 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("cloneSheet-methods")
> ### * cloneSheet-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cloneSheet-methods
> ### Title: Cloning/copying worksheets
> ### Aliases: cloneSheet cloneSheet-methods
> ###   cloneSheet,workbook,character-method
> ###   cloneSheet,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Clone the 'mtcars' worksheet and assign it the name 'mtcars cloned'
> ##D cloneSheet(wb, sheet = "mtcars", name = "mtcars cloned")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("col2idx")
> ### * col2idx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: col2idx
> ### Title: Converting Excel column names to indices
> ### Aliases: col2idx
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D col2idx(c("A", "BTG"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("createCellStyle-methods")
> ### * createCellStyle-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createCellStyle-methods
> ### Title: Creating custom named and anonymous cell styles
> ### Aliases: createCellStyle createCellStyle-methods
> ###   createCellStyle,workbook,character-method
> ###   createCellStyle,workbook,missing-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("createCellstyles.xlsx", create = TRUE)
> ##D 
> ##D # We don't set a specific style action in this demo, so the 
> ##D # default 'XLConnect' will be used (XLC$"STYLE_ACTION.XLCONNECT")
> ##D 
> ##D # Create a sheet named 'mtcars'
> ##D createSheet(wb, name = "mtcars")
> ##D 
> ##D # Create a named region called 'mtcars' referring to the sheet
> ##D # called 'mtcars'
> ##D createName(wb, name = "mtcars", formula = "mtcars!$C$4")
> ##D 
> ##D # Write built-in data set 'mtcars' to the above defined named region.
> ##D # This will use the default style action 'XLConnect'.
> ##D writeNamedRegion(wb, mtcars, name = "mtcars")
> ##D 
> ##D # Now let's color all weight cells of cars with a weight > 3.5 in red
> ##D # (mtcars$wt > 3.5)
> ##D 
> ##D # First, create a corresponding (named) cell style
> ##D heavyCar <- createCellStyle(wb, name = "HeavyCar")
> ##D 
> ##D # Specify the cell style to use a solid foreground color
> ##D setFillPattern(heavyCar, fill = XLC$"FILL.SOLID_FOREGROUND")
> ##D 
> ##D # Specify the foreground color to be used
> ##D setFillForegroundColor(heavyCar, color = XLC$"COLOR.RED")
> ##D 
> ##D # Which cars have a weight > 3.5 ?
> ##D rowIndex <- which(mtcars$wt > 3.5)
> ##D 
> ##D # NOTE: The mtcars data.frame has been written offset with 
> ##D # top left cell C4 - and we have also written a header row!
> ##D # So, let's take that into account appropriately. Obviously, 
> ##D # the two steps could be combined directly into one ...
> ##D rowIndex <- rowIndex + 4
> ##D 
> ##D # The same holds for the column index
> ##D colIndex <- which(names(mtcars) == "wt") + 2
> ##D 
> ##D # Set the 'HeavyCar' cell style for the corresponding cells.
> ##D # Note: the row and col arguments are vectorized!
> ##D setCellStyle(wb, sheet = "mtcars", row = rowIndex, col = colIndex, 
> ##D              cellstyle = heavyCar)
> ##D 
> ##D # Save workbook (this actually writes the file to disk)
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("createCellstyles.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("createFreezePane-methods")
> ### * createFreezePane-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createFreezePane-methods
> ### Title: Creating a freeze pane on a worksheet
> ### Aliases: createFreezePane createFreezePane-methods
> ###   createFreezePane,workbook,character-method
> ###   createFreezePane,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("freezePaneTest.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet named 'Sheet1'
> ##D createSheet(wb, name = "Sheet1")
> ##D 
> ##D # Create a freeze pane on Sheet1, using as reference position the 5th column and the 5th row,
> ##D # showing the 10th column as the leftmost visible one in the right pane
> ##D # and the 10th row as the top visible one in the bottom pane.
> ##D createFreezePane(wb, "Sheet1", 5, 5, 10, 10)
> ##D 
> ##D # Save workbook (this actually writes the file to disk)
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("freezePaneTest.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("createName-methods")
> ### * createName-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createName-methods
> ### Title: Creating names in a workbook
> ### Aliases: createName createName-methods createName,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("createName.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet named 'mtcars'
> ##D createSheet(wb, name = "mtcars")
> ##D 
> ##D # Create a named region called 'mtcars' on the sheet called 'mtcars'
> ##D createName(wb, name = "mtcars", formula = "mtcars!$A$1")
> ##D 
> ##D # Write built-in data set 'mtcars' to the above defined named region
> ##D writeNamedRegion(wb, mtcars, name = "mtcars")
> ##D 
> ##D # Save workbook
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("createName.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("createSheet-methods")
> ### * createSheet-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createSheet-methods
> ### Title: Creating worksheets in a workbook
> ### Aliases: createSheet createSheet-methods createSheet,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("createSheet.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet called 'CO2'
> ##D createSheet(wb, name = "CO2")
> ##D 
> ##D # Save workbook (this actually writes the file to disk)
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("createSheet.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("createSplitPane-methods")
> ### * createSplitPane-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createSplitPane-methods
> ### Title: Creating a split pane on a worksheet
> ### Aliases: createSplitPane createSplitPane-methods
> ###   createSplitPane,workbook,character-method
> ###   createSplitPane,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("splitPaneTest.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet named 'Sheet1'
> ##D createSheet(wb, name = "Sheet1")
> ##D 
> ##D # Create a split pane on Sheet1, with coordinates (10000, 5000) expressed as 1/20th of a point,
> ##D # 10 (-> J) as left column visible in right pane and 10 as top row visible in bottom pane 
> ##D createSplitPane(wb, "Sheet1", 10000, 5000, 10, 10)
> ##D 
> ##D # Save workbook (this actually writes the file to disk)
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("splitPaneTest.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("cref2idx")
> ### * cref2idx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cref2idx
> ### Title: Converting Excel cell references to indices
> ### Aliases: cref2idx
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D cref2idx(c("$A$20", "B18"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("dollar-methods")
> ### * dollar-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: $-methods
> ### Title: Executing workbook methods in object$method(...) form
> ### Aliases: $ $-methods $,workbook-method $,cellstyle-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("dollar.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet called 'CO2'
> ##D wb$createSheet(name = "CO2")
> ##D 
> ##D # Write built-in data set 'CO2' to the worksheet created above
> ##D wb$writeWorksheet(CO2, sheet = "CO2", startRow = 4, startCol = 2)
> ##D 
> ##D # Save workbook
> ##D wb$saveWorkbook()
> ##D 
> ##D # clean up 
> ##D file.remove("dollar.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("existsCellStyle-methods")
> ### * existsCellStyle-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: existsCellStyle-methods
> ### Title: Retrieving named cell styles
> ### Aliases: existsCellStyle existsCellStyle-methods
> ###   existsCellStyle,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("existsCellStyle.xlsx", create = TRUE)
> ##D 
> ##D # Cell style 'MyStyle' does not exist yet
> ##D stopifnot(!existsCellStyle(wb, "MyStyle"))
> ##D 
> ##D # Create the style "MyStyle"
> ##D createCellStyle(wb, "MyStyle")
> ##D 
> ##D # And now it is here
> ##D stopifnot(existsCellStyle(wb, "MyStyle"))
> ##D 
> ##D # clean up 
> ##D file.remove("existsCellStyle.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("existsName-methods")
> ### * existsName-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: existsName-methods
> ### Title: Checking existence of names in a workbook
> ### Aliases: existsName existsName-methods existsName,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D mtcarsFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(mtcarsFile)
> ##D 
> ##D # Check if the name 'mtcars' exists
> ##D # (should return TRUE since the name is defined as 'mtcars!$A$1:$K$33')
> ##D existsName(wb, name = "mtcars")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("existsSheet-methods")
> ### * existsSheet-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: existsSheet-methods
> ### Title: Checking for existence of worksheets in a workbook
> ### Aliases: existsSheet existsSheet-methods existsSheet,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Check for existence of a worksheet called 'mtcars'
> ##D existsSheet(wb, "mtcars")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("extractSheetName")
> ### * extractSheetName
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extractSheetName
> ### Title: Extracting the sheet name from a formula
> ### Aliases: extractSheetName
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D extractSheetName(c("MySheet!$A$1", "'My Sheet'!$A$1", "'My!Sheet'!$A$1"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("extraction-methods")
> ### * extraction-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extraction-methods
> ### Title: Workbook data extraction & replacement operators
> ### Aliases: [ [[ [<- [[<- [-methods [[-methods [<--methods [[<--methods
> ###   [,workbook-method [[,workbook-method [<-,workbook-method
> ###   [[<-,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("extraction.xlsx", create = TRUE)
> ##D 
> ##D # Write mtcars data set on a worksheet named 'mtcars1'.
> ##D # Note: The 'mtcars1' sheet will be created automatically if it does
> ##D # not exist yet. Also, default values for other writeWorksheet arguments
> ##D # hold, i.e. the data set is written starting at the top left corner. 
> ##D wb["mtcars1"] = mtcars
> ##D 
> ##D # Write mtcars data set on a worksheet named 'mtcars2'.
> ##D # Again, the 'mtcars2' worksheet is created automatically.
> ##D # Additionally specify arguments passed to the underlying method
> ##D # writeWorksheet.
> ##D wb["mtcars2", startRow = 6, startCol = 11, header = FALSE] = mtcars
> ##D 
> ##D # Read worksheets 'mtcars1' and 'mtcars2'.
> ##D # Note: The default arguments hold for the underlying method
> ##D # readWorksheet.
> ##D wb["mtcars1"]
> ##D wb["mtcars2"]
> ##D 
> ##D # Write mtcars data set to a named region named 'mtcars3'. Since
> ##D # it doesn't exist yet we also need to specify the formula to
> ##D # define it. Also note that the sheet 'mtcars3' referenced in the
> ##D # formula does not yet exist - it will be created automatically!
> ##D # Moreover, default values for other writeNamedRegion arguments hold.
> ##D wb[["mtcars3", "mtcars3!$B$7"]] = mtcars
> ##D 
> ##D # Redefine named region 'mtcars3'. Note that no formula specification
> ##D # is required since named region is already defined (see above example).
> ##D wb[["mtcars3"]] = mtcars
> ##D 
> ##D # Write mtcars data set to a named region 'mtcars4'. Since the named
> ##D # region does not yet exist a formula specification is required. Also,
> ##D # additional arguments are specified that are passed to the underlying
> ##D # method writeNamedRegion.
> ##D wb[["mtcars4", "mtcars4!$D$8", rownames = "Car"]] = mtcars
> ##D 
> ##D # Read the named regions 'mtcars3' and 'mtcars4'.
> ##D # Note: Default values hold for the underlying method readNamedRegion.
> ##D wb[["mtcars3"]]
> ##D wb[["mtcars4"]]
> ##D 
> ##D # clean up 
> ##D file.remove("extraction.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getActiveSheetIndex-methods")
> ### * getActiveSheetIndex-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getActiveSheetIndex-methods
> ### Title: Querying the active worksheet index
> ### Aliases: getActiveSheetIndex getActiveSheetIndex-methods
> ###   getActiveSheetIndex,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Query the active sheet index
> ##D activeSheet <- getActiveSheetIndex(wb)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getActiveSheetName-methods")
> ### * getActiveSheetName-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getActiveSheetName-methods
> ### Title: Querying the active worksheet name
> ### Aliases: getActiveSheetName getActiveSheetName-methods
> ###   getActiveSheetName,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Query the active sheet name
> ##D activeSheet <- getActiveSheetName(wb)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getBoundingBox-methods")
> ### * getBoundingBox-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getBoundingBox-methods
> ### Title: Querying the coordinates of a worksheet bounding box
> ### Aliases: getBoundingBox getBoundingBox-methods
> ###   getBoundingBox,workbook,character-method
> ###   getBoundingBox,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # multiregion xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/multiregion.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Query bounding box for the second sheet
> ##D print(getBoundingBox(wb, sheet="SecondSheet"))
> ##D 
> ##D # Query bounding box for the first sheet, selecting the columns from 5 to 8
> ##D print(getBoundingBox(wb, sheet="FirstSheet", startCol=5, endCol=8))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getCellFormula-methods")
> ### * getCellFormula-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCellFormula-methods
> ### Title: Retrieving formula definitions from cells
> ### Aliases: getCellFormula getCellFormula-methods
> ###   getCellFormula,workbook,character-method
> ###   getCellFormula,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("cellFormula.xlsx", create = TRUE)
> ##D 
> ##D createSheet(wb, "Formula")
> ##D 
> ##D # Assign a formula to A1
> ##D setCellFormula(wb, "Formula", 1, 1, "SUM($B$1:$B$29)")
> ##D 
> ##D # Returns the formula for Sheet1!A1
> ##D getCellFormula(wb, "Formula", 1, 1)
> ##D # The same with a numeric sheet index
> ##D getCellFormula(wb, 1, 1, 1)
> ##D 
> ##D # clean up 
> ##D file.remove("cellFormula.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getCellStyle-methods")
> ### * getCellStyle-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCellStyle-methods
> ### Title: Retrieving named cell styles
> ### Aliases: getCellStyle getCellStyle-methods getCellStyle,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("getCellstyles.xlsx", create = TRUE)
> ##D 
> ##D # You wouldn't usually ignore the return value here...
> ##D createCellStyle(wb, 'Header')
> ##D 
> ##D # ... but if you did it doesn't hurt.
> ##D cs <- getCellStyle(wb, 'Header')
> ##D 
> ##D # Specify the cell style to use a solid foreground color
> ##D setFillPattern(cs, fill = XLC$"FILL.SOLID_FOREGROUND")
> ##D 
> ##D # Specify the foreground color to be used
> ##D setFillForegroundColor(cs, color = XLC$"COLOR.RED")
> ##D 
> ##D 
> ##D # clean up 
> ##D file.remove("getCellstyles.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getCellStyleForType-methods")
> ### * getCellStyleForType-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCellStyleForType-methods
> ### Title: Querying the cell style per data type for the DATATYPE style
> ###   action
> ### Aliases: getCellStyleForType getCellStyleForType-methods
> ###   getCellStyleForType,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D file.copy(system.file("demoFiles/template2.xlsx", 
> ##D                       package = "XLConnect"),
> ##D           "datatype.xlsx", overwrite = TRUE)
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook("datatype.xlsx")
> ##D 
> ##D # Get current (existing) cell style for numerics
> ##D cs <- getCellStyleForType(wb, XLC$"DATA_TYPE.NUMERIC")
> ##D # Could also say cs <- getCellStyleForType(wb, "numeric")
> ##D 
> ##D # Change style
> ##D setBorder(cs, side = c("bottom", "right"), type = XLC$"BORDER.THICK", 
> ##D           color = c(XLC$"COLOR.BLACK", XLC$"COLOR.RED"))
> ##D           
> ##D # Set style action to 'datatype'
> ##D setStyleAction(wb, XLC$"STYLE_ACTION.DATATYPE")
> ##D 
> ##D # Write built-in data set 'mtcars' to the named region 
> ##D # 'mtcars' as defined by the Excel template.
> ##D writeNamedRegion(wb, mtcars, name = "mtcars")
> ##D 
> ##D # Save workbook
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up
> ##D file.remove("datatype.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getDefinedNames-methods")
> ### * getDefinedNames-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getDefinedNames-methods
> ### Title: Retrieving defined names in a workbook
> ### Aliases: getDefinedNames getDefinedNames-methods
> ###   getDefinedNames,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D mtcarsFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(mtcarsFile)
> ##D 
> ##D # Retrieve defined names with valid references
> ##D getDefinedNames(wb)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getForceFormulaRecalculation-methods")
> ### * getForceFormulaRecalculation-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getForceFormulaRecalculation-methods
> ### Title: Querying the coordinates of the range reference by an Excel name
> ### Aliases: getForceFormulaRecalculation
> ###   getForceFormulaRecalculation-methods
> ###   getForceFormulaRecalculation,workbook,character-method
> ###   getForceFormulaRecalculation,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Ask whether Excel will automatically recalculate formulas on sheet mtcars
> ##D print(getForceFormulaRecalculation(wb, sheet = "mtcars"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getLastColumn-methods")
> ### * getLastColumn-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getLastColumn-methods
> ### Title: Querying the last (non-empty) column on a worksheet
> ### Aliases: getLastColumn getLastColumn-methods
> ###   getLastColumn,workbook,character-method
> ###   getLastColumn,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Query the last row of the 'mtcars' worksheet
> ##D getLastColumn(wb, "mtcars")
> ##D 
> ##D # Query the last row of the 'mtcars2' worksheet
> ##D getLastColumn(wb, "mtcars2")
> ##D 
> ##D # Query the last row of the 'mtcars3' worksheet
> ##D getLastColumn(wb, "mtcars3")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getLastRow-methods")
> ### * getLastRow-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getLastRow-methods
> ### Title: Querying the last (non-empty) row on a worksheet
> ### Aliases: getLastRow getLastRow-methods
> ###   getLastRow,workbook,character-method
> ###   getLastRow,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Query the last row of the 'mtcars' worksheet
> ##D getLastRow(wb, "mtcars")
> ##D 
> ##D # Query the last row of the 'mtcars2' worksheet
> ##D getLastRow(wb, "mtcars2")
> ##D 
> ##D # Query the last row of the 'mtcars3' worksheet
> ##D getLastRow(wb, "mtcars3")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getOrCreateCellStyle-methods")
> ### * getOrCreateCellStyle-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getOrCreateCellStyle-methods
> ### Title: Retrieving or creating named cell styles
> ### Aliases: getOrCreateCellStyle getOrCreateCellStyle-methods
> ###   getOrCreateCellStyle,workbook,character-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("getOrCreateCellStyle.xlsx", create = TRUE)
> ##D 
> ##D # The first time, the style does not exist yet and gets created
> ##D myStyle <- getOrCreateCellStyle(wb, name = "MyStyle")
> ##D 
> ##D # The second time, we retrieve the already existing style 
> ##D myStyle <- getOrCreateCellStyle(wb, name = "MyStyle")
> ##D 
> ##D # clean up 
> ##D file.remove("getOrCreateCellStyle.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getReferenceCoordinates-methods")
> ### * getReferenceCoordinates-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getReferenceCoordinates-methods
> ### Title: Querying the coordinates of the range reference by an Excel name
> ### Aliases: getReferenceCoordinates getReferenceCoordinates-methods
> ###   getReferenceCoordinates,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Query reference coordinate for name 'mtcars'
> ##D print(getReferenceCoordinatesForName(wb, name = "mtcars"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getReferenceCoordinatesForName-methods")
> ### * getReferenceCoordinatesForName-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getReferenceCoordinatesForName-methods
> ### Title: Querying the coordinates of the range reference by an Excel name
> ### Aliases: getReferenceCoordinatesForName
> ###   getReferenceCoordinatesForName-methods
> ###   getReferenceCoordinatesForName,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Query reference coordinate for name 'mtcars'
> ##D print(getReferenceCoordinatesForName(wb, name = "mtcars"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getReferenceCoordinatesForTable-methods")
> ### * getReferenceCoordinatesForTable-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getReferenceCoordinatesForTable-methods
> ### Title: Querying the coordinates of the range of an Excel table
> ### Aliases: getReferenceCoordinatesForTable
> ###   getReferenceCoordinatesForTable-methods
> ###   getReferenceCoordinatesForTable,workbook,numeric-method
> ###   getReferenceCoordinatesForTable,workbook,character-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Query reference coordinates for table 'MtcarsTable' on sheet
> ##D # 'mtcars_table'
> ##D print(getReferenceCoordinatesForTable(wb, sheet = "mtcars_table", 
> ##D                                       table = "MtcarsTable"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getReferenceFormula-methods")
> ### * getReferenceFormula-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getReferenceFormula-methods
> ### Title: Querying reference formulas of Excel names
> ### Aliases: getReferenceFormula getReferenceFormula-methods
> ###   getReferenceFormula,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Query reference formula for name 'mtcars'
> ##D print(getReferenceFormula(wb, name = "mtcars"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getSheetPos-methods")
> ### * getSheetPos-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getSheetPos-methods
> ### Title: Querying worksheet position
> ### Aliases: getSheetPos getSheetPos-methods
> ###   getSheetPos,workbook,character-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Query worksheet positions for the worksheets 'mtcars2', 'mtcars3',
> ##D # 'mtcars' and 'NotThere' (which actually does not exist)
> ##D print(getSheetPos(wb, sheet = c("mtcars2", "mtcars3", "mtcars", "NotThere")))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getSheets-methods")
> ### * getSheets-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getSheets-methods
> ### Title: Querying available worksheets in a workbook
> ### Aliases: getSheets getSheets-methods getSheets,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Query available worksheets
> ##D sheets <- getSheets(wb)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getTables-methods")
> ### * getTables-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getTables-methods
> ### Title: Querying available Excel tables in a workbook
> ### Aliases: getTables getTables-methods getTables,workbook,numeric-method
> ###   getTables,workbook,character-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Query available tables (table names) on sheet 'mtcars_table'
> ##D tables <- getTables(wb, sheet = "mtcars_table")
> ##D 
> ##D # ... or via sheet index
> ##D tables <- getTables(wb, sheet = 4)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("hideSheet-methods")
> ### * hideSheet-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hideSheet-methods
> ### Title: Hiding worksheets in a workbook
> ### Aliases: hideSheet hideSheet-methods
> ###   hideSheet,workbook,character-method hideSheet,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("hiddenWorksheet.xlsx", create = TRUE)
> ##D 
> ##D # Write a couple of built-in data.frame's into sheets
> ##D # with corresponding name
> ##D for(obj in c("CO2", "airquality", "swiss")) {
> ##D   createSheet(wb, name = obj)
> ##D   writeWorksheet(wb, get(obj), sheet = obj)
> ##D }
> ##D 
> ##D # Hide sheet 'airquality';
> ##D # the sheet may be unhidden by a user from within Excel
> ##D # since veryHidden defaults to FALSE
> ##D hideSheet(wb, sheet = "airquality")
> ##D 
> ##D # Save workbook
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("hiddenWorksheet.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("idx2aref")
> ### * idx2aref
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: idx2aref
> ### Title: Converting row and column based area references to Excel area
> ###   references
> ### Aliases: idx2aref
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D idx2aref(c(1, 1, 5, 4))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("idx2col")
> ### * idx2col
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: idx2col
> ### Title: Converting column indices to Excel column names
> ### Aliases: idx2col
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D idx2col(c(1, 347))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("idx2cref")
> ### * idx2cref
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: idx2cref
> ### Title: Converting indices to Excel cell references
> ### Aliases: idx2cref
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D idx2cref(c(5, 8, 14, 38))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("isSheetHidden-methods")
> ### * isSheetHidden-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isSheetHidden-methods
> ### Title: Checking if worksheets are hidden in a workbook
> ### Aliases: isSheetHidden isSheetHidden-methods
> ###   isSheetHidden,workbook,character-method
> ###   isSheetHidden,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("isSheetHidden.xlsx", create = TRUE)
> ##D 
> ##D # Write a couple of built-in data.frame's into sheets
> ##D # with corresponding name
> ##D for(obj in c("CO2", "airquality", "swiss")) {
> ##D   createSheet(wb, name = obj)
> ##D   writeWorksheet(wb, get(obj), sheet = obj)
> ##D }
> ##D 
> ##D # Hide sheet 'airquality'
> ##D hideSheet(wb, sheet = "airquality")
> ##D 
> ##D # Check if sheet 'airquality' is hidden;
> ##D # this should obviously return TRUE
> ##D isSheetHidden(wb, "airquality")
> ##D 
> ##D # Check if sheet 'swiss' is hidden;
> ##D # this should obviously return FALSE
> ##D isSheetHidden(wb, "swiss")
> ##D 
> ##D 
> ##D # clean up 
> ##D file.remove("isSheetHidden.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("isSheetVeryHidden-methods")
> ### * isSheetVeryHidden-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isSheetVeryHidden-methods
> ### Title: Checking if worksheets are very hidden in a workbook
> ### Aliases: isSheetVeryHidden isSheetVeryHidden-methods
> ###   isSheetVeryHidden,workbook,character-method
> ###   isSheetVeryHidden,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("isSheetVeryHidden.xlsx", create = TRUE)
> ##D 
> ##D # Write a couple of built-in data.frame's into sheets
> ##D # with corresponding name
> ##D for(obj in c("CO2", "airquality", "swiss")) {
> ##D   createSheet(wb, name = obj)
> ##D   writeWorksheet(wb, get(obj), sheet = obj)
> ##D }
> ##D 
> ##D # Very hide sheet 'airquality'
> ##D hideSheet(wb, sheet = "airquality", veryHidden = TRUE)
> ##D 
> ##D # Hide sheet 'CO2'
> ##D hideSheet(wb, sheet = "CO2", veryHidden = FALSE)
> ##D 
> ##D # Check if sheet 'airquality' is very hidden;
> ##D # this should obviously return TRUE
> ##D isSheetVeryHidden(wb, "airquality")
> ##D 
> ##D # Check if sheet 'swiss' is very hidden;
> ##D # this should obviously return FALSE
> ##D isSheetVeryHidden(wb, "swiss")
> ##D 
> ##D # Check if sheet 'CO2' is very hidden;
> ##D # this should also return FALSE - the sheet
> ##D # is just hidden but not very hidden
> ##D isSheetVeryHidden(wb, "CO2")
> ##D 
> ##D 
> ##D # clean up 
> ##D file.remove("isSheetVeryHidden.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("isSheetVisible-methods")
> ### * isSheetVisible-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isSheetVisible-methods
> ### Title: Checking if worksheets are visible in a workbook
> ### Aliases: isSheetVisible isSheetVisible-methods
> ###   isSheetVisible,workbook,character-method
> ###   isSheetVisible,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("isSheetVisible.xlsx", create = TRUE)
> ##D 
> ##D # Write a couple of built-in data.frame's into sheets
> ##D # with corresponding name
> ##D for(obj in c("CO2", "airquality", "swiss")) {
> ##D   createSheet(wb, name = obj)
> ##D   writeWorksheet(wb, get(obj), sheet = obj)
> ##D }
> ##D 
> ##D # Hide sheet 'CO2'
> ##D hideSheet(wb, sheet = "CO2", veryHidden = FALSE)
> ##D 
> ##D # Very hide sheet 'airquality'
> ##D hideSheet(wb, sheet = "airquality", veryHidden = TRUE)
> ##D 
> ##D # Check if sheet 'swiss' is visible;
> ##D # this should obviously return TRUE
> ##D isSheetVisible(wb, "swiss")
> ##D 
> ##D # Check if sheet 'CO2' is visible;
> ##D # this should obviously return FALSE
> ##D isSheetVisible(wb, "CO2")
> ##D 
> ##D # Check if sheet 'airquality' is visible;
> ##D # this should obviously return FALSE
> ##D isSheetVisible(wb, "airquality")
> ##D 
> ##D 
> ##D # clean up 
> ##D file.remove("isSheetVisible.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("jTryCatch")
> ### * jTryCatch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jTryCatch
> ### Title: Standard Java exception handling for XLConnect
> ### Aliases: jTryCatch
> ### Keywords: error internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D try(XLConnect:::jTryCatch(J("java.lang.Integer")$valueOf("not an integer")))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("loadWorkbook")
> ### * loadWorkbook
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loadWorkbook
> ### Title: Loading Microsoft Excel workbooks
> ### Aliases: loadWorkbook
> ### Keywords: file
> 
> ### ** Examples
> ## Not run: 
> ##D # Load existing demo Excel file 'mtcars.xlsx' from the XLConnect package
> ##D wb.mtcars <- loadWorkbook(system.file("demoFiles/mtcars.xlsx", 
> ##D                           package = "XLConnect"))
> ##D 
> ##D # Create new workbook
> ##D wb.new <- loadWorkbook("myNewExcelFile.xlsx", create = TRUE)
> ##D 
> ##D # NOTE: The above statement does not write the file to disk! 
> ##D # saveWorkbook(wb.new) would need to be called in order to write/save 
> ##D # the file to disk!
> ##D 
> ##D # clean up 
> ##D file.remove("myNewExcelFile.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("mergeCells-methods")
> ### * mergeCells-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mergeCells-methods
> ### Title: Merging cells
> ### Aliases: mergeCells mergeCells-methods
> ###   mergeCells,workbook,character-method
> ###   mergeCells,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("mergeCells.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet called 'merge'
> ##D createSheet(wb, name = "merge")
> ##D 
> ##D # Merge the cells A1:B8 on the worksheet created above
> ##D mergeCells(wb, sheet = "merge", reference = "A1:B8")
> ##D 
> ##D # Save workbook
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("mergeCells.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("onErrorCell-methods")
> ### * onErrorCell-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: onErrorCell-methods
> ### Title: Behavior when error cells are detected
> ### Aliases: onErrorCell onErrorCell-methods onErrorCell,workbook-method
> ### Keywords: utilities error
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # errorCell xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/errorCell.xlsx", 
> ##D 							  package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Set error behavior to XLC$ERROR.WARN when detecting error cells
> ##D # Note: this is the default behavior
> ##D onErrorCell(wb, XLC$ERROR.WARN)
> ##D # Alternatively: wb$onErrorCell(XLC$ERROR.WARN)
> ##D 
> ##D # Read named region 'MyData' (with default header = TRUE)
> ##D data <- readNamedRegion(wb, name = "MyData")
> ##D 
> ##D # Now set error behavior to XLC$ERROR.STOP to immediately
> ##D # issue an exception and stop in case an error cell is
> ##D # detected
> ##D onErrorCell(wb, XLC$ERROR.STOP)
> ##D # Alternatively: wb$onErrorCell(XLC$ERROR.STOP)
> ##D 
> ##D # Read (again) named region 'MyData' (with default header = TRUE)
> ##D res <- try(readNamedRegion(wb, name = "MyData"))
> ##D # Did we get an error?
> ##D print(is(res, "try-error"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("print-methods")
> ### * print-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print-methods
> ### Title: Print a workbook's filename
> ### Aliases: print print-methods print,workbook-method
> ### Keywords: methods print
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Load existing demo Excel file 'mtcars.xlsx' from the XLConnect package
> ##D wb.mtcars <- loadWorkbook(system.file("demoFiles/mtcars.xlsx", 
> ##D                           package = "XLConnect"))
> ##D 
> ##D # Print the workbook's underlying filename
> ##D print(wb.mtcars)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("readNamedRegion-methods")
> ### * readNamedRegion-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readNamedRegion
> ### Title: Reading named regions from a workbook
> ### Aliases: readNamedRegion readNamedRegion-methods
> ###   readNamedRegion,workbook-method
> ### Keywords: methods IO
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Example 1:
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Read named region 'mtcars' (with default header = TRUE)
> ##D data <- readNamedRegion(wb, name = "mtcars")
> ##D 
> ##D ## Example 2;
> ##D # conversion xlsx file from demoFiles subfolder of package XLConnect
> ##D excelFile <- system.file("demoFiles/conversion.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(excelFile)
> ##D 
> ##D # Read named region 'conversion' with pre-specified column types
> ##D # Note: in the worksheet all data was entered as strings!
> ##D # forceConversion = TRUE is used to force conversion from String
> ##D # into the less generic data types Numeric, DateTime & Boolean
> ##D df <- readNamedRegion(wb, name = "conversion", header = TRUE,
> ##D                       colTypes = c(XLC$DATA_TYPE.NUMERIC,
> ##D                                    XLC$DATA_TYPE.DATETIME,
> ##D                                    XLC$DATA_TYPE.BOOLEAN),
> ##D                       forceConversion = TRUE,
> ##D                       dateTimeFormat = "%Y-%m-%d %H:%M:%S")
> ##D                       
> ##D ## Example 3:
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Read the columns 1, 3 and 5 of the named region 'mtcars' (with default header = TRUE)
> ##D data <- readNamedRegion(wb, name = "mtcars", keep=c(1,3,5))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("readNamedRegionFromFile")
> ### * readNamedRegionFromFile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readNamedRegionFromFile
> ### Title: Reading named regions from an Excel file (wrapper function)
> ### Aliases: readNamedRegionFromFile
> ### Keywords: IO
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # multiregion xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/multiregion.xlsx", 
> ##D                              package = "XLConnect")
> ##D                              
> ##D # Load a single named region into a single data.frame.
> ##D df <- readNamedRegionFromFile(demoExcelFile, name="Iris")
> ##D 
> ##D # Load multiple regions at once - returns a (named) list 
> ##D # of data.frames.
> ##D df <- readNamedRegionFromFile(demoExcelFile, 
> ##D                               name=c("Calendar", "Iris", "IQ"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("readTable-methods")
> ### * readTable-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readTable
> ### Title: Reading Excel tables from a workbook
> ### Aliases: readTable readTable-methods readTable,workbook,numeric-method
> ###   readTable,workbook,character-method
> ### Keywords: methods IO
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Read table 'MtcarsTable' from sheet 'mtcars_table'
> ##D data <- readTable(wb, sheet = "mtcars_table", table = "MtcarsTable")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("readWorksheet-methods")
> ### * readWorksheet-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readWorksheet-methods
> ### Title: Reading data from worksheets
> ### Aliases: readWorksheet readWorksheet-methods
> ###   readWorksheet,workbook,character-method
> ###   readWorksheet,workbook,numeric-method
> ### Keywords: methods IO
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Example 1:
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Read worksheet 'mtcars' (providing no specific area bounds;
> ##D # with default header = TRUE)
> ##D data <- readWorksheet(wb, sheet = "mtcars")
> ##D 
> ##D 
> ##D ## Example 2:
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Read worksheet 'mtcars' (providing area bounds; with default header = TRUE)
> ##D data <- readWorksheet(wb, sheet = "mtcars", startRow = 1, startCol = 3,
> ##D                       endRow = 15, endCol = 8)
> ##D 
> ##D 
> ##D ## Example 3:
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Read worksheet 'mtcars' (providing area bounds using the region argument;
> ##D # with default header = TRUE)
> ##D data <- readWorksheet(wb, sheet = "mtcars", region = "C1:H15")
> ##D 
> ##D 
> ##D ## Example 4:
> ##D # conversion xlsx file from demoFiles subfolder of package XLConnect
> ##D excelFile <- system.file("demoFiles/conversion.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(excelFile)
> ##D 
> ##D # Read worksheet 'Conversion' with pre-specified column types
> ##D # Note: in the worksheet all data was entered as strings!
> ##D # forceConversion = TRUE is used to force conversion from String
> ##D # into the less generic data types Numeric, DateTime & Boolean
> ##D df <- readWorksheet(wb, sheet = "Conversion", header = TRUE,
> ##D                     colTypes = c(XLC$DATA_TYPE.NUMERIC,
> ##D                                  XLC$DATA_TYPE.DATETIME,
> ##D                                  XLC$DATA_TYPE.BOOLEAN),
> ##D                     forceConversion = TRUE,
> ##D                     dateTimeFormat = "%Y-%m-%d %H:%M:%S")
> ##D                     
> ##D ## Example 5:
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Read the columns 1, 3 and 5 from the sheet 'mtcars' (with default header = TRUE)
> ##D data <- readWorksheet(wb, sheet = "mtcars", keep=c(1,3,5))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("readWorksheetFromFile")
> ### * readWorksheetFromFile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readWorksheetFromFile
> ### Title: Reading data from worksheets in an Excel file (wrapper function)
> ### Aliases: readWorksheetFromFile
> ### Keywords: IO
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # multiregion xlsx file from demoFiles subfolder of 
> ##D # package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/multiregion.xlsx", 
> ##D                              package = "XLConnect")
> ##D 
> ##D # Read single area from first sheet of existing file,
> ##D # "B2:C3" in Excel speak
> ##D df.one <- readWorksheetFromFile(demoExcelFile, sheet = 1, 
> ##D                                 header = FALSE, startCol = 2, 
> ##D                                 startRow = 2, endCol = 3, 
> ##D                                 endRow = 3)
> ##D 
> ##D # Read three data sets in one from known positions
> ##D dflist <- readWorksheetFromFile(demoExcelFile,
> ##D                                 sheet = c("FirstSheet", 
> ##D                                           "FirstSheet", 
> ##D                                           "SecondSheet"),
> ##D                                 header = TRUE, 
> ##D                                 startRow = c(2,2,3), 
> ##D                                 startCol = c(2,5,2),
> ##D                                 endCol = c(5,8,6), 
> ##D                                 endRow = c(9,15,153))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("removeName-methods")
> ### * removeName-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: removeName-methods
> ### Title: Removing names from workbooks
> ### Aliases: removeName removeName-methods removeName,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D mtcarsFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(mtcarsFile)
> ##D 
> ##D # Remove the named region called 'mtcars' from the above file
> ##D # (this named region is defined as 'mtcars!$A$1:$K$33')
> ##D removeName(wb, name = "mtcars")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("removePane-methods")
> ### * removePane-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: removePane-methods
> ### Title: Removing panes from worksheet
> ### Aliases: removePane removePane-methods
> ###   removePane,workbook,character-method
> ###   removePane,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("removePaneTest.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet named 'Sheet1'
> ##D createSheet(wb, name = "Sheet1")
> ##D 
> ##D # Create a split pane on Sheet1, with coordinates (10000, 5000) expressed as 1/20th of a point,
> ##D # 10 (-> J) as left column visible in right pane and 10 as top row visible in bottom pane 
> ##D createSplitPane(wb, "Sheet1", 10000, 5000, 10, 10)
> ##D 
> ##D # Remove the split pane from Sheet1
> ##D removePane(wb, "Sheet1")
> ##D 
> ##D # Save workbook (this actually writes the file to disk). Now the workbook has no split pane.
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("removePaneTest.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("removeSheet-methods")
> ### * removeSheet-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: removeSheet-methods
> ### Title: Removing worksheets from workbooks
> ### Aliases: removeSheet removeSheet-methods
> ###   removeSheet,workbook,character-method
> ###   removeSheet,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D mtcarsFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(mtcarsFile)
> ##D 
> ##D # Remove the worksheet called 'mtcars' from the above file
> ##D removeSheet(wb, sheet = "mtcars")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("renameSheet-methods")
> ### * renameSheet-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: renameSheet-methods
> ### Title: Renaming worksheets from workbooks
> ### Aliases: renameSheet renameSheet-methods
> ###   renameSheet,workbook,character-method
> ###   renameSheet,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D mtcarsFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(mtcarsFile)
> ##D 
> ##D # Rename the worksheet called 'mtcars' from the above file to 'MyCars'
> ##D renameSheet(wb, sheet = "mtcars", newName = "MyCars")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("saveWorkbook-methods")
> ### * saveWorkbook-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: saveWorkbook-methods
> ### Title: Saving Microsoft Excel workbooks
> ### Aliases: saveWorkbook saveWorkbook-methods
> ###   saveWorkbook,workbook,missing-method
> ###   saveWorkbook,workbook,character-method
> ### Keywords: methods file
> 
> ### ** Examples
> ## Not run: 
> ##D # Create a new workbook 'saveMe.xlsx'
> ##D # (assuming the file to not exist already)
> ##D wb <- loadWorkbook("saveMe.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet called 'mtcars'
> ##D createSheet(wb, name = "mtcars")
> ##D 
> ##D # Write built-in dataset 'mtcars' to sheet 'mtcars' created above
> ##D writeWorksheet(wb, mtcars, sheet = "mtcars")
> ##D 
> ##D # Save workbook - this actually writes the file 'saveMe.xlsx' to disk
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("saveMe.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setActiveSheet-methods")
> ### * setActiveSheet-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setActiveSheet-methods
> ### Title: Setting the active worksheet in a workbook
> ### Aliases: setActiveSheet setActiveSheet-methods
> ###   setActiveSheet,workbook,character-method
> ###   setActiveSheet,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D mtcarsFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(mtcarsFile)
> ##D 
> ##D # Sets the active sheet to the sheet 'mtcars3'
> ##D setActiveSheet(wb, sheet = "mtcars3")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setAutoFilter-methods")
> ### * setAutoFilter-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setAutoFilter-methods
> ### Title: Setting auto-filters on worksheets
> ### Aliases: setAutoFilter setAutoFilter-methods
> ###   setAutoFilter,workbook,character-method
> ###   setAutoFilter,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("autofilter.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet named 'mtcars'
> ##D createSheet(wb, name = "mtcars")
> ##D 
> ##D # Create a named region called 'mtcars' on the sheet called 'mtcars'
> ##D createName(wb, name = "mtcars", formula = "mtcars!$A$1")
> ##D 
> ##D # Write built-in data set 'mtcars' to the above defined named region
> ##D # (using header = TRUE)
> ##D writeNamedRegion(wb, mtcars, name = "mtcars")
> ##D 
> ##D # Set an auto-filter for the named region written above
> ##D setAutoFilter(wb, sheet = "mtcars", reference = aref("A1", dim(mtcars)))
> ##D 
> ##D # Save workbook (this actually writes the file to disk)
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("autofilter.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setBorder-methods")
> ### * setBorder-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setBorder-methods
> ### Title: Specifying borders for cell styles
> ### Aliases: setBorder setBorder-methods setBorder,cellstyle-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("setBorder.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet
> ##D createSheet(wb, name = "cellstyles")
> ##D 
> ##D # Create a custom anonymous cell style
> ##D cs <- createCellStyle(wb)
> ##D 
> ##D # Specify the border for the cell style created above
> ##D setBorder(cs, side = c("bottom", "right"), type = XLC$"BORDER.THICK", 
> ##D           color = c(XLC$"COLOR.BLACK", XLC$"COLOR.RED"))
> ##D 
> ##D # Set the cell style created above for the top left cell (A1) in the 
> ##D # 'cellstyles' worksheet
> ##D setCellStyle(wb, sheet = "cellstyles", row = 1, col = 1, cellstyle = cs)
> ##D 
> ##D # Save the workbook
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("setBorder.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setCellFormula-methods")
> ### * setCellFormula-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setCellFormula-methods
> ### Title: Setting cell formulas
> ### Aliases: setCellFormula setCellFormula-methods
> ###   setCellFormula,workbook,character-method
> ###   setCellFormula,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("setCellFormula.xls", create = TRUE)
> ##D 
> ##D # Create a sheet named 'mtcars'
> ##D createSheet(wb, name = "mtcars")
> ##D 
> ##D # Create a named region called 'mtcars' referring to the sheet
> ##D # called 'mtcars'
> ##D createName(wb, name = "mtcars", formula = "mtcars!$A$1")
> ##D 
> ##D # Write built-in data set 'mtcars' to the above defined named region.
> ##D writeNamedRegion(wb, mtcars, name = "mtcars")
> ##D 
> ##D # Now, let us get Excel to calculate average weights.
> ##D # Where did we write the dataset?
> ##D corners <- getReferenceCoordinatesForName(wb, "mtcars")
> ##D # Put the average under the wt column
> ##D colIndex <- which(names(mtcars) == "wt") 
> ##D rowIndex <- corners[2,1] + 1
> ##D 
> ##D # Construct the input range & formula
> ##D input <- paste(idx2cref(c(corners[1,1], colIndex, 
> ##D                           corners[2,1], colIndex)), collapse=":")
> ##D formula <- paste("AVERAGE(", input, ")", sep="") 
> ##D             
> ##D setCellFormula(wb, "mtcars", rowIndex, colIndex, formula)
> ##D 
> ##D # Save workbook (this actually writes the file to disk)
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("setCellFormula.xls")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setCellStyle-methods")
> ### * setCellStyle-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setCellStyle-methods
> ### Title: Setting cell styles
> ### Aliases: setCellStyle setCellStyle-methods
> ###   setCellStyle,workbook,missing,character-method
> ###   setCellStyle,workbook,missing,numeric-method
> ###   setCellStyle,workbook,character,missing-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("setCellStyle.xlsx", create = TRUE)
> ##D 
> ##D # We don't set a specific style action in this demo, so the default 
> ##D # 'XLConnect' will be used (XLC$"STYLE_ACTION.XLCONNECT")
> ##D 
> ##D # Create a sheet named 'mtcars'
> ##D createSheet(wb, name = "mtcars")
> ##D 
> ##D # Create a named region called 'mtcars' referring to the sheet
> ##D # called 'mtcars'
> ##D createName(wb, name = "mtcars", formula = "mtcars!$C$4")
> ##D 
> ##D # Write built-in data set 'mtcars' to the above defined named region.
> ##D # This will use the default style action 'XLConnect'.
> ##D writeNamedRegion(wb, mtcars, name = "mtcars")
> ##D 
> ##D # Now let's color all weight cells of cars with a weight > 3.5 in red
> ##D # (mtcars$wt > 3.5)
> ##D 
> ##D # First, create a corresponding (named) cell style
> ##D heavyCar <- createCellStyle(wb, name = "HeavyCar")
> ##D 
> ##D # Specify the cell style to use a solid foreground color
> ##D setFillPattern(heavyCar, fill = XLC$"FILL.SOLID_FOREGROUND")
> ##D 
> ##D # Specify the foreground color to be used
> ##D setFillForegroundColor(heavyCar, color = XLC$"COLOR.RED")
> ##D 
> ##D # Which cars have a weight > 3.5 ?
> ##D rowIndex <- which(mtcars$wt > 3.5)
> ##D 
> ##D # NOTE: The mtcars data.frame has been written offset with
> ##D # top left cell C4 - and we have also written a header row!
> ##D # So, let's take that into account appropriately. Obviously,
> ##D # the two steps could be combined directly into one ...
> ##D rowIndex <- rowIndex + 4
> ##D 
> ##D # The same holds for the column index
> ##D colIndex <- which(names(mtcars) == "wt") + 2
> ##D 
> ##D # Set the 'HeavyCar' cell style for the corresponding cells.
> ##D # Note: the row and col arguments are vectorized!
> ##D setCellStyle(wb, sheet = "mtcars", row = rowIndex, col = colIndex, 
> ##D              cellstyle = heavyCar)
> ##D 
> ##D # Save workbook (this actually writes the file to disk)
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("setCellStyle.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setCellStyleForType-methods")
> ### * setCellStyleForType-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setCellStyleForType-methods
> ### Title: Setting the cell style per data type for the DATATYPE style
> ###   action
> ### Aliases: setCellStyleForType setCellStyleForType-methods
> ###   setCellStyleForType,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D file.copy(system.file("demoFiles/template2.xlsx", 
> ##D                       package = "XLConnect"),
> ##D           "datatype.xlsx", overwrite = TRUE)
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook("datatype.xlsx")
> ##D 
> ##D # Create a new cell style to be used
> ##D cs <- createCellStyle(wb, name = "mystyle")
> ##D 
> ##D # Set data format (number format) as numbers with aligned fractions
> ##D setDataFormat(cs, format = "# ???/???")
> ##D 
> ##D # Define the above created cell style as style to be used for
> ##D # numerics
> ##D setCellStyleForType(wb, type = XLC$"DATA_TYPE.NUMERIC", style = cs)
> ##D # Could also say cs <- setCellStyleForType(wb, "numeric")
> ##D           
> ##D # Set style action to 'datatype'
> ##D setStyleAction(wb, XLC$"STYLE_ACTION.DATATYPE")
> ##D 
> ##D # Write built-in data set 'mtcars' to the named region 
> ##D # 'mtcars' as defined by the Excel template.
> ##D writeNamedRegion(wb, mtcars, name = "mtcars")
> ##D 
> ##D # Save workbook
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up
> ##D file.remove("datatype.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setColumnWidth-methods")
> ### * setColumnWidth-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setColumnWidth-methods
> ### Title: Setting the width of a column in a worksheet
> ### Aliases: setColumnWidth setColumnWidth-methods
> ###   setColumnWidth,workbook,character-method
> ###   setColumnWidth,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D mtcarsFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(mtcarsFile)
> ##D 
> ##D # Sets the column width of the 3rd column on sheet 'mtcars' 
> ##D # to 4000/256th (= 15.625) character width
> ##D setColumnWidth(wb, sheet = "mtcars", column = 3, width = 4000)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setDataFormat-methods")
> ### * setDataFormat-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setDataFormat-methods
> ### Title: Specifying custom data formats for cell styles
> ### Aliases: setDataFormat setDataFormat-methods
> ###   setDataFormat,cellstyle-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("setDataFormat.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet
> ##D createSheet(wb, name = "cellstyles")
> ##D 
> ##D # Create a dummy data set with the current date/time (as POSIXct)
> ##D now <- data.frame(Now = Sys.time())
> ##D 
> ##D # Write the value to the 'cellstyles' worksheet in the top left 
> ##D # corner (cell A1)
> ##D writeWorksheet(wb, now, sheet = "cellstyles", startRow = 1, 
> ##D                startCol = 1, header = FALSE)
> ##D 
> ##D # Create a custom anonymous cell style
> ##D cs <- createCellStyle(wb)
> ##D 
> ##D # Specify a custom data format
> ##D setDataFormat(cs, format = "dddd d-m-yyyy h:mm AM/PM")
> ##D 
> ##D # Set the cell style created above for the top left cell (A1) in 
> ##D # the 'cellstyles' worksheet
> ##D setCellStyle(wb, sheet = "cellstyles", row = 1, col = 1, cellstyle = cs)
> ##D 
> ##D # Set column width to display whole time/date string
> ##D setColumnWidth(wb, sheet = "cellstyles", column = 1, width = 6000)
> ##D 
> ##D # Save the workbook
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("setDataFormat.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setDataFormatForType-methods")
> ### * setDataFormatForType-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setDataFormatForType-methods
> ### Title: Setting the data format for the DATA_FORMAT_ONLY style action
> ### Aliases: setDataFormatForType setDataFormatForType-methods
> ###   setDataFormatForType,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Copy existing Excel template to working directory
> ##D file.copy(system.file("demoFiles/template2.xlsx", 
> ##D                       package = "XLConnect"),
> ##D           "dataformat.xlsx", overwrite = TRUE)
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook("dataformat.xlsx")
> ##D 
> ##D # Set the data format for numeric columns (cells)
> ##D # (keeping the defaults for all other data types)
> ##D setDataFormatForType(wb, type = XLC$"DATA_TYPE.NUMERIC", 
> ##D                      format = "0.00")
> ##D 
> ##D # Set style action to 'data format only'
> ##D setStyleAction(wb, XLC$"STYLE_ACTION.DATA_FORMAT_ONLY")
> ##D 
> ##D # Write built-in data set 'mtcars' to the named region 
> ##D # 'mtcars' as defined by the Excel template.
> ##D writeNamedRegion(wb, mtcars, name = "mtcars")
> ##D 
> ##D # Save workbook
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up
> ##D file.remove("dataformat.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setFillBackgroundColor-methods")
> ### * setFillBackgroundColor-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setFillBackgroundColor-methods
> ### Title: Specifying the fill background color for cell styles
> ### Aliases: setFillBackgroundColor setFillBackgroundColor-methods
> ###   setFillBackgroundColor,cellstyle,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("setFillBackgroundColor.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet
> ##D createSheet(wb, name = "cellstyles")
> ##D 
> ##D # Create a custom anonymous cell style
> ##D cs <- createCellStyle(wb)
> ##D 
> ##D # Specify the fill background color for the cell style created above
> ##D setFillBackgroundColor(cs, color = XLC$"COLOR.CORNFLOWER_BLUE")
> ##D 
> ##D # Specify the fill foreground color
> ##D setFillForegroundColor(cs, color = XLC$"COLOR.YELLOW")
> ##D 
> ##D # Specify the fill pattern
> ##D setFillPattern(cs, fill = XLC$"FILL.BIG_SPOTS")
> ##D 
> ##D # Set the cell style created above for the top left cell (A1) in the 
> ##D # 'cellstyles' worksheet
> ##D setCellStyle(wb, sheet = "cellstyles", row = 1, col = 1, cellstyle = cs)
> ##D 
> ##D # Save the workbook
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("setFillBackgroundColor.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setFillForegroundColor-methods")
> ### * setFillForegroundColor-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setFillForegroundColor-methods
> ### Title: Specifying the fill foreground color for cell styles
> ### Aliases: setFillForegroundColor setFillForegroundColor-methods
> ###   setFillForegroundColor,cellstyle,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("setFillForegroundColor.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet
> ##D createSheet(wb, name = "cellstyles")
> ##D 
> ##D # Create a custom anonymous cell style
> ##D cs <- createCellStyle(wb)
> ##D 
> ##D # Specify the fill background color for the cell style created above
> ##D setFillBackgroundColor(cs, color = XLC$"COLOR.CORNFLOWER_BLUE")
> ##D 
> ##D # Specify the fill foreground color
> ##D setFillForegroundColor(cs, color = XLC$"COLOR.YELLOW")
> ##D 
> ##D # Specify the fill pattern
> ##D setFillPattern(cs, fill = XLC$"FILL.BIG_SPOTS")
> ##D 
> ##D # Set the cell style created above for the top left cell (A1) in the
> ##D # 'cellstyles' worksheet
> ##D setCellStyle(wb, sheet = "cellstyles", row = 1, col = 1, cellstyle = cs)
> ##D 
> ##D # Save the workbook
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("setFillForegroundColor.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setFillPattern-methods")
> ### * setFillPattern-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setFillPattern-methods
> ### Title: Specifying the fill pattern for cell styles
> ### Aliases: setFillPattern setFillPattern-methods
> ###   setFillPattern,cellstyle-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("setFillPattern.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet
> ##D createSheet(wb, name = "cellstyles")
> ##D 
> ##D # Create a custom anonymous cell style
> ##D cs <- createCellStyle(wb)
> ##D 
> ##D # Specify the fill background color for the cell style created above
> ##D setFillBackgroundColor(cs, color = XLC$"COLOR.CORNFLOWER_BLUE")
> ##D 
> ##D # Specify the fill foreground color
> ##D setFillForegroundColor(cs, color = XLC$"COLOR.YELLOW")
> ##D 
> ##D # Specify the fill pattern
> ##D setFillPattern(cs, fill = XLC$"FILL.BIG_SPOTS")
> ##D 
> ##D # Set the cell style created above for the top left cell (A1) in the
> ##D # 'cellstyles' worksheet
> ##D setCellStyle(wb, sheet = "cellstyles", row = 1, col = 1, cellstyle = cs)
> ##D 
> ##D # Save the workbook
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("setFillPattern.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setForceFormulaRecalculation-methods")
> ### * setForceFormulaRecalculation-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setForceFormulaRecalculation-methods
> ### Title: Forcing Excel to recalculate formula values when opening a
> ###   workbook
> ### Aliases: setForceFormulaRecalculation
> ###   setForceFormulaRecalculation-methods
> ###   setForceFormulaRecalculation,workbook,character-method
> ###   setForceFormulaRecalculation,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Tell Excel to automatically recalculate formulas on sheet mtcars
> ##D setForceFormulaRecalculation(wb, sheet = "mtcars", TRUE)
> ##D # The same with a numerical sheet index
> ##D setForceFormulaRecalculation(wb, sheet = 1, TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setHyperlink-methods")
> ### * setHyperlink-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setHyperlink-methods
> ### Title: Setting hyperlinks
> ### Aliases: setHyperlink setHyperlink-methods
> ###   setHyperlink,workbook,missing,character-method
> ###   setHyperlink,workbook,missing,numeric-method
> ###   setHyperlink,workbook,character,missing-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("setHyperlink.xlsx", create = TRUE)
> ##D 
> ##D # Create a sheet named 'mtcars'
> ##D createSheet(wb, name = "mtcars")
> ##D 
> ##D 
> ##D # Write built-in data set 'mtcars' to the above defined worksheet
> ##D writeWorksheet(wb, mtcars, sheet = "mtcars", rownames = "Car")
> ##D 
> ##D # Set hyperlinks
> ##D links <- paste0("https://www.google.com?q=", gsub(" ", "+", rownames(mtcars)))
> ##D setHyperlink(wb, sheet = "mtcars", row = seq_len(nrow(mtcars)) + 1, col = 1,
> ##D   type = XLC$HYPERLINK.URL, address = links)
> ##D 
> ##D # Save workbook (this actually writes the file to disk)
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("setHyperlink.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setMissingValue-methods")
> ### * setMissingValue-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setMissingValue-methods
> ### Title: Setting missing value identifiers
> ### Aliases: setMissingValue setMissingValue-methods
> ###   setMissingValue,workbook-method setMissingValue,workbook,ANY-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("missingValue.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet named 'airquality'
> ##D createSheet(wb, name = "airquality")
> ##D 
> ##D # Create a named region called 'airquality' on the sheet called
> ##D # 'airquality'
> ##D createName(wb, name = "airquality", formula = "airquality!$A$1")
> ##D 
> ##D # Set the missing value string to 'missing'
> ##D setMissingValue(wb, value = "missing")
> ##D 
> ##D # Write built-in data set 'airquality' to the above defined named region
> ##D writeNamedRegion(wb, airquality, name = "airquality")
> ##D 
> ##D # Save workbook
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("missingValue.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setRowHeight-methods")
> ### * setRowHeight-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setRowHeight-methods
> ### Title: Setting the height of a row in a worksheet
> ### Aliases: setRowHeight setRowHeight-methods
> ###   setRowHeight,workbook,character-method
> ###   setRowHeight,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D mtcarsFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(mtcarsFile)
> ##D 
> ##D # Sets the row height of the 1st row on sheet 'mtcars'
> ##D # to 20 points
> ##D setRowHeight(wb, sheet = "mtcars", row = 1, height = 20)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setSheetColor-methods")
> ### * setSheetColor-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setSheetColor-methods
> ### Title: Setting colors on worksheet tabs
> ### Aliases: setSheetColor setSheetColor-methods
> ###   setSheetColor,workbook,character-method
> ###   setSheetColor,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("sheetcolor.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet named 'Sheet1'
> ##D createSheet(wb, name = "Sheet1")
> ##D 
> ##D # Set the "Sheet1" tab color as red
> ##D setSheetColor(wb, "Sheet1", XLC$COLOR.RED)
> ##D 
> ##D # Create a worksheet named 'Sheet2'
> ##D createSheet(wb, name = "Sheet2")
> ##D 
> ##D # Set the tab color of the second workbook sheet as green
> ##D setSheetColor(wb, 2, XLC$COLOR.GREEN)
> ##D 
> ##D # Save workbook (this actually writes the file to disk)
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("sheetcolor.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setSheetPos-methods")
> ### * setSheetPos-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setSheetPos-methods
> ### Title: Setting worksheet position
> ### Aliases: setSheetPos setSheetPos-methods
> ###   setSheetPos,workbook,character,missing-method
> ###   setSheetPos,workbook,character,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # mtcars xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/mtcars.xlsx", package = "XLConnect")
> ##D 
> ##D # Load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # Move the 'mtcars3' worksheet to the front
> ##D setSheetPos(wb, sheet = "mtcars3", pos = 1)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setStyleAction-methods")
> ### * setStyleAction-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setStyleAction-methods
> ### Title: Controlling application of cell styles when writing data to
> ###   Excel
> ### Aliases: setStyleAction setStyleAction-methods
> ###   setStyleAction,workbook-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("styleaction.xlsx", create = TRUE)
> ##D 
> ##D # Set style action to 'name prefix' 
> ##D setStyleAction(wb, XLC$"STYLE_ACTION.NAME_PREFIX")
> ##D # Set the name prefix to 'MyPersonalStyle'
> ##D setStyleNamePrefix(wb, "MyPersonalStyle")
> ##D 
> ##D # We now create a named cell style to be used for the header 
> ##D # (column names) of a data.frame
> ##D headerCellStyle <- createCellStyle(wb, 
> ##D                              name = "MyPersonalStyle.Header")
> ##D 
> ##D # Specify the cell style to use a solid foreground color
> ##D setFillPattern(headerCellStyle, 
> ##D                fill = XLC$"FILL.SOLID_FOREGROUND")
> ##D 
> ##D # Specify the foreground color to be used
> ##D setFillForegroundColor(headerCellStyle, 
> ##D                     color = XLC$"COLOR.LIGHT_CORNFLOWER_BLUE")
> ##D 
> ##D # Specify a thick black bottom border
> ##D setBorder(headerCellStyle, side = "bottom", 
> ##D           type = XLC$"BORDER.THICK", 
> ##D           color = XLC$"COLOR.BLACK")
> ##D 
> ##D # We now create a named cell style to be used for 
> ##D # the column named 'wt' (as you will see below, we will 
> ##D # write the built-in data.frame 'mtcars')
> ##D wtColumnCellStyle <- createCellStyle(wb, 
> ##D                            name = "MyPersonalStyle.Column.wt")
> ##D 
> ##D # Specify the cell style to use a solid foreground color
> ##D setFillPattern(wtColumnCellStyle, 
> ##D                fill = XLC$"FILL.SOLID_FOREGROUND")
> ##D 
> ##D # Specify the foreground color to be used
> ##D setFillForegroundColor(wtColumnCellStyle, 
> ##D                        color = XLC$"COLOR.LIGHT_ORANGE")
> ##D 
> ##D # We now create a named cell style to be used for 
> ##D # the 3rd column in the data.frame
> ##D wtColumnCellStyle <- createCellStyle(wb, 
> ##D                             name = "MyPersonalStyle.Column.3")
> ##D 
> ##D # Specify the cell style to use a solid foreground color
> ##D setFillPattern(wtColumnCellStyle, 
> ##D                fill = XLC$"FILL.SOLID_FOREGROUND")
> ##D 
> ##D # Specify the foreground color to be used
> ##D setFillForegroundColor(wtColumnCellStyle, 
> ##D                        color = XLC$"COLOR.LIME")
> ##D 
> ##D # Create a sheet named 'mtcars'
> ##D createSheet(wb, name = "mtcars")
> ##D 
> ##D # Create a named region called 'mtcars' referring to 
> ##D # the sheet called 'mtcars'
> ##D createName(wb, name = "mtcars", formula = "mtcars!$A$1")
> ##D 
> ##D # Write built-in data set 'mtcars' to the above defined named region.
> ##D # The style action 'name prefix' will be used when writing the data
> ##D # as defined above.
> ##D writeNamedRegion(wb, mtcars, name = "mtcars")
> ##D 
> ##D # Save workbook (this actually writes the file to disk)
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("styleaction.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setWrapText-methods")
> ### * setWrapText-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setWrapText-methods
> ### Title: Specifying text wrapping behaviour
> ### Aliases: setWrapText setWrapText-methods setWrapText,cellstyle-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("setWrapText.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet
> ##D createSheet(wb, name = "cellstyles")
> ##D 
> ##D # Create a dummy data set with some long text
> ##D text <- data.frame(
> ##D      Text = "Some very very very very very very very long text")
> ##D 
> ##D # Write the value to the 'cellstyles' worksheet in the 
> ##D # top left corner (cell A1)
> ##D writeWorksheet(wb, text, sheet = "cellstyles", startRow = 1, 
> ##D                startCol = 1, header = FALSE)
> ##D 
> ##D # Create a custom anonymous cell style
> ##D cs <- createCellStyle(wb)
> ##D 
> ##D # Specify to wrap the text
> ##D setWrapText(cs, wrap = TRUE)
> ##D 
> ##D # Set the cell style created above for the top left cell (A1) 
> ##D # in the 'cellstyles' worksheet
> ##D setCellStyle(wb, sheet = "cellstyles", row = 1, col = 1, 
> ##D              cellstyle = cs)
> ##D 
> ##D # Save the workbook
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("setWrapText.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("show-methods")
> ### * show-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: show-methods
> ### Title: Display a workbook object
> ### Aliases: show show-methods show,workbook-method
> ### Keywords: methods print
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Load existing demo Excel file 'mtcars.xlsx' from the XLConnect package
> ##D wb.mtcars <- loadWorkbook(system.file("demoFiles/mtcars.xlsx", 
> ##D                           package = "XLConnect"))
> ##D 
> ##D # Display the wb.mtcars object
> ##D wb.mtcars
> ##D 
> ##D # Alternatively, show can be called explicitely
> ##D show(wb.mtcars)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("summary-methods")
> ### * summary-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary-methods
> ### Title: Summarizing workbook objects
> ### Aliases: summary summary-methods summary,workbook-method
> ### Keywords: methods print utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Load existing demo Excel file 'mtcars.xlsx' from the XLConnect package
> ##D wb.mtcars <- loadWorkbook(system.file("demoFiles/mtcars.xlsx", 
> ##D                           package = "XLConnect"))
> ##D 
> ##D # Print a workbook summary
> ##D summary(wb.mtcars)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("unhideSheet-methods")
> ### * unhideSheet-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unhideSheet-methods
> ### Title: Unhiding worksheets in a workbook
> ### Aliases: unhideSheet unhideSheet-methods
> ###   unhideSheet,workbook,character-method
> ###   unhideSheet,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("unhideWorksheet.xlsx", create = TRUE)
> ##D 
> ##D # Create sheet 'airquality'
> ##D createSheet(wb, name = "airquality")
> ##D 
> ##D # Write the built-in data set airquality to worksheet
> ##D # 'airquality'
> ##D writeWorksheet(wb, airquality, sheet = "airquality")
> ##D 
> ##D # Create sheet 'CO2'
> ##D createSheet(wb, name = "CO2")
> ##D 
> ##D # Write the built-in data set CO2 to worksheet 'C02'
> ##D writeWorksheet(wb, CO2, sheet = "CO2")
> ##D 
> ##D # Hide sheet 'airquality'
> ##D hideSheet(wb, sheet = "airquality")
> ##D 
> ##D # Unhide sheet 'airquality'
> ##D unhideSheet(wb, sheet = "airquality")
> ##D 
> ##D # clean up 
> ##D file.remove("unhideWorksheet.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("unmergeCells-methods")
> ### * unmergeCells-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unmergeCells-methods
> ### Title: Unmerging cells
> ### Aliases: unmergeCells unmergeCells-methods
> ###   unmergeCells,workbook,character-method
> ###   unmergeCells,workbook,numeric-method
> ### Keywords: methods utilities
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("unmergeCells.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet called 'merge'
> ##D createSheet(wb, name = "merge")
> ##D 
> ##D # Merge the cells A1:B8 on the worksheet created above
> ##D mergeCells(wb, sheet = "merge", reference = "A1:B8")
> ##D 
> ##D # Unmerge the cells A1:B8
> ##D unmergeCells(wb, sheet = "merge", reference = "A1:B8")
> ##D 
> ##D # clean up 
> ##D file.remove("unmergeCells.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("with.workbook")
> ### * with.workbook
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: with.workbook
> ### Title: Evaluate an R expression in a workbook environment
> ### Aliases: with.workbook
> ### Keywords: IO
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # multiregion xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/multiregion.xlsx",
> ##D                              package = "XLConnect")
> ##D 
> ##D # load workbook
> ##D wb <- loadWorkbook(demoExcelFile)
> ##D 
> ##D # named regions: Calendar, IQ, Iris
> ##D print(getDefinedNames(wb))
> ##D 
> ##D # named regions as variables
> ##D with(wb, { 
> ##D   print(Calendar)
> ##D   summary(IQ)
> ##D   summary(Iris)
> ##D })
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("workbook-class")
> ### * workbook-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: workbook-class
> ### Title: Class "workbook"
> ### Aliases: workbook-class
> ### Keywords: classes
> 
> ### ** Examples
> ## Not run: 
> ##D # Create a new workbook 'myWorkbook.xlsx' 
> ##D # (assuming the file to not exist already)
> ##D wb <- loadWorkbook("myWorkbook.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet called 'mtcars'
> ##D createSheet(wb, name = "mtcars")
> ##D 
> ##D # Write built-in dataset 'mtcars' to sheet 'mtcars' created above
> ##D writeWorksheet(wb, mtcars, sheet = "mtcars")
> ##D 
> ##D # Save workbook - this actually writes the file 'myWorkbook.xlsx' to disk
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("myWorkbook.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("writeNamedRegion-methods")
> ### * writeNamedRegion-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeNamedRegion-methods
> ### Title: Writing named regions to a workbook
> ### Aliases: writeNamedRegion writeNamedRegion-methods
> ###   writeNamedRegion,workbook-method writeNamedRegion,workbook,ANY-method
> ### Keywords: methods IO
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("writeNamedRegion.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet named 'mtcars'
> ##D createSheet(wb, name = "mtcars")
> ##D 
> ##D # Create a named region called 'mtcars' on the sheet called 'mtcars'
> ##D createName(wb, name = "mtcars", formula = "mtcars!$A$1")
> ##D 
> ##D # Write built-in data set 'mtcars' to the above defined named region
> ##D # (using header = TRUE)
> ##D writeNamedRegion(wb, mtcars, name = "mtcars")
> ##D 
> ##D # Save workbook (this actually writes the file to disk)
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("writeNamedRegion.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("writeNamedRegionToFile")
> ### * writeNamedRegionToFile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeNamedRegionToFile
> ### Title: Writing named regions to an Excel file (wrapper function)
> ### Aliases: writeNamedRegionToFile
> ### Keywords: IO
> 
> ### ** Examples
> ## Not run: 
> ##D # multiregion xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/multiregion.xlsx", 
> ##D                              package = "XLConnect")
> ##D 
> ##D template <- "template-ws.xlsx"
> ##D file.copy(demoExcelFile, template) 
> ##D 
> ##D # Write single data.frame to a named region in an existing file
> ##D writeNamedRegionToFile(template, name = "Iris", iris)
> ##D 
> ##D # Write to a new file, defining the sheet and named region as we write.
> ##D # Format according to XLConnect defaults
> ##D writeNamedRegionToFile("iris.xlsx", name = "Iris", data = iris,
> ##D                        formula = "IrisData!$C$4", 
> ##D                        styleAction = "XLCONNECT")
> ##D # clean up
> ##D file.remove("iris.xlsx")
> ##D file.remove("template-ws.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("writeWorksheet-methods")
> ### * writeWorksheet-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeWorksheet-methods
> ### Title: Writing data to worksheets
> ### Aliases: writeWorksheet writeWorksheet-methods
> ###   writeWorksheet,workbook,ANY,character-method
> ###   writeWorksheet,workbook,ANY,numeric-method
> ### Keywords: methods IO
> 
> ### ** Examples
> ## Not run: 
> ##D # Load workbook (create if not existing)
> ##D wb <- loadWorkbook("writeWorksheet.xlsx", create = TRUE)
> ##D 
> ##D # Create a worksheet called 'CO2'
> ##D createSheet(wb, name = "CO2")
> ##D 
> ##D # Write built-in data set 'CO2' to the worksheet created above;
> ##D # offset from the top left corner and with default header = TRUE
> ##D writeWorksheet(wb, CO2, sheet = "CO2", startRow = 4, startCol = 2)
> ##D 
> ##D # Save workbook (this actually writes the file to disk)
> ##D saveWorkbook(wb)
> ##D 
> ##D # clean up 
> ##D file.remove("writeWorksheet.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("writeWorksheetToFile")
> ### * writeWorksheetToFile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeWorksheetToFile
> ### Title: Writing data to worksheets in an Excel file (wrapper function)
> ### Aliases: writeWorksheetToFile
> ### Keywords: IO
> 
> ### ** Examples
> ## Not run: 
> ##D # multiregion xlsx file from demoFiles subfolder of package XLConnect
> ##D demoExcelFile <- system.file("demoFiles/multiregion.xlsx",
> ##D                              package = "XLConnect")
> ##D 
> ##D # create a copy of the template
> ##D template <- "template-ws.xlsx"
> ##D file.copy(demoExcelFile, template) 
> ##D 
> ##D # Write single data.frame to a specified location in an existing file
> ##D writeWorksheetToFile(template, data=iris, sheet="FirstSheet",
> ##D                      startRow=9, startCol = 9)
> ##D 
> ##D # create a copy of the template
> ##D template <- "template-multi-ws.xlsx"
> ##D 
> ##D # Write a few copies of the data.frame all over a new file
> ##D writeWorksheetToFile(template, data = list(i1 = iris, i2 = iris, i3 = iris),
> ##D                      sheet = c("FirstSheet", "SecondSheet", "FirstSheet"),
> ##D                      startRow = c(1,101,201), startCol = c(1,11,21))
> ##D 
> ##D # clean up
> ##D file.remove("template-multi-ws.xlsx")
> ##D file.remove("template-ws.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("xlcDump")
> ### * xlcDump
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: xlcDump
> ### Title: Dumping data sets to Excel files
> ### Aliases: xlcDump
> ### Keywords: utilities file
> 
> ### ** Examples
> ## Not run: 
> ##D require(datasets)
> ##D xlcDump(c("airquality", "CO2", "iris", "PlantGrowth", "swiss"),
> ##D         file = "myDump.xlsx", pos = "package:datasets")
> ##D xlcRestore(file = "myDump.xlsx", overwrite = TRUE)
> ##D # clean up
> ##D file.remove("myDump.xlsx")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("xlcEdit")
> ### * xlcEdit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: xlcEdit
> ### Title: Editing data sets in an Excel file editor
> ### Aliases: xlcEdit
> ### Keywords: utilities misc
> 
> ### ** Examples
> 
> ## Not run: 
> ##D myObj = mtcars
> ##D xlcEdit(myObj)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("xlcFreeMemory")
> ### * xlcFreeMemory
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: xlcFreeMemory
> ### Title: Freeing Java Virtual Machine memory
> ### Aliases: xlcFreeMemory
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D xlcFreeMemory()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("xlcMemoryReport")
> ### * xlcMemoryReport
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: xlcMemoryReport
> ### Title: Reporting free Java Virtual Machine memory
> ### Aliases: xlcMemoryReport
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D xlcMemoryReport()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("xlcRestore")
> ### * xlcRestore
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: xlcRestore
> ### Title: Restoring objects from Excel files
> ### Aliases: xlcRestore
> ### Keywords: utilities file
> 
> ### ** Examples
> ## Not run: 
> ##D require(datasets)
> ##D xlcDump(c("airquality", "CO2", "iris", "PlantGrowth", "swiss"),
> ##D         file = "myDump.xlsx", pos = "package:datasets")
> ##D xlcRestore(file = "myDump.xlsx", overwrite = TRUE)
> ##D # clean up
> ##D file.remove("myDump.xlsx")
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.911 0.063 1.182 0.07 0.069 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')

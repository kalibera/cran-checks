
R Under development (unstable) (2023-08-27 r85017) -- "Unsuffered Consequences"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "jlmerclusterperm"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('jlmerclusterperm')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("calculate_clusters_pvalues")
> ### * calculate_clusters_pvalues
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calculate_clusters_pvalues
> ### Title: Calculate bootstrapped p-values of cluster-mass statistics
> ### Aliases: calculate_clusters_pvalues clusters_are_comparable
> 
> ### ** Examples
> 
> ## Don't show: 
> if (julia_setup_ok()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("cluster_permutation_tidiers")
> ### * cluster_permutation_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cluster_permutation_tidiers
> ### Title: Tidiers for cluster permutation test objects
> ### Aliases: cluster_permutation_tidiers tidy.timewise_statistics
> ###   tidy.empirical_clusters tidy.null_cluster_dists
> 
> ### ** Examples
> 
> ## Don't show: 
> if (julia_setup_ok()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("clusterpermute")
> ### * clusterpermute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clusterpermute
> ### Title: Conduct a cluster-based permutation test
> ### Aliases: clusterpermute
> 
> ### ** Examples
> 
> ## Don't show: 
> if (julia_setup_ok()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("compute_timewise_statistics")
> ### * compute_timewise_statistics
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compute_timewise_statistics
> ### Title: Fit Julia regression models to each time point of a time series
> ###   data
> ### Aliases: compute_timewise_statistics
> 
> ### ** Examples
> 
> ## Don't show: 
> if (julia_setup_ok()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("extract_empirical_clusters")
> ### * extract_empirical_clusters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extract_empirical_clusters
> ### Title: Detect largest clusters from a time sequence of predictor
> ###   statistics
> ### Aliases: extract_empirical_clusters
> 
> ### ** Examples
> 
> ## Don't show: 
> if (julia_setup_ok()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("extract_null_cluster_dists")
> ### * extract_null_cluster_dists
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extract_null_cluster_dists
> ### Title: Construct a null distribution of cluster-mass statistics
> ### Aliases: extract_null_cluster_dists
> 
> ### ** Examples
> 
> ## Don't show: 
> if (julia_setup_ok()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("jlmer")
> ### * jlmer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jlmer
> ### Title: Fit a Julia regression model using jlmer specifications
> ### Aliases: jlmer
> 
> ### ** Examples
> 
> ## Don't show: 
> if (julia_setup_ok()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("jlmerclusterperm_setup")
> ### * jlmerclusterperm_setup
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jlmerclusterperm_setup
> ### Title: Initial setup for the jlmerclusterperm package
> ### Aliases: jlmerclusterperm_setup
> 
> ### ** Examples
> 
> ## Don't show: 
> if (julia_setup_ok()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("julia_model_tidiers")
> ### * julia_model_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: julia_model_tidiers
> ### Title: Tidier methods for Julia regression models
> ### Aliases: julia_model_tidiers tidy.jlmer_mod glance.jlmer_mod
> 
> ### ** Examples
> 
> ## Don't show: 
> if (julia_setup_ok()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("julia_progress")
> ### * julia_progress
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: julia_progress
> ### Title: Set/get options for Julia progress bar
> ### Aliases: julia_progress
> 
> ### ** Examples
> 
> ## Don't show: 
> if (julia_setup_ok()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("julia_rng")
> ### * julia_rng
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: julia_rng
> ### Title: Interface to the Julia RNG
> ### Aliases: julia_rng set_rng_state reset_rng_state get_rng_state
> ###   set_rng_seed get_rng_seed
> 
> ### ** Examples
> 
> ## Don't show: 
> if (julia_setup_ok()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("julia_setup_ok")
> ### * julia_setup_ok
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: julia_setup_ok
> ### Title: Check Julia setup requirements for jlmerclusterperm
> ### Aliases: julia_setup_ok
> 
> ### ** Examples
> 
> julia_setup_ok()
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("make_jlmer_spec")
> ### * make_jlmer_spec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_jlmer_spec
> ### Title: Create a specifications object for fitting regression models in
> ###   Julia
> ### Aliases: make_jlmer_spec
> 
> ### ** Examples
> 
> # Bare specification object (minimal spec for fitting a global model)
> spec <- make_jlmer_spec(weight ~ 1 + Diet, ChickWeight)
> spec
── jlmer specification ───────────────────────────────────────── <jlmer_spec> ──
Formula: weight ~ 1 + Diet2 + Diet3 + Diet4
Predictors:
  Diet: Diet2, Diet3, Diet4
Data:
  weight Diet2 Diet3 Diet4
1     42     0     0     0
2     51     0     0     0
3     59     0     0     0
 [ reached 'max' / getOption("max.print") -- omitted 575 rows ]
────────────────────────────────────────────────────────────────────────────────
> 
> # Constraints on specification for CPA:
> # 1) The combination of `subject`, `trial`, and `time` must uniquely identify rows in the data
> # 2) `time` must have constant sampling rate (i.e., evenly spaced values)
> spec_wrong <- make_jlmer_spec(
+   weight ~ 1 + Diet, ChickWeight,
+   time = "Time"
+ )
! Grouping column "Time" does not uniquely identify rows in the data
! Sampling rate for the `time` column "Time" is not constant - may affect interpretability of results.
> unique(ChickWeight$Time)
 [1]  0  2  4  6  8 10 12 14 16 18 20 21
> 
> # Corrected specification for the above
> spec_correct <- make_jlmer_spec(
+   weight ~ 1 + Diet, subset(ChickWeight, Time <= 20),
+   subject = "Chick", time = "Time"
+ )
> spec_correct
── jlmer specification ───────────────────────────────────────── <jlmer_spec> ──
Formula: weight ~ 1 + Diet2 + Diet3 + Diet4
Predictors:
  Diet: Diet2, Diet3, Diet4
Groupings:
  Subject: Chick
  Trial:
  Time: Time
Data:
  weight Diet2 Diet3 Diet4 Chick Time
1     42     0     0     0     1    0
2     51     0     0     0     1    2
3     59     0     0     0     1    4
 [ reached 'max' / getOption("max.print") -- omitted 530 rows ]
────────────────────────────────────────────────────────────────────────────────
> 
> 
> 
> 
> cleanEx()
> nameEx("permute_by_predictor")
> ### * permute_by_predictor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: permute_by_predictor
> ### Title: Permute data while respecting grouping structure(s) of
> ###   observations
> ### Aliases: permute_by_predictor
> 
> ### ** Examples
> 
> ## Don't show: 
> if (julia_setup_ok()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("permute_timewise_statistics")
> ### * permute_timewise_statistics
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: permute_timewise_statistics
> ### Title: Simulate cluster-mass statistics via bootstrapped permutations
> ### Aliases: permute_timewise_statistics
> 
> ### ** Examples
> 
> ## Don't show: 
> if (julia_setup_ok()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("to_jlmer")
> ### * to_jlmer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: to_jlmer
> ### Title: Fit a Julia regression model using lme4 syntax
> ### Aliases: to_jlmer
> 
> ### ** Examples
> 
> ## Don't show: 
> if (julia_setup_ok()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("walk_threshold_steps")
> ### * walk_threshold_steps
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: walk_threshold_steps
> ### Title: Test the probability of cluster-mass statistics over a range of
> ###   threshold values
> ### Aliases: walk_threshold_steps
> 
> ### ** Examples
> 
> ## Don't show: 
> if (julia_setup_ok()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.012 0.485 6.045 0.602 0.823 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
